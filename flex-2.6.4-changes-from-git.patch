diff --git a/.mailmap b/.mailmap
new file mode 100644
index 0000000..b8d6b30
--- /dev/null
+++ b/.mailmap
@@ -0,0 +1,50 @@
+Aaron Stone <sodabrew@users.sourceforge.net>
+Akim Demaille <akim@lrde.epita.fr>
+Alastair Hughes <hobbitalastair@gmail.com>
+Alex Kennedy <alexzanderkennedy@gmail.com>
+Alexis La Goutte <alexis.lagoutte@gmail.com>
+Bastian Köcher <git@kchr.de>
+Christoph Junghans <ottxor@gentoo.org>
+Christos Zoulas <christos@zoulas.com>
+Cyril Brulebois <kibi@debian.org>
+Demi Obenour <demiobenour@gmail.com>
+Dennis Clarke <dclarke@blastwave.org>
+Egor Pugin <egor.pugin@gmail.com>
+Elias Pipping <pipping@users.sourceforge.net>
+Explorer09 <explorer09@gmail.com>
+Hans-Bernhard Broeker <HBBroeker@T-Online.de>
+Harald van Dijk <harald@gigawatt.nl>
+Hugh Sasse <hgs@dmu.ac.uk>
+Jaska Uimonen <jaska.uimonen@helsinki.fi>
+Jeff Smith <whydoubt@gmail.com>
+John Millaway <john43@users.sourceforge.net>
+Manoj Srivastava <srivasta@golden-gryphon.com>
+Mariusz Pluciński <mplucinski@mplucinski.com>
+Michael Haubenwallner <michael.haubenwallner@ssi-schaefer.com>
+Michael McConville <mmcconville@mykolab.com> <mmcco@mykolab.com>
+Michael Reed <m.reed@mykolab.com>
+Michael van Elst <mlelstv@NetBSD.org>
+Mightyjo <mightyjo@gmail.com>
+Mike Frysinger <vapier@gentoo.org>
+OBATA Akio <obache@NetBSD.org>
+Robert Larice <Robert.Larice@t-online.de> rlar <rlar>
+Robert Larice <Robert.Larice@t-online.de> Robert.Larice Robert Larice <Robert.Larice@t-online.de>
+Robert Minsk <rminsk@users.sourceforge.net>
+Samuel Thibault <samuel.thibault@ens-lyon.org>
+Sean McBride <sean@rogue-research.com>
+Serguey Parkhomovsky <sergueyparkhomovsky@gmail.com> <xindigo@gmail.com>
+Simon Sobisch <simonsobisch@web.de>
+Stefan Reinauer <stefan.reinauer@coreboot.org>
+Thomas Klausner <wiz@NetBSD.org>
+Till Varoquaux <till.varoquaux@gmail.com>
+Tobias Klauser <tklauser@distanz.ch>
+Todd C. Miller <Todd.Miller@courtesan.com>
+Translation Project <coordinator@translationproject.org> <coordinators@translationproject.org>
+Translation Project <coordinator@translationproject.org> <translation@translationproject.org>
+Vern Paxson <vern@ee.lbl.gov>
+Will Estes <westes575@gmail.com> <wlestes@users.sourceforge.net>
+Yuri <yuri@tsoft.com>
+luistung <dongliang1986@gmail.com>
+lukeallardyce <lukeallardyce@users.sourceforge.net>
+nomis52 <nomis52@users.sourceforge.net>
+viktor.shepel <shepelvictor@bigmir.net>
diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 0000000..09cb041
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1,24 @@
+language: c
+
+compiler:
+  - gcc
+
+addons:
+  apt:
+    sources:
+    - ubuntu-toolchain-r-test
+    packages:
+    - autoconf
+    - bison
+    - gcc-6
+    - help2man
+    - lzip
+    - texinfo
+    - texlive
+
+before_script:
+    - ./.travis/install-gettext.sh
+    - ./.travis/install-automake.sh
+    - export PATH=$HOME/bin:$PATH
+
+script: ./autogen.sh && ./configure && make && make check && make distcheck
diff --git a/.travis/install-automake.sh b/.travis/install-automake.sh
new file mode 100755
index 0000000..718cab3
--- /dev/null
+++ b/.travis/install-automake.sh
@@ -0,0 +1,24 @@
+#!/bin/bash -ex
+
+wget -nv https://ftp.gnu.org/gnu/automake/automake-1.15.1.tar.gz
+
+# Verify tarball against hard-coded hashes. GPG signatures require an external
+# keyserver which might be offline, which is undesirable for build server use.
+# It's equally secure to just hard-code hashes, provided they're trusted (i.e.
+# you verify a hash against a GPG signature once).
+echo 'd3cd5fc9bbea9f977b51799180cde5d253dcba96 *automake-1.15.1.tar.gz'|
+    sha1sum -c || :
+printf '%s *automake-1.15.1.tar.gz\n' \
+f0d4717ebe2c76cec5d487de090f6e1c0f784b0d382fd964ffa846287e2a364a\
+52531a26ab98b7033ac04ed302a247b3b114299def54819a03439bfc962ff61b|
+    sha512sum -c || :
+
+tar xf automake-1.15.1.tar.gz
+cd automake-1.15.1
+# Don't flood Travis CI build log with dependency packages unless error occurs.
+./configure --quiet --prefix="$HOME" ||
+    { s=$? && cat config.log && (exit $s); }
+make -s V=0 >/dev/null 2>&1 || make -s V=1
+make -s install >make_install.log 2>&1 ||
+    { s=$? && cat make_install.log && (exit $s); }
+rm make_install.log || :
diff --git a/.travis/install-gettext.sh b/.travis/install-gettext.sh
new file mode 100755
index 0000000..1c44b79
--- /dev/null
+++ b/.travis/install-gettext.sh
@@ -0,0 +1,25 @@
+#!/bin/bash -ex
+
+wget -nv https://ftp.gnu.org/gnu/gettext/gettext-0.19.8.1.tar.lz
+
+# Verify tarball against hard-coded hashes. GPG signatures require an external
+# keyserver which might be offline, which is undesirable for build server use.
+# It's equally secure to just hard-code hashes, provided they're trusted (i.e.
+# you verify a hash against a GPG signature once).
+echo '404e072c455f79be4a2458863c19fb55a217771e *gettext-0.19.8.1.tar.lz'|
+    sha1sum -c || :
+printf '%s *gettext-0.19.8.1.tar.lz\n' \
+27c7a15be1ffd30a0182e264d0bf896850a295160872e1b1b9d1e9a15bc486cd\
+93465c131f948206fa0bbe2e3eacfc8489dd0cfc5ea5dcf05eff3829e27fc60f|
+    sha512sum -c || :
+
+tar xf gettext-0.19.8.1.tar.lz
+cd gettext-0.19.8.1
+# Don't flood Travis CI build log with dependency packages unless error occurs.
+# libacl is not used in this Travis build system.
+./configure --quiet --prefix="$HOME" --disable-acl ||
+    { s=$? && cat config.log && (exit $s); }
+make -s V=0 >/dev/null 2>&1 || make -s V=1
+make -s install >make_install.log 2>&1 ||
+    { s=$? && cat make_install.log && (exit $s); }
+rm make_install.log || :
diff --git a/Makefile.am b/Makefile.am
index 638c549..b3b0810 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -49,6 +49,29 @@ SUBDIRS = \
 	tests \
 	tools
 
+# Convenience targets to build libfl only
+# These are actually wrappers around automake- and libtool-generated targets
+
+libfl:
+	cd src && $(MAKE) $(AM_MAKEFLAGS) libfl.la libfl.pc
+
+install-libfl:
+	cd src && \
+	$(MAKE) $(AM_MAKEFLAGS) lib_LTLIBRARIES=libfl.la \
+	pkgconfig_DATA=libfl.pc install-libLTLIBRARIES install-pkgconfigDATA
+
+uninstall-libfl:
+	cd src && \
+	$(MAKE) $(AM_MAKEFLAGS) \
+	lib_LTLIBRARIES=libfl.la pkgconfig_DATA=libfl.pc \
+	uninstall-libLTLIBRARIES uninstall-pkgconfigDATA
+
+# libfl.pc is cleaned via 'distclean' target
+clean-libfl:
+	cd src && \
+	$(MAKE) $(AM_MAKEFLAGS) lib_LTLIBRARIES=libfl.la clean-libLTLIBRARIES \
+	clean-libtool
+
 # Create the ChangeLog, but only if we're inside a git working directory
 
 ChangeLog: $(srcdir)/tools/git2cl
@@ -63,4 +86,5 @@ install-exec-hook:
 	cd $(DESTDIR)$(bindir) && \
 		$(LN_S) -f flex$(EXEEXT) flex++$(EXEEXT)
 
-.PHONY: ChangeLog indent
+.PHONY: libfl install-libfl uninstall-libfl clean-libfl \
+	ChangeLog indent
diff --git a/NEWS b/NEWS
index 85d900b..2a8c897 100644
--- a/NEWS
+++ b/NEWS
@@ -1,5 +1,59 @@
 flex NEWS
 
+* Noteworthy changes in release  ?.? (????-??-??) [?]
+
+** build
+
+*** Flex now includes its own <config.h> header before including
+    system headers so that any system specific features detected by
+    configure are taken into account during compilation of flex
+    itself.
+
+*** The flex build system now includes Makefile targets at the top
+    level to allow just building and installing libfl.
+
+*** The flex distribution now includes a file, src/libfl.pc, to allow
+    using pkgconfig to find out what flags to use when building
+    against libfl from flex.
+
+*** Various edge cases, mostly involving out-of-tree builds have been
+    accounted for in the autotools build system.
+
+*** A crash during building on NetBSD has been fixed.
+
+*** Flex is now automatically built by travis-ci. That should increase
+    the visibility of bugs and help prevent regressions.
+
+** documentation
+
+*** a new Ukrainian translation has been submitted from the Translation Project.
+
+** scanner
+
+*** Some memory leaks have been fixed.
+
+*** A long standing bug that effected expressions of the form c{i,j}
+    where 'c' is a character and {i,j} describes the number of times
+    to match against 'c' when case sensitivity was turned on has been
+    fixed.
+
+*** New option: --backup-file allows setting the name of the file
+    written containing backing up information. Useful if you need
+    backing up information from multiple scanners in the same
+    directory.
+
+*** flex emits correct line number directives when line numbers refer
+    to the file containing the line number directives.
+
+*** The options {no,}yy{get,set}_column are now supported.
+
+** test
+
+*** Generating the various tableoptions make rules is now more portable.
+
+*** Tests of the options -C*f and -C*F will now run correctly on
+    filesystems that are not case sensitive.
+
 * Noteworthy changes in release 2.6.4 (2017-05-06) [stable]
 
 ** build
diff --git a/README.md b/README.md
index b979b01..e4ea83e 100644
--- a/README.md
+++ b/README.md
@@ -19,9 +19,10 @@ There are several mailing lists available as well:
 * flex-devel@lists.sourceforge.net - where you can discuss development
   of flex itself
 
-Find information on subscribing to the mailing lists at:
-
-http://sourceforge.net/mail/?group_id=97492
+Find information on subscribing to the mailing lists or search in the
+archive at: https://sourceforge.net/p/flex/mailman/
+Note: Posting is only allowed from addresses that are subscribed to
+the lists.
 
 The flex distribution contains the following files which may be of
 interest:
@@ -33,7 +34,7 @@ interest:
 * COPYING - flex's copyright and license.
 * doc/ - user documentation.
 * examples/ - containing examples of some possible flex scanners and a
-	      few other things. See the file examples/README for more
+              few other things. See the file examples/README for more
               details.
 * tests/ - regression tests. See TESTS/README for details.
 * po/ - internationalization support files.
@@ -43,7 +44,7 @@ repository:
 
 * compiler suite - flex is built with gcc
 * bash, or a good Bourne-style shell
-* m4 - m4 -p needs to work; GNU m4 and a few others are suitable
+* m4 - `m4 -P` needs to work; GNU m4 and a few others are suitable
 * GNU bison;  to generate parse.c from parse.y
 * autoconf; for handling the build system
 * automake; for Makefile generation
@@ -74,12 +75,14 @@ in the top level of the flex source tree.
 This script calls the various tools needed to get flex ready for the
 GNU-style configure script to be able to work.
 
-From this point on, building flex follows the usual  routine:
+From this point on, building flex follows the usual routine:
 
 ```bash
 configure && make && make install
 ```
 
+---
+
 This file is part of flex.
 
 This code is derived from software contributed to Berkeley by
diff --git a/configure.ac b/configure.ac
index 55e774b..9c53590 100644
--- a/configure.ac
+++ b/configure.ac
@@ -25,10 +25,12 @@
 # autoconf requirements and initialization
 
 AC_INIT([the fast lexical analyser generator],[2.6.4],[flex-help@lists.sourceforge.net],[flex])
+AC_PREREQ([2.60])
 AC_CONFIG_SRCDIR([src/scan.l])
 AC_CONFIG_AUX_DIR([build-aux])
+AC_USE_SYSTEM_EXTENSIONS
 LT_INIT
-AM_INIT_AUTOMAKE([1.11.3 -Wno-portability foreign check-news std-options dist-lzip parallel-tests subdir-objects])
+AM_INIT_AUTOMAKE([1.15 -Wno-portability foreign std-options dist-lzip parallel-tests subdir-objects])
 AC_CONFIG_HEADER([src/config.h])
 AC_CONFIG_LIBOBJ_DIR([lib])
 AC_CONFIG_MACRO_DIR([m4])
@@ -38,7 +40,7 @@ AC_SUBST(SHARED_VERSION_INFO)
 # checks for programs
 
 AM_GNU_GETTEXT([external])
-AM_GNU_GETTEXT_VERSION([0.18])
+AM_GNU_GETTEXT_VERSION([0.19.7])
 AC_PROG_YACC
 AS_IF([test "$YACC" != 'bison -y'], [
 	YACC="\${top_srcdir}/build-aux/missing bison -y"
@@ -54,6 +56,9 @@ AC_PROG_LN_S
 AC_PROG_AWK
 AC_PROG_INSTALL
 
+pkgconfigdir=${libdir}/pkgconfig
+AC_SUBST(pkgconfigdir)
+
 # allow passing a variable `WARNINGFLAGS',
 #   either when invoking `configure', or when invoking `make'
 # default to something useful if GCC was detected
@@ -153,21 +158,19 @@ AC_FUNC_REALLOC
 AS_IF([test "$cross_compiling" = yes],
    AC_MSG_WARN([result $ac_cv_func_realloc_0_nonnull guessed because of cross compilation]))
 
-AC_CHECK_FUNCS([dup2 dnl
-memset dnl
-regcomp dnl
-strcasecmp dnl
-strchr dnl
-strdup dnl
-strtol dnl
-], [], [AC_MSG_ERROR(required library function not found on your system)])
-
-# Optional library functions
-AC_CHECK_FUNCS([dnl
-pow dnl           Used only by "examples/manual/expr"
-setlocale dnl     Needed only if NLS is enabled
-reallocarray dnl  OpenBSD function. We have replacement if not available.
-])
+dnl Autoheader (<= 2.69) bug: "dnl" comments in a quoted argument of
+dnl AC_CHECK_FUNCS will expand wierdly in config.h.in.
+dnl (https://lists.gnu.org/archive/html/bug-autoconf/2018-02/msg00005.html)
+
+AC_CHECK_FUNCS([dup2 memset regcomp strcasecmp strchr strdup strtol], [],
+  [AC_MSG_ERROR(required library function not found on your system)])
+
+# Optional library functions:
+# pow - Used only by "examples/manual/expr".
+# setlocale - Needed only if NLS is enabled.
+# reallocarr - NetBSD function. Use reallocarray if not available.
+# reallocarray - OpenBSD function. We have replacement if not available.
+AC_CHECK_FUNCS([pow setlocale reallocarr reallocarray])
 
 AC_CONFIG_FILES(
 Makefile
@@ -176,6 +179,7 @@ examples/Makefile
 examples/fastwc/Makefile
 examples/manual/Makefile
 po/Makefile.in
+src/libfl.pc
 src/Makefile
 tools/Makefile
 tests/Makefile
diff --git a/doc/flex.texi b/doc/flex.texi
index bccab1e..9087622 100644
--- a/doc/flex.texi
+++ b/doc/flex.texi
@@ -1978,15 +1978,23 @@ as though you had used
 @deftypefun void yy_pop_state ()
 pops the top of the stack and switches to it via
 @code{BEGIN}.
+The program execution aborts, if there is no state on the stack.
 @end deftypefun
 
 @deftypefun int yy_top_state ()
-returns the top of the stack without altering the stack's contents.
+returns the top of the stack without altering the stack's contents
+if a top state on the stack exists or the current state via
+@code{YY_START}
+otherwise.
 @end deftypefun
 
 @cindex memory, for start condition stacks
 The start condition stack grows dynamically and so has no built-in size
 limitation.  If memory is exhausted, program execution aborts.
+The stack is not automatically reset.  The function
+@code{yylex_destroy}
+should be called to reset and destroy the state stack which then frees
+other resources used by the scanner.
 
 To use start condition stacks, your scanner must include a @code{%option
 stack} directive (@pxref{Scanner Options}).
diff --git a/po/LINGUAS b/po/LINGUAS
index 4c51e38..ab7f200 100644
--- a/po/LINGUAS
+++ b/po/LINGUAS
@@ -1,23 +1,2 @@
-ca
-da
-de
-en@quot
-en@boldquot
-eo
-es
-fi
-fr
-ga
-hr
-ko
-nl
-pl
-pt_BR
-ro
-ru
-sr
-sv
-tr
-vi
-zh_CN
-zh_TW
+# List of available languages.
+ca da de en@boldquot en@quot eo es fi fr ga hr ko nl pl pt_BR ro ru sr sv tr uk vi zh_CN zh_TW
diff --git a/po/uk.po b/po/uk.po
new file mode 100644
index 0000000..e047fda
--- /dev/null
+++ b/po/uk.po
@@ -0,0 +1,975 @@
+# Ukrainian translations for flex.
+# Copyright (C) 2017 The Flex Project (msgids)
+# This file is distributed under the same license as the flex package.
+#
+# Viktor Shepel <shepelvictor@bigmir.net>, 2017.
+# Yuri Chornoivan <yurchor@ukr.net>, 2017.
+msgid ""
+msgstr ""
+"Project-Id-Version: flex 2.5.38\n"
+"Report-Msgid-Bugs-To: flex-devel@lists.sourceforge.net\n"
+"POT-Creation-Date: 2017-05-24 18:00-0400\n"
+"PO-Revision-Date: 2017-06-17 09:26+0300\n"
+"Last-Translator: Yuri Chornoivan <yurchor@ukr.net>\n"
+"Language-Team: Ukrainian <translation-team-uk@lists.sourceforge.net>\n"
+"Language: uk\n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=UTF-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+"X-Bugs: Report translation errors to the Language-Team address.\n"
+"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
+"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
+"X-Generator: Lokalize 1.5\n"
+
+#: src/buf.c:79
+msgid "Allocation of buffer to print string failed"
+msgstr "Не вдалось виділити буфер для рядка, що виводиться"
+
+#: src/buf.c:107
+msgid "Allocation of buffer for line directive failed"
+msgstr "Не вдалось виділити буфер для рядкової директиви"
+
+#: src/buf.c:177
+msgid "Allocation of buffer for m4 def failed"
+msgstr "Не вдалось виділити буфер для m4 def"
+
+#: src/buf.c:198
+msgid "Allocation of buffer for m4 undef failed"
+msgstr "Не вдалось виділити буфер для m4 undef"
+
+#: src/dfa.c:59
+#, c-format
+msgid "State #%d is non-accepting -\n"
+msgstr "Стан #%d не є допустимим -\n"
+
+#: src/dfa.c:119
+msgid "dangerous trailing context"
+msgstr "небезпечний замикаючий контекст"
+
+#: src/dfa.c:159
+#, c-format
+msgid " associated rule line numbers:"
+msgstr " номера рядків асоційованого правила:"
+
+#: src/dfa.c:193
+#, c-format
+msgid " out-transitions: "
+msgstr " out-переходи: "
+
+#: src/dfa.c:201
+#, c-format
+msgid ""
+"\n"
+" jam-transitions: EOF "
+msgstr ""
+"\n"
+" jam-переходи: EOF "
+
+#: src/dfa.c:331
+msgid "consistency check failed in epsclosure()"
+msgstr "помилка при перевірці на цілісність у epsclosure()"
+
+#: src/dfa.c:419
+msgid ""
+"\n"
+"\n"
+"DFA Dump:\n"
+"\n"
+msgstr ""
+"\n"
+"\n"
+"Дамп ДСА:\n"
+"\n"
+
+#: src/dfa.c:587
+msgid "could not create unique end-of-buffer state"
+msgstr "неможливо створити унікальний стан end_of_buffer"
+
+#: src/dfa.c:608
+#, c-format
+msgid "state # %d:\n"
+msgstr "стан # %d:\n"
+
+#: src/dfa.c:768
+msgid "Could not write yynxt_tbl[][]"
+msgstr "Неможливо записати yynxt_tbl[][]"
+
+#: src/dfa.c:1028
+msgid "bad transition character detected in sympartition()"
+msgstr "виявлено невірний символ переходу в sympartition()"
+
+#: src/gen.c:480
+msgid ""
+"\n"
+"\n"
+"Equivalence Classes:\n"
+"\n"
+msgstr ""
+"\n"
+"\n"
+"Класи еквівалентності:\n"
+"\n"
+
+#: src/gen.c:669 src/gen.c:698 src/gen.c:1218
+#, c-format
+msgid "state # %d accepts: [%d]\n"
+msgstr "стан # %d приймає: [%d]\n"
+
+#: src/gen.c:1115
+#, c-format
+msgid "state # %d accepts: "
+msgstr "стан # %d приймає: "
+
+#: src/gen.c:1162
+msgid "Could not write yyacclist_tbl"
+msgstr "Неможливо записати yyacclist_tbl"
+
+#: src/gen.c:1236
+msgid "Could not write yyacc_tbl"
+msgstr "Неможливо записати yyacc_tbl"
+
+#: src/gen.c:1251 src/gen.c:1623 src/gen.c:1646
+msgid "Could not write ecstbl"
+msgstr "Неможливо записати ecstbl"
+
+#: src/gen.c:1271
+msgid ""
+"\n"
+"\n"
+"Meta-Equivalence Classes:\n"
+msgstr ""
+"\n"
+"\n"
+"Мета-Еквівалентні Класи:\n"
+
+#: src/gen.c:1293
+msgid "Could not write yymeta_tbl"
+msgstr "Неможливо записати yymeta_tbl"
+
+#: src/gen.c:1352
+msgid "Could not write yybase_tbl"
+msgstr "Неможливо записати yybase_tbl"
+
+#: src/gen.c:1384
+msgid "Could not write yydef_tbl"
+msgstr "Неможливо записати yydef_tbl"
+
+#: src/gen.c:1422
+msgid "Could not write yynxt_tbl"
+msgstr "Неможливо записати yynxt_tbl"
+
+#: src/gen.c:1456
+msgid "Could not write yychk_tbl"
+msgstr "Неможливо записати yychk_tbl"
+
+#: src/gen.c:1608 src/gen.c:1637
+msgid "Could not write ftbl"
+msgstr "Неможливо записати ftbl"
+
+#: src/gen.c:1614
+msgid "Could not write ssltbl"
+msgstr "Неможливо записати ssltbl"
+
+#: src/gen.c:1665
+msgid "Could not write eoltbl"
+msgstr "Неможливо записати eoltbl"
+
+#: src/gen.c:1722
+msgid "Could not write yynultrans_tbl"
+msgstr "Неможливо записати yynultrans_tbl"
+
+#: src/main.c:178
+msgid "rule cannot be matched"
+msgstr "неможливо застосувати правило"
+
+#: src/main.c:183
+msgid "-s option given but default rule can be matched"
+msgstr ""
+"вказано параметр -s, але правило за замовчуванням може бути застосоване"
+
+#: src/main.c:221
+msgid "Can't use -+ with -l option"
+msgstr "Неможливо використовувати -+ з параметром -l"
+
+#: src/main.c:224
+msgid "Can't use -f or -F with -l option"
+msgstr "Неможливо використовувати -f або -F з параметром -l"
+
+#: src/main.c:228
+msgid "Can't use --reentrant or --bison-bridge with -l option"
+msgstr ""
+"Неможливо використовувати --reentrant або --bison-bridge з параметром -l"
+
+#: src/main.c:260
+msgid "-Cf/-CF and -Cm don't make sense together"
+msgstr "Параметри -Cf/-CF і -Cm разом не мають сенсу"
+
+#: src/main.c:263
+msgid "-Cf/-CF and -I are incompatible"
+msgstr "Параметри -Cf/-CF і -I несумісні"
+
+#: src/main.c:267
+msgid "-Cf/-CF are incompatible with lex-compatibility mode"
+msgstr "Параметри -Cf/-CF несумісні з режимом lex-compatibility"
+
+#: src/main.c:272
+msgid "-Cf and -CF are mutually exclusive"
+msgstr "Параметри -Cf і -CF є взаємовиключними"
+
+#: src/main.c:276
+msgid "Can't use -+ with -CF option"
+msgstr "Неможливо використовувати -+ з параметром -CF"
+
+#: src/main.c:279
+#, c-format
+msgid "%array incompatible with -+ option"
+msgstr "%array несумісний з параметром -+"
+
+#: src/main.c:284
+msgid "Options -+ and --reentrant are mutually exclusive."
+msgstr "Параметри -+ і --reentrant є взаємовиключними."
+
+#: src/main.c:287
+msgid "bison bridge not supported for the C++ scanner."
+msgstr "bison bridge не підтримується для сканера C++."
+
+#: src/main.c:336 src/main.c:419
+#, c-format
+msgid "could not create %s"
+msgstr "неможливо створити %s"
+
+#: src/main.c:431
+msgid "could not write tables header"
+msgstr "Неможливо записати заголовок таблиць"
+
+#: src/main.c:435
+#, c-format
+msgid "can't open skeleton file %s"
+msgstr "Неможливо відкрити файл-каркас %s"
+
+#: src/main.c:450
+msgid "Prefix cannot include '[' or ']'"
+msgstr "Префікс не може містити «[» або «]»"
+
+#: src/main.c:474
+msgid "allocation of macro definition failed"
+msgstr "Не вдалось розмістити визначення макросу"
+
+#: src/main.c:521
+#, c-format
+msgid "input error reading skeleton file %s"
+msgstr "помилка читання файла-каркаса %s"
+
+#: src/main.c:525
+#, c-format
+msgid "error closing skeleton file %s"
+msgstr "помилка при закритті файла-каркаса %s"
+
+#: src/main.c:711
+#, c-format
+msgid "error creating header file %s"
+msgstr "помилка створення файла-заголовку %s"
+
+#: src/main.c:719
+#, c-format
+msgid "error writing output file %s"
+msgstr "помилка запису у вихідний файл %s"
+
+#: src/main.c:723
+#, c-format
+msgid "error closing output file %s"
+msgstr "помилка закриття вихідного файла %s"
+
+#: src/main.c:727
+#, c-format
+msgid "error deleting output file %s"
+msgstr "помилка видалення вихідного файла %s"
+
+#: src/main.c:734
+#, c-format
+msgid "No backing up.\n"
+msgstr "Резервне копіювання вимкнено.\n"
+
+#: src/main.c:738
+#, c-format
+msgid "%d backing up (non-accepting) states.\n"
+msgstr "резервне копіювання %d (недопустимих) станів.\n"
+
+#: src/main.c:742
+#, c-format
+msgid "Compressed tables always back up.\n"
+msgstr "Створення резервних копій стислих таблиць виконується завжди.\n"
+
+#: src/main.c:745
+#, c-format
+msgid "error writing backup file %s"
+msgstr "помилка запису резервної копії файла %s"
+
+#: src/main.c:749
+#, c-format
+msgid "error closing backup file %s"
+msgstr "помилка закриття резервної копії файла %s"
+
+#: src/main.c:754
+#, c-format
+msgid "%s version %s usage statistics:\n"
+msgstr "статистика використання %s версії %s:\n"
+
+#: src/main.c:757
+#, c-format
+msgid "  scanner options: -"
+msgstr "  параметри сканера: -"
+
+#: src/main.c:836
+#, c-format
+msgid "  %d/%d NFA states\n"
+msgstr "  %d/%d станів НСА\n"
+
+#: src/main.c:838
+#, c-format
+msgid "  %d/%d DFA states (%d words)\n"
+msgstr "  %d/%d станів ДСА (%d слів)\n"
+
+#: src/main.c:840
+#, c-format
+msgid "  %d rules\n"
+msgstr "  %d правил\n"
+
+#: src/main.c:845
+#, c-format
+msgid "  No backing up\n"
+msgstr " Резервне копіювання вимкнено\n"
+
+#: src/main.c:849
+#, c-format
+msgid "  %d backing-up (non-accepting) states\n"
+msgstr " резервне копіювання %d (недопустимих) станів\n"
+
+#: src/main.c:854
+#, c-format
+msgid "  Compressed tables always back-up\n"
+msgstr " Створення резервних копій стислих таблиць виконується завжди\n"
+
+#: src/main.c:858
+#, c-format
+msgid "  Beginning-of-line patterns used\n"
+msgstr " Використовуються шаблони початку рядка\n"
+
+#: src/main.c:860
+#, c-format
+msgid "  %d/%d start conditions\n"
+msgstr "  %d/%d початкових умов\n"
+
+#: src/main.c:864
+#, c-format
+msgid "  %d epsilon states, %d double epsilon states\n"
+msgstr "  %d епсилон-станів, %d подвійних епсилон-станів\n"
+
+#: src/main.c:868
+#, c-format
+msgid "  no character classes\n"
+msgstr "  відсутні класи символів\n"
+
+#: src/main.c:872
+#, c-format
+msgid "  %d/%d character classes needed %d/%d words of storage, %d reused\n"
+msgstr ""
+"  %d/%d символьних класів потребують %d/%d слів для зберігання, %d "
+"використано вдруге\n"
+
+#: src/main.c:877
+#, c-format
+msgid "  %d state/nextstate pairs created\n"
+msgstr " створено %d пар стан/наступний-стан\n"
+
+#: src/main.c:880
+#, c-format
+msgid "  %d/%d unique/duplicate transitions\n"
+msgstr "  %d/%d унікальних/повторюваних переходів\n"
+
+#: src/main.c:885
+#, c-format
+msgid "  %d table entries\n"
+msgstr "  %d елементів таблиці\n"
+
+#: src/main.c:893
+#, c-format
+msgid "  %d/%d base-def entries created\n"
+msgstr " створено %d/%d base-def елементів\n"
+
+#: src/main.c:897
+#, c-format
+msgid "  %d/%d (peak %d) nxt-chk entries created\n"
+msgstr "  створено %d/%d (пік %d) записів nxt-chk\n"
+
+#: src/main.c:901
+#, c-format
+msgid "  %d/%d (peak %d) template nxt-chk entries created\n"
+msgstr "  створено %d/%d (пік %d) шаблонних записів nxt-chk\n"
+
+#: src/main.c:905
+#, c-format
+msgid "  %d empty table entries\n"
+msgstr "  %d порожніх елементів таблиці\n"
+
+#: src/main.c:907
+#, c-format
+msgid "  %d protos created\n"
+msgstr "  створено %d прототипів\n"
+
+#: src/main.c:910
+#, c-format
+msgid "  %d templates created, %d uses\n"
+msgstr "  створено %d шаблонів, %d використовується\n"
+
+#: src/main.c:918
+#, c-format
+msgid "  %d/%d equivalence classes created\n"
+msgstr "  створено класів еквівалентності %d/%d\n"
+
+#: src/main.c:926
+#, c-format
+msgid "  %d/%d meta-equivalence classes created\n"
+msgstr "  створено класів мета-еквівалентності %d/%d\n"
+
+#: src/main.c:932
+#, c-format
+msgid "  %d (%d saved) hash collisions, %d DFAs equal\n"
+msgstr "  %d (%d записано) колізій хеш-таблиці, %d еквівалентних ДСА\n"
+
+#: src/main.c:934
+#, c-format
+msgid "  %d sets of reallocations needed\n"
+msgstr "  потрібно %d наборів повторних розміщень\n"
+
+#: src/main.c:936
+#, c-format
+msgid "  %d total table entries needed\n"
+msgstr "  всього потрібно %d елементів таблиці\n"
+
+#: src/main.c:1010
+#, c-format
+msgid "Internal error. flexopts are malformed.\n"
+msgstr "Внутрішня помилка. Неправильне значення flexopts.\n"
+
+#: src/main.c:1020
+#, c-format
+msgid "Try `%s --help' for more information.\n"
+msgstr "Спробуйте «%s --help» для отримання більш докладного опису.\n"
+
+#: src/main.c:1077
+#, c-format
+msgid "unknown -C option '%c'"
+msgstr "невідоме значення «%c» для параметру -C"
+
+#: src/main.c:1206
+#, c-format
+msgid "%s %s\n"
+msgstr "%s %s\n"
+
+#: src/main.c:1486
+msgid "fatal parse error"
+msgstr "фатальна помилка розбору"
+
+#: src/main.c:1518
+#, c-format
+msgid "could not create backing-up info file %s"
+msgstr "неможливо створити резервну копію інформаційного файла %s"
+
+#: src/main.c:1539
+#, c-format
+msgid "-l AT&T lex compatibility option entails a large performance penalty\n"
+msgstr ""
+"Параметр -l сумісності з AT&T lex спричиняє значне зниження продуктивності\n"
+
+#: src/main.c:1542
+#, c-format
+msgid " and may be the actual source of other reported performance penalties\n"
+msgstr "і також може бути істинним джерелом проблем з продуктивністю\n"
+
+#: src/main.c:1548
+#, c-format
+msgid ""
+"%%option yylineno entails a performance penalty ONLY on rules that can match "
+"newline characters\n"
+msgstr ""
+"%%option yylineno спричиняе значне зниження продуктивності ТІЛЬКИ для "
+"правил, котрі описують символи нового рядка\n"
+
+#: src/main.c:1555
+#, c-format
+msgid "-I (interactive) entails a minor performance penalty\n"
+msgstr "-I (інтерактивний) спричиняе незначне зниження продуктивності\n"
+
+#: src/main.c:1560
+#, c-format
+msgid "yymore() entails a minor performance penalty\n"
+msgstr "yymore() спричиняе незначне зниження продуктивності\n"
+
+#: src/main.c:1566
+#, c-format
+msgid "REJECT entails a large performance penalty\n"
+msgstr "REJECT спричиняе значне зниження продуктивності\n"
+
+#: src/main.c:1571
+#, c-format
+msgid "Variable trailing context rules entail a large performance penalty\n"
+msgstr ""
+"Правила котрі мають замикаючий контекст змінної довжини значно знижують "
+"продуктивність\n"
+
+#: src/main.c:1583
+msgid "REJECT cannot be used with -f or -F"
+msgstr "REJECT не може бути використано разом з -f або -F"
+
+#: src/main.c:1586
+#, c-format
+msgid "%option yylineno cannot be used with REJECT"
+msgstr "%option yylineno не може бути використано з REJECT"
+
+#: src/main.c:1589
+msgid "variable trailing context rules cannot be used with -f or -F"
+msgstr ""
+"Правила котрі мають замикаючий контекст змінної довжини не можуть бути "
+"використані з -f or -F"
+
+#: src/main.c:1714
+#, c-format
+msgid "%option yyclass only meaningful for C++ scanners"
+msgstr "%option yyclass має сенс тільки для сканерів C++"
+
+#: src/main.c:1801
+#, c-format
+msgid "Usage: %s [OPTIONS] [FILE]...\n"
+msgstr "Використання: %s [ПАРАМЕТРИ] [ФАЙЛ]…\n"
+
+#: src/main.c:1804
+#, fuzzy, c-format
+msgid ""
+"Generates programs that perform pattern-matching on text.\n"
+"\n"
+"Table Compression:\n"
+"  -Ca, --align      trade off larger tables for better memory alignment\n"
+"  -Ce, --ecs        construct equivalence classes\n"
+"  -Cf               do not compress tables; use -f representation\n"
+"  -CF               do not compress tables; use -F representation\n"
+"  -Cm, --meta-ecs   construct meta-equivalence classes\n"
+"  -Cr, --read       use read() instead of stdio for scanner input\n"
+"  -f, --full        generate fast, large scanner. Same as -Cfr\n"
+"  -F, --fast        use alternate table representation. Same as -CFr\n"
+"  -Cem              default compression (same as --ecs --meta-ecs)\n"
+"\n"
+"Debugging:\n"
+"  -d, --debug             enable debug mode in scanner\n"
+"  -b, --backup            write backing-up information to %s\n"
+"  -p, --perf-report       write performance report to stderr\n"
+"  -s, --nodefault         suppress default rule to ECHO unmatched text\n"
+"  -T, --trace             %s should run in trace mode\n"
+"  -w, --nowarn            do not generate warnings\n"
+"  -v, --verbose           write summary of scanner statistics to stdout\n"
+"      --hex               use hexadecimal numbers instead of octal in debug "
+"outputs\n"
+"\n"
+"Files:\n"
+"  -o, --outfile=FILE      specify output filename\n"
+"  -S, --skel=FILE         specify skeleton file\n"
+"  -t, --stdout            write scanner on stdout instead of %s\n"
+"      --yyclass=NAME      name of C++ class\n"
+"      --header-file=FILE   create a C header file in addition to the "
+"scanner\n"
+"      --tables-file[=FILE] write tables to FILE\n"
+"\n"
+"Scanner behavior:\n"
+"  -7, --7bit              generate 7-bit scanner\n"
+"  -8, --8bit              generate 8-bit scanner\n"
+"  -B, --batch             generate batch scanner (opposite of -I)\n"
+"  -i, --case-insensitive  ignore case in patterns\n"
+"  -l, --lex-compat        maximal compatibility with original lex\n"
+"  -X, --posix-compat      maximal compatibility with POSIX lex\n"
+"  -I, --interactive       generate interactive scanner (opposite of -B)\n"
+"      --yylineno          track line count in yylineno\n"
+"\n"
+"Generated code:\n"
+"  -+,  --c++               generate C++ scanner class\n"
+"  -Dmacro[=defn]           #define macro defn  (default defn is '1')\n"
+"  -L,  --noline            suppress #line directives in scanner\n"
+"  -P,  --prefix=STRING     use STRING as prefix instead of \"yy\"\n"
+"  -R,  --reentrant         generate a reentrant C scanner\n"
+"       --bison-bridge      scanner for bison pure parser.\n"
+"       --bison-locations   include yylloc support.\n"
+"       --stdinit           initialize yyin/yyout to stdin/stdout\n"
+"       --nounistd          do not include <unistd.h>\n"
+"       --noFUNCTION        do not generate a particular FUNCTION\n"
+"\n"
+"Miscellaneous:\n"
+"  -c                      do-nothing POSIX option\n"
+"  -n                      do-nothing POSIX option\n"
+"  -?\n"
+"  -h, --help              produce this help message\n"
+"  -V, --version           report %s version\n"
+msgstr ""
+"Генерує програми, що знаходять шаблони у тексті.\n"
+"\n"
+"Стиснення таблиць:\n"
+"  -Ca, --align       вирівняти таблиці у пам'яті збільшивши розмір\n"
+"                     їх елементів\n"
+"  -Ce, --ecs         створювати класи еквівалентності\n"
+"  -Cf                не стискати таблиці; використовувати -f представлення\n"
+"  -CF                не стискати таблиці; використовувати -F представлення\n"
+"  -Cm, --meta-ecs    створювати класи мета-еквівалентності\n"
+"  -Cr, --read        використати read() замість stdio як\n"
+"                     вхідні дані сканера\n"
+"  -f, --full         створити швидкий, великий сканер. Теж саме, що -Cfr\n"
+"  -F, --fast         застосувати альтернативний опис таблиць.\n"
+"                     Теж саме, що -CFr\n"
+"  -Cem               степінь стиснення за замовчуванням\n"
+"                     (теж саме, що --ecs --meta-ecs)\n"
+"\n"
+"Налагодження:\n"
+"  -d, --debug             увімкнути режим налагодження сканера\n"
+"  -b, --backup            записати резервну копію до %s\n"
+"  -p, --perf-report       записати звіт про продуктивність до stderr\n"
+"  -s, --nodefault         припинити вивід тексту (ECHO до stdout)\n"
+"                          що не збігається з жодним правилом\n"
+"  -T, --trace             %s повинен запускатися у режимі трасування\n"
+"  -w, --nowarn            не видавати попереджень\n"
+"  -v, --verbose           записати підсумкову статистику сканера до stdout\n"
+"\n"
+"Файли:\n"
+"  -o, --outfile=ФАЙЛ        вказати ім'я вихідного файла\n"
+"  -S, --skel=ФАЙЛ           вказати файл каркасу\n"
+"  -t, --stdout              записати сканер до stdout замість %s\n"
+"      --yyclass=ІМ'Я        ім'я класу C++\n"
+"      --header-file=ФАЙЛ    створити C файл заголовок сканера\n"
+"      --tables-file[=ФАЙЛ]  записати таблиці у ФАЙЛ\n"
+"\n"
+"Поведінка сканера:\n"
+"  -7, --7bit              створити 7-бітний сканер\n"
+"  -8, --8bit              створити 8-бітний сканер\n"
+"  -B, --batch             створити пакетний сканер\n"
+"                          (протилежна за властивостями до опції -I)\n"
+"  -i, --case-insensitive  ігнорувати регістр символів у шаблонах\n"
+"  -l, --lex-compat        максимальна сумісність з оригінальним lex\n"
+"  -X, --posix-compat      максимальна сумісність з POSIX lex\n"
+"  -I, --interactive       створити інтерактивний сканер\n"
+"                          (протилежна за властивостями до опції -B)\n"
+"      --yylineno          відслідковувати число рядків у yylineno\n"
+"\n"
+"Генерація коду:\n"
+"  -+,  --c++                створити C++ клас сканера\n"
+"  -Dmacro[=defn]            #define macro defn (за замовчуванням defn='1')\n"
+"  -L,  --noline             не створювати #line директиви для сканера\n"
+"  -P,  --prefix=РЯДОК       використати РЯДОК як префікс замість «yy»\n"
+"  -R,  --reentrant          генерувати реентерабельний C-сканер\n"
+"       --bison-bridge       сканер тільки для bison аналізатору\n"
+"       --bison-locations    додати підтримку yylloc\n"
+"       --stdinit            ініціалізувати yyin/yyout до stdin/stdout\n"
+"       --noansi-definitions визначення функцій у застарілому стилі\n"
+"       --noansi-prototypes  порожній список параметрів у прототипах\n"
+"       --nounistd           не додавати <unistd.h>\n"
+"       --noФУНКЦІЯ          не генерувати задану функцію ФУНКЦІЯ\n"
+"\n"
+"Інше:\n"
+"  -с                      недіючий POSIX параметр\n"
+"  -n                      недіючий POSIX параметр\n"
+"  -?\n"
+"  -h, --help              показати цю довідку\n"
+"  -V, --version           показати версію %s\n"
+
+#: src/misc.c:64
+msgid "allocation of sko_stack failed"
+msgstr "не вдалось отримати пам’ять під sko_stack"
+
+#: src/misc.c:100
+#, c-format
+msgid "name \"%s\" ridiculously long"
+msgstr "ім'я «%s» занадто довге"
+
+#: src/misc.c:149 src/misc.c:162
+msgid "memory allocation failed in allocate_array()"
+msgstr "помилка виділення пам'яті у allocate_array()"
+
+#: src/misc.c:212
+#, c-format
+msgid "bad character '%s' detected in check_char()"
+msgstr "check_char() виявив недопустимий символ «%s»"
+
+#: src/misc.c:217
+#, c-format
+msgid "scanner requires -8 flag to use the character %s"
+msgstr "для використання символу %s сканер потребує опцію -8"
+
+#: src/misc.c:236
+msgid "memory allocation failure in xstrdup()"
+msgstr "помилка виділення пам'яті у xstrdup()"
+
+#: src/misc.c:310
+#, c-format
+msgid "%s: fatal internal error, %s\n"
+msgstr "%s: фатальна внутрішня помилка, %s\n"
+
+#: src/misc.c:671 src/misc.c:683
+msgid "attempt to increase array size failed"
+msgstr "помилка при спробі збільшити розмір масиву"
+
+#: src/misc.c:807
+msgid "bad line in skeleton file"
+msgstr "невідомий рядок у файлі-каркасі"
+
+#: src/misc.c:857
+msgid "memory allocation failed in yy_flex_xmalloc()"
+msgstr "помилка виділення пам'яті у yy_flex_xmalloc()"
+
+#: src/nfa.c:100
+#, c-format
+msgid ""
+"\n"
+"\n"
+"********** beginning dump of nfa with start state %d\n"
+msgstr ""
+"\n"
+"\n"
+"********** початок дампу НСА з початковим станом %d\n"
+
+#: src/nfa.c:111
+#, c-format
+msgid "state # %4d\t"
+msgstr "стан # %4d\t"
+
+#: src/nfa.c:126
+#, c-format
+msgid "********** end of dump\n"
+msgstr "********** кінець дампу\n"
+
+#: src/nfa.c:169
+msgid "empty machine in dupmachine()"
+msgstr "порожній автомат у dupmachine()"
+
+#: src/nfa.c:234
+#, c-format
+msgid "Variable trailing context rule at line %d\n"
+msgstr "Правило із замикаючим контекстом змінної довжини у стрічці %d\n"
+
+#: src/nfa.c:357
+msgid "bad state type in mark_beginning_as_normal()"
+msgstr "невідомий тип стану у mark_beginning_as_normal()"
+
+#: src/nfa.c:595
+#, c-format
+msgid "input rules are too complicated (>= %d NFA states)"
+msgstr "вхідні правила занадто складні (>= %d станів НСА)"
+
+#: src/nfa.c:673
+msgid "found too many transitions in mkxtion()"
+msgstr "знайдено занадто багато переходів у mkxtion()"
+
+#: src/nfa.c:699
+#, c-format
+msgid "too many rules (> %d)!"
+msgstr "занадто багато правил (> %d)!"
+
+#: src/parse.y:159
+msgid "unknown error processing section 1"
+msgstr "невідома помилка при обробці розділу 1"
+
+#: src/parse.y:184 src/parse.y:353
+msgid "bad start condition list"
+msgstr "невірний список початкових умов"
+
+#: src/parse.y:204
+msgid "Prefix must not contain [ or ]"
+msgstr "Префікс не може містити символи «[» або «]»"
+
+#: src/parse.y:317
+msgid "unrecognized rule"
+msgstr "нерозпізнане правило"
+
+#: src/parse.y:436 src/parse.y:449 src/parse.y:518
+msgid "trailing context used twice"
+msgstr "замикаючий контекст використано двічі"
+
+#: src/parse.y:554 src/parse.y:564 src/parse.y:637 src/parse.y:647
+msgid "bad iteration values"
+msgstr "невірно сформований діапазон ітерацій"
+
+#: src/parse.y:582 src/parse.y:600 src/parse.y:665 src/parse.y:683
+msgid "iteration value must be positive"
+msgstr "кількість ітерацій повинна бути додатнім числом"
+
+#: src/parse.y:806 src/parse.y:816
+#, c-format
+msgid "the character range [%c-%c] is ambiguous in a case-insensitive scanner"
+msgstr ""
+"використання діапазону символів [%c-%c] є двозначним для сканера, що не "
+"чутливий до регістру символів"
+
+#: src/parse.y:821
+msgid "negative range in character class"
+msgstr ""
+"символьний клас описано діапазоном, перший елемент котрого більший за "
+"останній"
+
+#: src/parse.y:918
+msgid "[:^lower:] is ambiguous in case insensitive scanner"
+msgstr ""
+"використання [:^lower:] є невизначеним для сканера, що не чутливий до "
+"регістру символів"
+
+#: src/parse.y:924
+msgid "[:^upper:] ambiguous in case insensitive scanner"
+msgstr ""
+"використання [:^upper:] є невизначеним для сканера, що не чутливий до "
+"регістру символів"
+
+#: src/scan.l:82 src/scan.l:646 src/scan.l:704
+msgid "Input line too long\n"
+msgstr "Занадто довгий вхідний рядок\n"
+
+#: src/scan.l:183
+#, c-format
+msgid "malformed '%top' directive"
+msgstr "нерозпізнана директива «%top»"
+
+#: src/scan.l:205
+#, no-c-format
+msgid "unrecognized '%' directive"
+msgstr "нерозпізнана директива «%»"
+
+#: src/scan.l:214
+msgid "Definition name too long\n"
+msgstr "Визначення має занадто довге ім'я\n"
+
+#: src/scan.l:309
+msgid "Unmatched '{'"
+msgstr "Непарна «{»"
+
+#: src/scan.l:325
+#, c-format
+msgid "Definition value for {%s} too long\n"
+msgstr "Визначення {%s} має занадто довге значення\n"
+
+#: src/scan.l:342
+msgid "incomplete name definition"
+msgstr "неповне визначення імені"
+
+#: src/scan.l:469
+msgid "Option line too long\n"
+msgstr "Занадто довгий параметр\n"
+
+#: src/scan.l:477
+#, c-format
+msgid "unrecognized %%option: %s"
+msgstr "нерозпізнаний %%option: %s"
+
+#: src/scan.l:661 src/scan.l:834
+msgid "bad character class"
+msgstr "помилковий символьний клас"
+
+#: src/scan.l:711
+#, c-format
+msgid "undefined definition {%s}"
+msgstr "нерозпізнане визначення {%s}"
+
+#: src/scan.l:774
+msgid "unbalanced parenthesis"
+msgstr "незбалансовані круглі дужки"
+
+#: src/scan.l:789
+#, c-format
+msgid "bad <start condition>: %s"
+msgstr "невірно сформованана <умова, що активує правило>: %s"
+
+#: src/scan.l:802
+msgid "missing quote"
+msgstr "відсутні лапки"
+
+#: src/scan.l:868
+#, c-format
+msgid "bad character class expression: %s"
+msgstr "символьний клас заданий некоректним виразом: %s"
+
+#: src/scan.l:890
+msgid "bad character inside {}'s"
+msgstr "неприйнятний символ всередині {}"
+
+#: src/scan.l:896
+msgid "missing }"
+msgstr "відсутній }"
+
+#: src/scan.l:974
+msgid "EOF encountered inside an action"
+msgstr "знайдено EOF всередині коду котрий асоційований з правилом"
+
+#: src/scan.l:979
+msgid "EOF encountered inside pattern"
+msgstr "знайдено EOF всередині шаблону, що задає правило"
+
+#: src/scan.l:1012
+#, c-format
+msgid "bad character: %s"
+msgstr "неочікуваний символ: %s"
+
+#: src/scan.l:1040
+#, c-format
+msgid "can't open %s"
+msgstr "неможливо відкрити %s"
+
+#: src/scanopt.c:259
+#, c-format
+msgid "Usage: %s [OPTIONS]...\n"
+msgstr "Використання: %s [ПАРАМЕТРИ]…\n"
+
+#: src/scanopt.c:524
+#, c-format
+msgid "option `%s' doesn't allow an argument\n"
+msgstr "параметр «%s» повинен використовуватись без аргументу\n"
+
+#: src/scanopt.c:529
+#, c-format
+msgid "option `%s' requires an argument\n"
+msgstr "параметр «% s» повинен використовуватись з аргументом\n"
+
+#: src/scanopt.c:533
+#, c-format
+msgid "option `%s' is ambiguous\n"
+msgstr "параметр «%s» є двозначним\n"
+
+#: src/scanopt.c:537
+#, c-format
+msgid "Unrecognized option `%s'\n"
+msgstr "Нерозпізнаний параметр «%s»\n"
+
+#: src/scanopt.c:541
+#, c-format
+msgid "Unknown error=(%d)\n"
+msgstr "Невідома помилка=(%d)\n"
+
+#: src/sym.c:92
+msgid "symbol table memory allocation failed"
+msgstr "помилка виділення пам'яті для таблиці символів"
+
+#: src/sym.c:183
+msgid "name defined twice"
+msgstr "ім'я визначено двічі"
+
+#: src/sym.c:231
+#, c-format
+msgid "start condition %s declared twice"
+msgstr "початкова умова %s описана двічі"
+
+#: src/yylex.c:57
+msgid "premature EOF"
+msgstr "неочікуваний EOF"
+
+#: src/yylex.c:200
+#, c-format
+msgid "End Marker\n"
+msgstr "Мітка кінця\n"
+
+#: src/yylex.c:206
+#, c-format
+msgid "*Something Weird* - tok: %d val: %d\n"
+msgstr "*Щось не так* — tok: %d val: %d\n"
+
+#~ msgid "dynamic memory failure in copy_string()"
+#~ msgstr "помилка під час роботи з динамічною пам’яттю у copy_string()"
diff --git a/src/Makefile.am b/src/Makefile.am
index e379692..e033cc8 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -1,6 +1,7 @@
 AM_YFLAGS = -d
 AM_CPPFLAGS = -DLOCALEDIR=\"$(localedir)\"
 LIBS = @LIBS@
+pkgconfigdir = @pkgconfigdir@
 
 m4 = @M4@
 
@@ -11,6 +12,7 @@ endif
 
 if ENABLE_LIBFL
 lib_LTLIBRARIES = libfl.la
+pkgconfig_DATA = libfl.pc
 endif
 libfl_la_SOURCES = \
 	libmain.c \
@@ -56,6 +58,7 @@ COMMON_SOURCES = \
 	filter.c \
 	flexdef.h \
 	flexint.h \
+	flexint_shared.h \
 	gen.c \
 	main.c \
 	misc.c \
@@ -79,6 +82,8 @@ COMMON_SOURCES = \
 
 LDADD = $(LIBOBJS) @LIBINTL@
 
+$(LIBOBJS): $(LIBOBJDIR)$(am__dirstamp)
+
 include_HEADERS = \
 	FlexLexer.h
 
@@ -91,9 +96,9 @@ CLEANFILES = stage1scan.c stage1flex$(EXEEXT)
 
 MAINTAINERCLEANFILES = skel.c
 
-skel.c: flex.skl mkskel.sh flexint.h tables_shared.h tables_shared.c
+skel.c: flex.skl mkskel.sh flexint_shared.h tables_shared.h tables_shared.c
 	$(SHELL) $(srcdir)/mkskel.sh $(srcdir) $(m4) $(VERSION) > $@.tmp
-	mv $@.tmp $@
+	mv -f $@.tmp $@
 
 if ENABLE_BOOTSTRAP
 stage1scan.c: scan.l stage1flex$(EXEEXT)
@@ -104,9 +109,9 @@ stage1scan.c: scan.c
 endif
 
 dist-hook: scan.l flex$(EXEEXT)
-	chmod u+w $(distdir)/scan.c && \
+	chmod u+w $(distdir) && \
 	./flex$(EXEEXT) -o scan.c $< && \
-	mv scan.c $(distdir)
+	mv -f scan.c $(distdir)
 
 # make needs to be told to make parse.h so that parallelized runs will
 # not fail.
diff --git a/src/ccl.c b/src/ccl.c
index ff9a213..5c5af13 100644
--- a/src/ccl.c
+++ b/src/ccl.c
@@ -73,6 +73,13 @@ void ccladd (int cclp, int ch)
 
 	newpos = ind + len;
 
+	/* For a non-last cclp, expanding the set will overflow and overwrite a
+	 * char in the next cclp.
+	 * FIXME: Need another allocation scheme for ccl's. */
+	if (cclp != lastccl) {
+		flexfatal(_("internal error: trying to add a char to a non-last ccl.\n"));
+	}
+
 	if (newpos >= current_max_ccl_tbl_size) {
 		current_max_ccl_tbl_size += MAX_CCL_TBL_SIZE_INCREMENT;
 
diff --git a/src/filter.c b/src/filter.c
index 71f3635..a7e69ec 100644
--- a/src/filter.c
+++ b/src/filter.c
@@ -47,10 +47,9 @@ struct filter *filter_create_ext (struct filter *chain, const char *cmd,
 	va_list ap;
 
 	/* allocate and initialize new filter */
-	f = malloc(sizeof(struct filter));
+	f = calloc(sizeof(struct filter), 1);
 	if (!f)
-		flexerror(_("malloc failed (f) in filter_create_ext"));
-	memset (f, 0, sizeof (*f));
+		flexerror(_("calloc failed (f) in filter_create_ext"));
 	f->filter_func = NULL;
 	f->extra = NULL;
 	f->next = NULL;
@@ -100,10 +99,9 @@ struct filter *filter_create_int (struct filter *chain,
 	struct filter *f;
 
 	/* allocate and initialize new filter */
-	f = malloc(sizeof(struct filter));
+	f = calloc(sizeof(struct filter), 1);
 	if (!f)
-		flexerror(_("malloc failed in filter_create_int"));
-	memset (f, 0, sizeof (*f));
+		flexerror(_("calloc failed in filter_create_int"));
 	f->next = NULL;
 	f->argc = 0;
 	f->argv = NULL;
@@ -230,8 +228,7 @@ int filter_tee_header (struct filter *chain)
 	 * header file at the same time.
 	 */
 
-	const int readsz = 512;
-	char   *buf;
+	char    buf[512];
 	int     to_cfd = -1;
 	FILE   *to_c = NULL, *to_h = NULL;
 	bool    write_header;
@@ -283,10 +280,7 @@ int filter_tee_header (struct filter *chain)
 	fprintf (to_c, "m4_define( [[M4_YY_OUTFILE_NAME]],[[%s]])m4_dnl\n",
 		 outfilename ? outfilename : "<stdout>");
 
-	buf = malloc((size_t) readsz);
-	if (!buf)
-		flexerror(_("malloc failed in filter_tee_header"));
-	while (fgets (buf, readsz, stdin)) {
+	while (fgets (buf, sizeof buf, stdin)) {
 		fputs (buf, to_c);
 		if (write_header)
 			fputs (buf, to_h);
@@ -328,6 +322,13 @@ int filter_tee_header (struct filter *chain)
 	return 0;
 }
 
+static bool is_blank_line (const char *str)
+{
+	while (isspace(*str))
+		str++;
+	return (*str == '\0');
+}
+
 /** Adjust the line numbers in the #line directives of the generated scanner.
  * After the m4 expansion, the line numbers are incorrect since the m4 macros
  * can add or remove lines.  This only adjusts line numbers for generated code,
@@ -336,8 +337,8 @@ int filter_tee_header (struct filter *chain)
  */
 int filter_fix_linedirs (struct filter *chain)
 {
-	char   *buf;
-	const size_t readsz = 512;
+	char   buf[512];
+	const size_t readsz = sizeof buf;
 	int     lineno = 1;
 	bool    in_gen = true;	/* in generated code */
 	bool    last_was_blank = false;
@@ -345,10 +346,6 @@ int filter_fix_linedirs (struct filter *chain)
 	if (!chain)
 		return 0;
 
-	buf = malloc(readsz);
-	if (!buf)
-		flexerror(_("malloc failed in filter_fix_linedirs"));
-
 	while (fgets (buf, (int) readsz, stdin)) {
 
 		regmatch_t m[10];
@@ -391,7 +388,7 @@ int filter_fix_linedirs (struct filter *chain)
 				/* Adjust the line directives. */
 				in_gen = true;
 				snprintf (buf, readsz, "#line %d \"%s\"\n",
-					  lineno, filename);
+					  lineno + 1, filename);
 			}
 			else {
 				/* it's a #line directive for code we didn't write */
@@ -403,9 +400,7 @@ int filter_fix_linedirs (struct filter *chain)
 		}
 
 		/* squeeze blank lines from generated code */
-		else if (in_gen
-			 && regexec (&regex_blank_line, buf, 0, NULL,
-				     0) == 0) {
+		else if (in_gen && is_blank_line(buf)) {
 			if (last_was_blank)
 				continue;
 			else
diff --git a/src/flex.skl b/src/flex.skl
index 786c977..d9cdcc0 100644
--- a/src/flex.skl
+++ b/src/flex.skl
@@ -15,7 +15,7 @@
 %#      The quoting is "[[" and "]]" so we don't interfere with
 %#      user code.
 %#
-%# All generate macros for the m4 stage contain the text "m4" or "M4"
+%# All generated macros for the m4 stage contain the text "m4" or "M4"
 %# in them. This is to distinguish them from CPP macros.
 %# The exception to this rule is YY_G, which is an m4 macro,
 %# but it needs to be remain short because it is used everywhere.
@@ -218,6 +218,24 @@ m4_ifdef( [[M4_YY_TABLES_EXTERNAL]],
 
 /* begin standard C headers. */
 %if-c-only
+m4_ifdef( [[M4_YY_ALWAYS_INTERACTIVE]], ,
+[[m4_ifdef( [[M4_YY_NEVER_INTERACTIVE]], ,
+[[/* Feature test macros. Flex uses functions that require a minimum set of
+ * macros defined. As defining some macros may hide function declarations that
+ * user code might use, be conservative and respect user's definitions as much
+ * as possible. In glibc, feature test macros may not be all set up until one
+ * of the libc header (that includes <features.h>) is included. This creates
+ * a circular dependency when we check the macros. <assert.h> is the safest
+ * header we can include and does not declare too many functions we don't need.
+ */
+#if !defined(__GNU_LIBRARY__) && defined(__STDC__)
+#include <assert.h>
+#endif
+#if !(defined(_POSIX_C_SOURCE) || defined(_XOPEN_SOURCE) || \
+    defined(_POSIX_SOURCE))
+# define _POSIX_C_SOURCE 1 /* Required for fileno() */
+# define _POSIX_SOURCE 1
+#endif]])]])
 #include <stdio.h>
 #include <string.h>
 #include <errno.h>
@@ -230,10 +248,6 @@ m4_ifdef( [[M4_YY_TABLES_EXTERNAL]],
 %endif
 /* end standard C headers. */
 
-%if-c-or-c++
-m4preproc_include(`flexint.h')
-%endif
-
 /* begin standard C++ headers. */
 %if-c++-only
 #include <iostream>
@@ -244,6 +258,10 @@ m4preproc_include(`flexint.h')
 /* end standard C++ headers. */
 %endif
 
+%if-c-or-c++
+m4preproc_include(`flexint_shared.h')
+%endif
+
 /* TODO: this is always defined, so inline it */
 #define yyconst const
 
@@ -2447,7 +2465,7 @@ m4_ifdef( [[M4_YY_NO_TOP_STATE]],,
 %endif
 {
     M4_YY_DECL_GUTS_VAR();
-	return YY_G(yy_start_stack)[YY_G(yy_start_stack_ptr) - 1];
+	return YY_G(yy_start_stack_ptr) > 0 ? YY_G(yy_start_stack)[YY_G(yy_start_stack_ptr) - 1] : YY_START;
 }
 ]])
 
@@ -3292,9 +3310,7 @@ static int yytbl_data_load YYFARGS2(struct yytbl_dmap *, dmap, struct yytbl_read
 
     /* Now eat padding. */
     {
-        int pad;
-        pad = yypad64(rd->bread);
-        while(--pad >= 0){
+        while (rd->bread % (8 * sizeof(flex_uint8_t)) > 0) {
             flex_int8_t t8;
             if(yytbl_read8(&t8,rd) != 0)
                 return -1;
diff --git a/src/flexdef.h b/src/flexdef.h
index 9dac654..a48c64d 100644
--- a/src/flexdef.h
+++ b/src/flexdef.h
@@ -44,7 +44,6 @@
 #include <stdarg.h>
 #include <setjmp.h>
 #include <ctype.h>
-#include <libgen.h> /* for XPG version of basename(3) */
 #include <string.h>
 #include <math.h>
 
@@ -77,8 +76,10 @@
 #include <strings.h>
 #include "flexint.h"
 
-/* We use gettext. So, when we write strings which should be translated, we mark them with _() */
-#ifdef ENABLE_NLS
+/* We use gettext. So, when we write strings which should be translated, we
+ * mark them with _()
+ */
+#if defined(ENABLE_NLS) && ENABLE_NLS
 #ifdef HAVE_LOCALE_H
 #include <locale.h>
 #endif /* HAVE_LOCALE_H */
@@ -631,10 +632,6 @@ extern int sectnum, nummt, hshcol, dfaeql, numeps, eps2, num_reallocs;
 extern int tmpuses, totnst, peakpairs, numuniq, numdup, hshsave;
 extern int num_backing_up, bol_needed;
 
-#ifndef HAVE_REALLOCARRAY
-void *reallocarray(void *, size_t, size_t);
-#endif
-
 void   *allocate_array(int, size_t);
 void   *reallocate_array(void *, int, size_t);
 
@@ -1131,7 +1128,7 @@ extern int filter_fix_linedirs(struct filter *chain);
  * From "regex.c"
  */
 
-extern regex_t regex_linedir, regex_blank_line;
+extern regex_t regex_linedir;
 bool flex_init_regex(void);
 void flex_regcomp(regex_t *preg, const char *regex, int cflags);
 char   *regmatch_dup (regmatch_t * m, const char *src);
diff --git a/src/flexint.h b/src/flexint.h
index 43bb3a8..3576eaa 100644
--- a/src/flexint.h
+++ b/src/flexint.h
@@ -3,31 +3,17 @@
 #ifndef FLEXINT_H
 #define FLEXINT_H
 
-/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */
-
-#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
-
-/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
- * if you want the limit (max/min) macros for int types. 
+/* C++ systems might need __STDC_LIMIT_MACROS defined before including
+ * <stdint.h>, if you want the limit (max/min) macros for int types.
  */
 #ifndef __STDC_LIMIT_MACROS
 #define __STDC_LIMIT_MACROS 1
 #endif
 
-#include <inttypes.h>
-typedef int8_t flex_int8_t;
-typedef uint8_t flex_uint8_t;
-typedef int16_t flex_int16_t;
-typedef uint16_t flex_uint16_t;
-typedef int32_t flex_int32_t;
-typedef uint32_t flex_uint32_t;
-#else
-typedef signed char flex_int8_t;
-typedef short int flex_int16_t;
-typedef int flex_int32_t;
-typedef unsigned char flex_uint8_t; 
-typedef unsigned short int flex_uint16_t;
-typedef unsigned int flex_uint32_t;
+/* "flexint_shared.h" will be included also in skeleton. It will include
+ * <inttypes.h> (if available) and define flex's integral types.
+ */
+#include "flexint_shared.h"
 
 /* Limits of integral types. */
 #ifndef INT8_MIN
@@ -58,10 +44,11 @@ typedef unsigned int flex_uint32_t;
 #define UINT32_MAX             (4294967295U)
 #endif
 
+#ifndef INT_MAX
+#define INT_MAX                ((int)(~0U)>>1)
+#endif
 #ifndef SIZE_MAX
 #define SIZE_MAX               (~(size_t)0)
 #endif
 
-#endif /* ! C99 */
-
 #endif /* ! FLEXINT_H */
diff --git a/src/flexint_shared.h b/src/flexint_shared.h
new file mode 100644
index 0000000..5532813
--- /dev/null
+++ b/src/flexint_shared.h
@@ -0,0 +1,46 @@
+/* flex integer type definitions */
+
+/* Prefer C99 integer types if available. */
+#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
+/* Include <inttypes.h> and not <stdint.h> because Solaris 2.6 has the former
+ * and not the latter.
+ */
+#include <inttypes.h>
+# define YYFLEX_USE_STDINT
+#else
+# if defined(_MSC_VER) && _MSC_VER >= 1600
+/* Visual C++ 2010 does not define __STDC_VERSION__ and has <stdint.h> but not
+ * <inttypes.h>.
+ */
+#include <stdint.h>
+#  define YYFLEX_USE_STDINT
+# endif
+#endif
+#ifdef YYFLEX_USE_STDINT
+typedef int8_t flex_int8_t;
+typedef uint8_t flex_uint8_t;
+typedef int16_t flex_int16_t;
+typedef uint16_t flex_uint16_t;
+typedef int32_t flex_int32_t;
+typedef uint32_t flex_uint32_t;
+#else
+typedef unsigned char flex_uint8_t;
+typedef short int flex_int16_t;
+typedef unsigned short int flex_uint16_t;
+# ifdef __STDC__
+typedef signed char flex_int8_t;
+/* ISO C only requires at least 16 bits for int. */
+#include <limits.h>
+#  if UINT_MAX >= 4294967295
+#   define YYFLEX_INT32_DEFINED
+typedef int flex_int32_t;
+typedef unsigned int flex_uint32_t;
+#  endif
+# else
+typedef char flex_int8_t;
+# endif
+# ifndef YYFLEX_INT32_DEFINED
+typedef long int flex_int32_t;
+typedef unsigned long int flex_uint32_t;
+# endif
+#endif
diff --git a/src/gen.c b/src/gen.c
index 590e5d8..c959f75 100644
--- a/src/gen.c
+++ b/src/gen.c
@@ -464,14 +464,14 @@ static struct yytbl_data *mkecstbl (void)
 
 void genecs (void)
 {
-	int i, j;
+	int ch, row;
 	int     numrows;
 
 	out_str_dec (get_yy_char_decl (), "yy_ec", csize);
 
-	for (i = 1; i < csize; ++i) {
-		ecgroup[i] = ABS (ecgroup[i]);
-		mkdata (ecgroup[i]);
+	for (ch = 1; ch < csize; ++ch) {
+		ecgroup[ch] = ABS (ecgroup[ch]);
+		mkdata (ecgroup[ch]);
 	}
 
 	dataend ();
@@ -479,12 +479,13 @@ void genecs (void)
 	if (trace) {
 		fputs (_("\n\nEquivalence Classes:\n\n"), stderr);
 
+		/* Print in 8 columns */
 		numrows = csize / 8;
 
-		for (j = 0; j < numrows; ++j) {
-			for (i = j; i < csize; i = i + numrows) {
+		for (row = 0; row < numrows; ++row) {
+			for (ch = row; ch < csize; ch += numrows) {
 				fprintf (stderr, "%4s = %-2d",
-					 readable_form (i), ecgroup[i]);
+					 readable_form (ch), ecgroup[ch]);
 
 				putc (' ', stderr);
 			}
@@ -1234,9 +1235,9 @@ void gentabs (void)
 		yytbl_data_compress (yyacc_tbl);
 		if (yytbl_data_fwrite (&tableswr, yyacc_tbl) < 0)
 			flexerror (_("Could not write yyacc_tbl"));
-		yytbl_data_destroy (yyacc_tbl);
-		yyacc_tbl = NULL;
 	}
+	yytbl_data_destroy (yyacc_tbl);
+	yyacc_tbl = NULL;
 	/* End generating yy_accept */
 
 	if (useecs) {
@@ -1289,11 +1290,10 @@ void gentabs (void)
 		if (tablesext) {
 			yytbl_data_compress (yymeta_tbl);
 			if (yytbl_data_fwrite (&tableswr, yymeta_tbl) < 0)
-				flexerror (_
-					   ("Could not write yymeta_tbl"));
-			yytbl_data_destroy (yymeta_tbl);
-			yymeta_tbl = NULL;
+				flexerror (_("Could not write yymeta_tbl"));
 		}
+		yytbl_data_destroy (yymeta_tbl);
+		yymeta_tbl = NULL;
 		/* End generating yy_meta */
 	}
 
@@ -1350,9 +1350,9 @@ void gentabs (void)
 		yytbl_data_compress (yybase_tbl);
 		if (yytbl_data_fwrite (&tableswr, yybase_tbl) < 0)
 			flexerror (_("Could not write yybase_tbl"));
-		yytbl_data_destroy (yybase_tbl);
-		yybase_tbl = NULL;
 	}
+	yytbl_data_destroy (yybase_tbl);
+	yybase_tbl = NULL;
 	/* End generating yy_base */
 
 
@@ -1382,9 +1382,9 @@ void gentabs (void)
 		yytbl_data_compress (yydef_tbl);
 		if (yytbl_data_fwrite (&tableswr, yydef_tbl) < 0)
 			flexerror (_("Could not write yydef_tbl"));
-		yytbl_data_destroy (yydef_tbl);
-		yydef_tbl = NULL;
 	}
+	yytbl_data_destroy (yydef_tbl);
+	yydef_tbl = NULL;
 	/* End generating yy_def */
 
 
@@ -1420,9 +1420,9 @@ void gentabs (void)
 		yytbl_data_compress (yynxt_tbl);
 		if (yytbl_data_fwrite (&tableswr, yynxt_tbl) < 0)
 			flexerror (_("Could not write yynxt_tbl"));
-		yytbl_data_destroy (yynxt_tbl);
-		yynxt_tbl = NULL;
 	}
+	yytbl_data_destroy (yynxt_tbl);
+	yynxt_tbl = NULL;
 	/* End generating yy_nxt */
 
 	/* Begin generating yy_chk */
@@ -1454,9 +1454,9 @@ void gentabs (void)
 		yytbl_data_compress (yychk_tbl);
 		if (yytbl_data_fwrite (&tableswr, yychk_tbl) < 0)
 			flexerror (_("Could not write yychk_tbl"));
-		yytbl_data_destroy (yychk_tbl);
-		yychk_tbl = NULL;
 	}
+	yytbl_data_destroy (yychk_tbl);
+	yychk_tbl = NULL;
 	/* End generating yy_chk */
 
 	free(acc_array);
diff --git a/src/gettext.h b/src/gettext.h
index ea67f30..3f62961 100644
--- a/src/gettext.h
+++ b/src/gettext.h
@@ -20,7 +20,7 @@
 #define _LIBGETTEXT_H 1
 
 /* NLS can be disabled through the configure --disable-nls option.  */
-#if ENABLE_NLS
+#ifdef ENABLE_NLS
 
 /* Get declarations of GNU message catalog functions.  */
 # include <libintl.h>
diff --git a/src/libfl.pc.in b/src/libfl.pc.in
new file mode 100644
index 0000000..8d4240c
--- /dev/null
+++ b/src/libfl.pc.in
@@ -0,0 +1,8 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+
+Name: libfl
+Description: Flex (the fast lexical analyzer) support library
+Version: @PACKAGE_VERSION@
+Libs: -L${libdir} -lfl
diff --git a/src/main.c b/src/main.c
index e5eac44..a4047d7 100644
--- a/src/main.c
+++ b/src/main.c
@@ -117,7 +117,7 @@ struct yytbl_writer tableswr;
 char   *program_name = "flex";
 
 static const char outfile_template[] = "lex.%s.%s";
-static const char backing_name[] = "lex.backup";
+static const char *backing_name = "lex.backup";
 static const char tablesfile_template[] = "lex.%s.tables";
 
 /* From scan.l */
@@ -197,7 +197,7 @@ int flex_main (int argc, char *argv[])
 /* Wrapper around flex_main, so flex_main can be built as a library. */
 int main (int argc, char *argv[])
 {
-#if ENABLE_NLS
+#if defined(ENABLE_NLS) && ENABLE_NLS
 #if HAVE_LOCALE_H
 	setlocale (LC_MESSAGES, "");
         setlocale (LC_CTYPE, "");
@@ -648,6 +648,7 @@ void flexend (int exit_status)
                 "yyget_extra",
                 "yyget_in",
                 "yyget_leng",
+                "yyget_column",
                 "yyget_lineno",
                 "yyget_lloc",
                 "yyget_lval",
@@ -670,6 +671,7 @@ void flexend (int exit_status)
                 "yyset_debug",
                 "yyset_extra",
                 "yyset_in",
+                "yyset_column",
                 "yyset_lineno",
                 "yyset_lloc",
                 "yyset_lval",
@@ -994,7 +996,7 @@ void flexinit (int argc, char **argv)
     flex_init_regex();
 
 	/* Enable C++ if program name ends with '+'. */
-	program_name = basename (argv[0]);
+	program_name = argv[0];
 
 	if (program_name != NULL &&
 	    program_name[strlen (program_name) - 1] == '+')
@@ -1033,6 +1035,11 @@ void flexinit (int argc, char **argv)
 			backing_up_report = true;
 			break;
 
+		case OPT_BACKUP_FILE:
+			backing_up_report = true;
+                        backing_name = arg;
+			break;
+
 		case OPT_DONOTHING:
 			break;
 
@@ -1201,7 +1208,7 @@ void flexinit (int argc, char **argv)
 			break;
 
 		case OPT_VERSION:
-			printf (_("%s %s\n"), program_name, flex_version);
+			printf ("%s %s\n", (C_plus_plus ? "flex++" : "flex"), flex_version);
 			FLEX_EXIT (0);
 
 		case OPT_WARN:
@@ -1394,6 +1401,14 @@ void flexinit (int argc, char **argv)
 			//buf_strdefine (&userdef_buf, "YY_NO_SET_LINENO", "1");
             buf_m4_define( &m4defs_buf, "M4_YY_NO_SET_LINENO",0);
 			break;
+		case OPT_NO_YYGET_COLUMN:
+			//buf_strdefine (&userdef_buf, "YY_NO_GET_COLUMN", "1");
+            buf_m4_define( &m4defs_buf, "M4_YY_NO_GET_COLUMN",0);
+			break;
+		case OPT_NO_YYSET_COLUMN:
+			//buf_strdefine (&userdef_buf, "YY_NO_SET_COLUMN", "1");
+            buf_m4_define( &m4defs_buf, "M4_YY_NO_SET_COLUMN",0);
+			break;
 		case OPT_NO_YYGET_IN:
 			//buf_strdefine (&userdef_buf, "YY_NO_GET_IN", "1");
             buf_m4_define( &m4defs_buf, "M4_YY_NO_GET_IN",0);
@@ -1817,7 +1832,8 @@ void usage (void)
 		  "  -t, --stdout            write scanner on stdout instead of %s\n"
 		  "      --yyclass=NAME      name of C++ class\n"
 		  "      --header-file=FILE   create a C header file in addition to the scanner\n"
-		  "      --tables-file[=FILE] write tables to FILE\n" "\n"
+		  "      --tables-file[=FILE] write tables to FILE\n"
+		  "      --backup-file=FILE  write backing-up information to FILE\n" "\n"
 		  "Scanner behavior:\n"
 		  "  -7, --7bit              generate 7-bit scanner\n"
 		  "  -8, --8bit              generate 8-bit scanner\n"
@@ -1844,6 +1860,6 @@ void usage (void)
 		  "  -?\n"
 		  "  -h, --help              produce this help message\n"
 		  "  -V, --version           report %s version\n"),
-		 backing_name, program_name, outfile_path, program_name);
+		 backing_name, "flex", outfile_path, "flex");
 
 }
diff --git a/src/misc.c b/src/misc.c
index ef27833..745e6a8 100644
--- a/src/misc.c
+++ b/src/misc.c
@@ -116,15 +116,14 @@ void add_action (const char *new_text)
 	int     len = (int) strlen (new_text);
 
 	while (len + action_index >= action_size - 10 /* slop */ ) {
-		int     new_size = action_size * 2;
 
-		if (new_size <= 0)
+		if (action_size > INT_MAX / 2)
 			/* Increase just a little, to try to avoid overflow
 			 * on 16-bit machines.
 			 */
 			action_size += action_size / 8;
 		else
-			action_size = new_size;
+			action_size = action_size * 2;
 
 		action_array =
 			reallocate_character_array (action_array,
@@ -141,20 +140,24 @@ void add_action (const char *new_text)
 
 void   *allocate_array (int size, size_t element_size)
 {
-	void *mem;
-#if HAVE_REALLOCARRAY
-	/* reallocarray has built-in overflow detection */
-	mem = reallocarray(NULL, (size_t) size, element_size);
+	void *new_array;
+#if HAVE_REALLOCARR
+	new_array = NULL;
+	if (reallocarr(&new_array, (size_t) size, element_size))
+		flexfatal (_("memory allocation failed in allocate_array()"));
 #else
+# if HAVE_REALLOCARRAY
+	new_array = reallocarray(NULL, (size_t) size, element_size);
+# else
+	/* Do manual overflow detection */
 	size_t num_bytes = (size_t) size * element_size;
-	mem = (size && SIZE_MAX / (size_t) size < element_size) ? NULL :
+	new_array = (size && SIZE_MAX / (size_t) size < element_size) ? NULL :
 		malloc(num_bytes);
+# endif
+	if (!new_array)
+		flexfatal (_("memory allocation failed in allocate_array()"));
 #endif
-	if (!mem)
-		flexfatal (_
-			   ("memory allocation failed in allocate_array()"));
-
-	return mem;
+	return new_array;
 }
 
 
@@ -659,17 +662,22 @@ char   *readable_form (int c)
 void   *reallocate_array (void *array, int size, size_t element_size)
 {
 	void *new_array;
-#if HAVE_REALLOCARRAY
-	/* reallocarray has built-in overflow detection */
-	new_array = reallocarray(array, (size_t) size, element_size);
+#if HAVE_REALLOCARR
+	new_array = array;
+	if (reallocarr(&new_array, (size_t) size, element_size))
+		flexfatal (_("attempt to increase array size failed"));
 #else
+# if HAVE_REALLOCARRAY
+	new_array = reallocarray(array, (size_t) size, element_size);
+# else
+	/* Do manual overflow detection */
 	size_t num_bytes = (size_t) size * element_size;
 	new_array = (size && SIZE_MAX / (size_t) size < element_size) ? NULL :
 		realloc(array, num_bytes);
-#endif
+# endif
 	if (!new_array)
 		flexfatal (_("attempt to increase array size failed"));
-
+#endif
 	return new_array;
 }
 
@@ -720,7 +728,10 @@ void skelout (void)
 			 */
 #define cmd_match(s) (strncmp(buf,(s),strlen(s))==0)
 
-			if (buf[1] == '%') {
+		if (buf[1] == '#') {
+                	/* %# indicates comment line to be ignored */
+            	} 
+		else if (buf[1] == '%') {
 				/* %% is a break point for skelout() */
 				return;
 			}
diff --git a/src/mkskel.sh b/src/mkskel.sh
index 1aa59e1..2d6ae9f 100755
--- a/src/mkskel.sh
+++ b/src/mkskel.sh
@@ -48,7 +48,7 @@ sed '/^%#/d
 s/m4_/m4preproc_/g
 s/a4_/4_/g
 s/[\\"]/\\&/g
-s/.*/  "&",/'
+s/[^\r]*/  "&",/'
 
 echo '  0
 };'
diff --git a/src/nfa.c b/src/nfa.c
index 9143cf6..3d9bf24 100644
--- a/src/nfa.c
+++ b/src/nfa.c
@@ -499,6 +499,8 @@ int     mkor (int first, int second)
 		}
 	}
 
+	firstst[first] = MIN(firstst[first], firstst[second]);
+
 	finalst[first] = orend;
 	return first;
 }
diff --git a/src/options.c b/src/options.c
index 366bc2e..e98159c 100644
--- a/src/options.c
+++ b/src/options.c
@@ -62,6 +62,8 @@ optspec_t flexopts[] = {
 	,
 	{"--backup", OPT_BACKUP, 0}
 	,			/* Generate backing-up information to lex.backup. */
+	{"--backup-file=FILE", OPT_BACKUP_FILE, 0}
+	,			/* Generate backing-up information to FILE. */
 	{"-B", OPT_BATCH, 0}
 	,
 	{"--batch", OPT_BATCH, 0}
@@ -255,6 +257,10 @@ optspec_t flexopts[] = {
 	,
 	{"--noyyset_lineno", OPT_NO_YYSET_LINENO, 0}
 	,
+	{"--noyyget_column", OPT_NO_YYGET_COLUMN, 0}
+	,
+	{"--noyyset_column", OPT_NO_YYSET_COLUMN, 0}
+	,
 	{"--noyyget_in", OPT_NO_YYGET_IN, 0}
 	,
 	{"--noyyset_in", OPT_NO_YYSET_IN, 0}
diff --git a/src/options.h b/src/options.h
index 5b51c23..acee275 100644
--- a/src/options.h
+++ b/src/options.h
@@ -46,6 +46,7 @@ enum flexopt_flag_t {
 	OPT_ALWAYS_INTERACTIVE,
 	OPT_ARRAY,
 	OPT_BACKUP,
+	OPT_BACKUP_FILE,
 	OPT_BATCH,
         OPT_BISON_BRIDGE,
         OPT_BISON_BRIDGE_LOCATIONS,
@@ -83,6 +84,7 @@ enum flexopt_flag_t {
 	OPT_NO_YYGET_IN,
 	OPT_NO_YYGET_LENG,
 	OPT_NO_YYGET_LINENO,
+	OPT_NO_YYGET_COLUMN,
 	OPT_NO_YYGET_LLOC,
 	OPT_NO_YYGET_LVAL,
 	OPT_NO_YYGET_OUT,
@@ -92,6 +94,7 @@ enum flexopt_flag_t {
 	OPT_NO_YYSET_EXTRA,
 	OPT_NO_YYSET_IN,
 	OPT_NO_YYSET_LINENO,
+	OPT_NO_YYSET_COLUMN,
 	OPT_NO_YYSET_LLOC,
 	OPT_NO_YYSET_LVAL,
 	OPT_NO_YYSET_OUT,
diff --git a/src/regex.c b/src/regex.c
index 38e658b..f4c4163 100644
--- a/src/regex.c
+++ b/src/regex.c
@@ -25,10 +25,8 @@
 
 
 static const char* REGEXP_LINEDIR = "^#line ([[:digit:]]+) \"(.*)\"";
-static const char* REGEXP_BLANK_LINE = "^[[:space:]]*$";
 
 regex_t regex_linedir; /**< matches line directives */
-regex_t regex_blank_line; /**< matches blank lines */
 
 
 /** Initialize the regular expressions.
@@ -37,8 +35,6 @@ regex_t regex_blank_line; /**< matches blank lines */
 bool flex_init_regex(void)
 {
     flex_regcomp(&regex_linedir, REGEXP_LINEDIR, REG_EXTENDED);
-    flex_regcomp(&regex_blank_line, REGEXP_BLANK_LINE, REG_EXTENDED);
-
     return true;
 }
 
diff --git a/src/scan.l b/src/scan.l
index 66db864..f4b44b8 100644
--- a/src/scan.l
+++ b/src/scan.l
@@ -1,5 +1,11 @@
 /* scan.l - scanner for flex input -*-C-*- */
 
+%top{
+/* flexdef.h includes config.h, which may contain macros that alter the API */
+/* of libc functions. Must include first before any libc header. */
+#include "flexdef.h"
+}
+
 %{
 /*  Copyright (c) 1990 The Regents of the University of California. */
 /*  All rights reserved. */
@@ -32,7 +38,6 @@
 /*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR */
 /*  PURPOSE. */
 
-#include "flexdef.h"
 #include "parse.h"
 extern bool tablesverify, tablesext;
 extern int trlcontxt; /* Set in  parse.y for each rule. */
@@ -256,7 +261,7 @@ M4QEND      "]""]"
 	\n		yy_pop_state();
 	[[:digit:]]+	linenum = myctoi( yytext );
 
-	\"[^"\n]*\"	{
+	"\""[^""\n]*"\""	{
 			free(infilename);
 			infilename = xstrdup(yytext + 1);
 			infilename[strlen( infilename ) - 1] = '\0';
@@ -433,6 +438,8 @@ M4QEND      "]""]"
     yyset_extra     ACTION_M4_IFDEF("M4""_YY_NO_SET_EXTRA", ! option_sense);
     yyget_leng      ACTION_M4_IFDEF("M4""_YY_NO_GET_LENG", ! option_sense);
     yyget_text      ACTION_M4_IFDEF("M4""_YY_NO_GET_TEXT", ! option_sense);
+    yyget_column    ACTION_M4_IFDEF("M4""_YY_NO_GET_COLUMN", ! option_sense);
+    yyset_column    ACTION_M4_IFDEF("M4""_YY_NO_SET_COLUMN", ! option_sense);
     yyget_lineno    ACTION_M4_IFDEF("M4""_YY_NO_GET_LINENO", ! option_sense);
     yyset_lineno    ACTION_M4_IFDEF("M4""_YY_NO_SET_LINENO", ! option_sense);
     yyget_in        ACTION_M4_IFDEF("M4""_YY_NO_GET_IN", ! option_sense);
@@ -457,7 +464,7 @@ M4QEND      "]""]"
                     }
 
 
-	\"[^"\n]*\"	{
+	"\""[^""\n]*"\""	{
 			if(yyleng-1 < MAXLINE)
         		 {
 			strncpy( nmstr, yytext + 1, sizeof(nmstr) );
@@ -527,7 +534,7 @@ M4QEND      "]""]"
                         return '<';
                     }
 	^{OPTWS}"^"	return '^';
-	\"		BEGIN(QUOTE); return '"';
+	"\""		BEGIN(QUOTE); return '"';
 	"{"/[[:digit:]]	{
 			BEGIN(NUM);
 			if ( lex_compat || posix_compat )
@@ -793,8 +800,8 @@ nmstr[yyleng - 2 - end_is_ws] = '\0';  /* chop trailing brace */
 
 
 <QUOTE>{
-	[^"\n]		RETURNCHAR;
-	\"		BEGIN(SECT2); return '"';
+	[^""\n]		RETURNCHAR;
+	"\""		BEGIN(SECT2); return '"';
 
 	{NL}		{
 			synerr( _( "missing quote" ) );
@@ -934,11 +941,11 @@ nmstr[yyleng - 2 - end_is_ws] = '\0';  /* chop trailing brace */
 <ACTION>{
 	"{"		ACTION_ECHO; ++bracelevel;
 	"}"		ACTION_ECHO; --bracelevel;
-	[^[:alpha:]_{}\"'/\n\[\]]+	ACTION_ECHO;
+	[^[:alpha:]_{}""''/\n\[\]]+	ACTION_ECHO;
         {NAME}		ACTION_ECHO;
-        "'"([^\'\\\n]|\\.)"'" ACTION_ECHO; /* character constant */
+        "'"([^''\\\n]|\\.)"'" ACTION_ECHO; /* character constant */
         "'"             ACTION_ECHO; BEGIN(CHARACTER_CONSTANT);
-	\"		ACTION_ECHO; BEGIN(ACTION_STRING);
+	"\""		ACTION_ECHO; BEGIN(ACTION_STRING);
 	{NL} {
                 ++linenum;
                 ACTION_ECHO;
@@ -954,12 +961,12 @@ nmstr[yyleng - 2 - end_is_ws] = '\0';  /* chop trailing brace */
 }
 
 <ACTION_STRING>{
-	[^\[\]\"\\\n]+	ACTION_ECHO;
-	\"		ACTION_ECHO; BEGIN(ACTION);
+	[^\[\]""\\\n]+	ACTION_ECHO;
+	"\""		ACTION_ECHO; BEGIN(ACTION);
 }
 <CHARACTER_CONSTANT>{
-	[^\[\]\'\\\n]+  ACTION_ECHO;
-        \'              ACTION_ECHO; BEGIN(ACTION);
+	[^\[\]''\\\n]+  ACTION_ECHO;
+        "'"             ACTION_ECHO; BEGIN(ACTION);
 }
 <ACTION_STRING,CHARACTER_CONSTANT>{
         (\\\n)*         ACTION_ECHO;
diff --git a/src/scanopt.c b/src/scanopt.c
index a475b6f..7a91178 100644
--- a/src/scanopt.c
+++ b/src/scanopt.c
@@ -68,7 +68,7 @@ static int PRINTLEN(struct _scanopt_t *, int);
 static int RVAL(struct _scanopt_t *, int);
 static int FLAGS(struct _scanopt_t *, int);
 static const char *DESC(struct _scanopt_t *, int);
-static int scanopt_err(struct _scanopt_t *, int, int);
+static void scanopt_err(struct _scanopt_t *, int, int);
 static int matchlongopt(char *, char **, int *, char **, int *);
 static int find_opt(struct _scanopt_t *, int, char *, int, int *, int *opt_offset);
 
@@ -229,34 +229,23 @@ typedef struct usg_elem usg_elem;
 int     scanopt_usage (scanopt_t *scanner, FILE *fp, const char *usage)
 {
 	struct _scanopt_t *s;
-	int     i, columns, indent = 2;
+	int     i, columns;
+	const int indent = 2;
 	usg_elem *byr_val = NULL;	/* option indices sorted by r_val */
 	usg_elem *store;	/* array of preallocated elements. */
 	int     store_idx = 0;
 	usg_elem *ue;
-	int     maxlen[2];
-	int     desccol = 0;
+	int     opt_col_width = 0, desc_col_width = 0;
+	int     desccol;
 	int     print_run = 0;
 
-	maxlen[0] = 0;
-	maxlen[1] = 0;
-
 	s = (struct _scanopt_t *) scanner;
 
 	if (usage) {
 		fprintf (fp, "%s\n", usage);
 	}
 	else {
-		/* Find the basename of argv[0] */
-		const char *p;
-
-		p = s->argv[0] + strlen (s->argv[0]);
-		while (p != s->argv[0] && *p != '/')
-			--p;
-		if (*p == '/')
-			p++;
-
-		fprintf (fp, _("Usage: %s [OPTIONS]...\n"), p);
+		fprintf (fp, _("Usage: %s [OPTIONS]...\n"), s->argv[0]);
 	}
 	fprintf (fp, "\n");
 
@@ -324,65 +313,36 @@ int     scanopt_usage (scanopt_t *scanner, FILE *fp, const char *usage)
 	/* first pass calculate how much room we need. */
 	for (ue = byr_val; ue; ue = ue->next) {
 		usg_elem *ap;
-		int     len = 0;
-		int     nshort = 0, nlong = 0;
-
+		int     len;
 
-#define CALC_LEN(i) do {\
-          if(FLAGS(s,i) & IS_LONG) \
-              len +=  (nlong++||nshort) ? 2+PRINTLEN(s,i) : PRINTLEN(s,i);\
-          else\
-              len +=  (nshort++||nlong)? 2+PRINTLEN(s,i) : PRINTLEN(s,i);\
-        }while(0)
+		len = PRINTLEN(s, ue->idx);
 
-		if (!(FLAGS (s, ue->idx) & IS_LONG))
-			CALC_LEN (ue->idx);
-
-		/* do short aliases first. */
 		for (ap = ue->alias; ap; ap = ap->next) {
-			if (FLAGS (s, ap->idx) & IS_LONG)
-				continue;
-			CALC_LEN (ap->idx);
+			len += PRINTLEN(s, ap->idx) + (int) strlen(", ");
 		}
 
-		if (FLAGS (s, ue->idx) & IS_LONG)
-			CALC_LEN (ue->idx);
-
-		/* repeat the above loop, this time for long aliases. */
-		for (ap = ue->alias; ap; ap = ap->next) {
-			if (!(FLAGS (s, ap->idx) & IS_LONG))
-				continue;
-			CALC_LEN (ap->idx);
-		}
-
-		if (len > maxlen[0])
-			maxlen[0] = len;
+		if (len > opt_col_width)
+			opt_col_width = len;
 
 		/* It's much easier to calculate length for description column! */
 		len = (int) strlen (DESC (s, ue->idx));
-		if (len > maxlen[1])
-			maxlen[1] = len;
+		if (len > desc_col_width)
+			desc_col_width = len;
 	}
 
 	/* Determine how much room we have, and how much we will allocate to each col.
 	 * Do not address pathological cases. Output will just be ugly. */
 	columns = get_cols () - 1;
-	if (maxlen[0] + maxlen[1] + indent * 2 > columns) {
-		/* col 0 gets whatever it wants. we'll wrap the desc col. */
-		maxlen[1] = columns - (maxlen[0] + indent * 2);
-		if (maxlen[1] < 14)	/* 14 is arbitrary lower limit on desc width. */
-			maxlen[1] = INT_MAX;
+	if (opt_col_width + desc_col_width + indent * 2 > columns) {
+		/* opt col gets whatever it wants. we'll wrap the desc col. */
+		desc_col_width = columns - (opt_col_width + indent * 2);
+		if (desc_col_width < 14)	/* 14 is arbitrary lower limit on desc width. */
+			desc_col_width = INT_MAX;
 	}
-	desccol = maxlen[0] + indent * 2;
-
-#define PRINT_SPACES(fp,n)\
-    do{\
-        int _n;\
-        _n=(n);\
-        while(_n-- > 0)\
-            fputc(' ',(fp));\
-    }while(0)
+	desccol = opt_col_width + indent * 2;
 
+#define PRINT_SPACES(fp,n) \
+	fprintf((fp), "%*s", (n), "")
 
 	/* Second pass (same as above loop), this time we print. */
 	/* Sloppy hack: We iterate twice. The first time we print short and long options.
@@ -436,7 +396,7 @@ int     scanopt_usage (scanopt_t *scanner, FILE *fp, const char *usage)
 			/* pad to desccol */
 			PRINT_SPACES (fp, desccol - nchars);
 
-			/* Print description, wrapped to maxlen[1] columns. */
+			/* Print description, wrapped to desc_col_width columns. */
 			if (1) {
 				const char *pstart;
 
@@ -447,7 +407,7 @@ int     scanopt_usage (scanopt_t *scanner, FILE *fp, const char *usage)
 
 					p = pstart;
 
-					while (*p && n < maxlen[1]
+					while (*p && n < desc_col_width
 					       && *p != '\n') {
 						if (isspace ((unsigned char)(*p))
 						    || *p == '-') lastws =
@@ -497,7 +457,7 @@ int     scanopt_usage (scanopt_t *scanner, FILE *fp, const char *usage)
 #endif /* no scanopt_usage */
 
 
-static int scanopt_err (struct _scanopt_t *s, int is_short, int err)
+static void scanopt_err(struct _scanopt_t *s, int is_short, int err)
 {
 	const char *optname = "";
 	char    optchar[2];
@@ -542,7 +502,6 @@ static int scanopt_err (struct _scanopt_t *s, int is_short, int err)
 			break;
 		}
 	}
-	return err;
 }
 
 
@@ -729,7 +688,8 @@ int     scanopt (scanopt_t *svoid, char **arg, int *optindex)
 
 		if (!find_opt
 		    (s, 0, pstart, namelen, &errcode, &opt_offset)) {
-			return scanopt_err (s, 1, errcode);
+			scanopt_err(s, 1, errcode);
+			return errcode;
 		}
 
 		optarg = pstart + 1;
@@ -748,8 +708,7 @@ int     scanopt (scanopt_t *svoid, char **arg, int *optindex)
 
 	/* Look ahead in argv[] to see if there is something
 	 * that we can use as an argument (if needed). */
-	has_next = s->index + 1 < s->argc
-		&& strcmp ("--", s->argv[s->index + 1]) != 0;
+	has_next = s->index + 1 < s->argc;
 
 	optp = s->options + opt_offset;
 	auxp = s->aux + opt_offset;
@@ -757,9 +716,9 @@ int     scanopt (scanopt_t *svoid, char **arg, int *optindex)
 	/* case: no args allowed */
 	if (auxp->flags & ARG_NONE) {
 		if (optarg && !is_short) {
-			scanopt_err (s, is_short, errcode = SCANOPT_ERR_ARG_NOT_ALLOWED);
+			scanopt_err(s, is_short, SCANOPT_ERR_ARG_NOT_ALLOWED);
 			INC_INDEX (s, 1);
-			return errcode;
+			return SCANOPT_ERR_ARG_NOT_ALLOWED;
 		}
 		else if (!optarg)
 			INC_INDEX (s, 1);
@@ -770,8 +729,10 @@ int     scanopt (scanopt_t *svoid, char **arg, int *optindex)
 
 	/* case: required */
 	if (auxp->flags & ARG_REQ) {
-		if (!optarg && !has_next)
-			return scanopt_err (s, is_short, SCANOPT_ERR_ARG_NOT_FOUND);
+		if (!optarg && !has_next) {
+			scanopt_err(s, is_short, SCANOPT_ERR_ARG_NOT_FOUND);
+			return SCANOPT_ERR_ARG_NOT_FOUND;
+		}
 
 		if (!optarg) {
 			/* Let the next argv element become the argument. */
diff --git a/src/tables.c b/src/tables.c
index 980d2e9..182ab63 100644
--- a/src/tables.c
+++ b/src/tables.c
@@ -87,7 +87,7 @@ int yytbl_hdr_init (struct yytbl_hdr *th, const char *version_str,
 
 	th->th_magic = YYTBL_MAGIC;
 	th->th_hsize = (flex_uint32_t) (14 + strlen (version_str) + 1 + strlen (name) + 1);
-	th->th_hsize += yypad64 (th->th_hsize);
+	th->th_hsize += (8 - (th->th_hsize % 8)) % 8; // Pad to 64-bit boundary
 	th->th_ssize = 0;	// Not known at this point.
 	th->th_flags = 0;
 	th->th_version = xstrdup(version_str);
@@ -124,14 +124,14 @@ int yytbl_data_destroy (struct yytbl_data *td)
 /** Write enough padding to bring the file pointer to a 64-bit boundary. */
 static int yytbl_write_pad64 (struct yytbl_writer *wr)
 {
-	int     pad, bwritten = 0;
+	int bwritten = 0;
 
-	pad = yypad64 (wr->total_written);
-	while (pad-- > 0)
+	while (wr->total_written % (8 * sizeof(flex_uint8_t)) > 0) {
 		if (yytbl_write8 (wr, 0) < 0)
 			return -1;
 		else
 			bwritten++;
+	}
 	return bwritten;
 }
 
diff --git a/src/tables_shared.h b/src/tables_shared.h
index bbf9910..feca251 100644
--- a/src/tables_shared.h
+++ b/src/tables_shared.h
@@ -63,12 +63,6 @@ dnl  flex code (hence the name "_shared").
 #define YYTBL_MAGIC 0xF13C57B1
 #endif
 
-/** Calculate (0-7) = number bytes needed to pad n to next 64-bit boundary. */
-#ifndef yypad64
-#define yypad64(n) ((8-((n)%8))%8)
-#endif
-
-
 #ifndef YYTABLES_TYPES
 #define YYTABLES_TYPES
 /** Possible values for td_id field. Each one corresponds to a
diff --git a/tests/Makefile.am b/tests/Makefile.am
index 2cb51df..65f9d65 100644
--- a/tests/Makefile.am
+++ b/tests/Makefile.am
@@ -265,6 +265,7 @@ CLEANFILES = \
 	$(tableopts_tables)
 
 dist-hook:
+	chmod u+w $(distdir) && \
 	for file in $(CLEANFILES) ; do \
 	rm -f $(distdir)/$$file \
 	; done
@@ -445,7 +446,7 @@ top.h: top.c
 # things) and the resultant list is both long an unenlightening. And
 # it can be / is generated by a shell script, tableopts.sh.
 
-tableopts.am: tableopts.sh
+$(srcdir)/tableopts.am: tableopts.sh
 	$(SHELL) $(srcdir)/tableopts.sh > $(srcdir)/tableopts.am
 
 include $(srcdir)/tableopts.am
@@ -462,13 +463,13 @@ OPT_LOG_COMPILER = $(SHELL) $(srcdir)/testwrapper.sh
 AM_OPT_LOG_FLAGS = -d $(srcdir) -i $(srcdir)/tableopts.txt -r
 
 tableopts_opt_nr%.c: tableopts.l4 $(FLEX)
-	$(AM_V_LEX)$(FLEX) --unsafe-no-m4-sect3-escape -P $(subst -,_,$(basename $(*F))) $* -o $@ $<
+	$(AM_V_LEX)$(FLEX) --unsafe-no-m4-sect3-escape -P $(subst -,_,$(basename $(*F))) $(*:_F=F) -o $@ $<
 
 tableopts_opt_nr%.$(OBJEXT): tableopts_opt_nr%.c 
 	$(AM_V_CC)$(COMPILE) -c -o $@ $<
 
 tableopts_opt_r%.c: tableopts.l4 $(FLEX)
-	$(AM_V_LEX)$(FLEX) --unsafe-no-m4-sect3-escape -P $(subst -,_,$(basename $(*F))) --reentrant $*  -o $@ $<
+	$(AM_V_LEX)$(FLEX) --unsafe-no-m4-sect3-escape -P $(subst -,_,$(basename $(*F))) --reentrant $(subst _F,F,$*)  -o $@ $<
 
 tableopts_opt_r%.$(OBJEXT):  tableopts_opt_r%.c 
 	$(AM_V_CC)$(COMPILE) -DTEST_IS_REENTRANT -c -o $@ $<
@@ -477,13 +478,13 @@ SER_LOG_COMPILER = $(SHELL) $(srcdir)/testwrapper.sh
 AM_SER_LOG_FLAGS = -d $(builddir) -i $(srcdir)/tableopts.txt -r -t
 
 tableopts_ser_nr%.c: tableopts.l4 $(FLEX)
-	$(AM_V_LEX)$(FLEX) --unsafe-no-m4-sect3-escape -P $(subst -,_,$(basename $(*F))) --tables-file="tableopts_ser_nr$*.ser.tables"  $* -o $@ $<
+	$(AM_V_LEX)$(FLEX) --unsafe-no-m4-sect3-escape -P $(subst -,_,$(basename $(*F))) --tables-file="tableopts_ser_nr$*.ser.tables"  $(subst _F,F,$*) -o $@ $<
 
 tableopts_ser_nr%.$(OBJEXT): tableopts_ser_nr%.c 
 	$(AM_V_CC)$(COMPILE) -DTEST_HAS_TABLES_EXTERNAL -c -o $@ $<
 
 tableopts_ser_r%.c: tableopts.l4 $(FLEX)
-	$(AM_V_LEX)$(FLEX) --unsafe-no-m4-sect3-escape -P $(subst -,_,$(basename $(*F))) -R --tables-file="tableopts_ser_r$*.ser.tables" $*  -o $@ $<
+	$(AM_V_LEX)$(FLEX) --unsafe-no-m4-sect3-escape -P $(subst -,_,$(basename $(*F))) -R --tables-file="tableopts_ser_r$*.ser.tables" $(subst _F,F,$*)  -o $@ $<
 
 tableopts_ser_r%.$(OBJEXT):  tableopts_ser_r%.c
 	$(AM_V_CC)$(COMPILE) -DTEST_HAS_TABLES_EXTERNAL -DTEST_IS_REENTRANT -c -o $@ $<
@@ -492,7 +493,7 @@ VER_LOG_COMPILER = $(SHELL) $(srcdir)/testwrapper.sh
 AM_VER_LOG_FLAGS = -d $(builddir) -i $(srcdir)/tableopts.txt -r -t
 
 tableopts_ver_nr%.c: tableopts.l4 $(FLEX)
-	$(AM_V_LEX)$(FLEX) --unsafe-no-m4-sect3-escape -P $(subst -,_,$(basename $(*F))) --tables-file="tableopts_ver_nr$*.ver.tables" --tables-verify $* -o $@ $<
+	$(AM_V_LEX)$(FLEX) --unsafe-no-m4-sect3-escape -P $(subst -,_,$(basename $(*F))) --tables-file="tableopts_ver_nr$*.ver.tables" --tables-verify $(subst _F,F,$*) -o $@ $<
 
 tableopts_ver_nr%.$(OBJEXT): tableopts_ver_nr%.c 
 	$(AM_V_CC)$(COMPILE) -DTEST_HAS_TABLES_EXTERNAL -c -o $@ $<
@@ -501,7 +502,7 @@ tableopts_ver_nr%.ver$(EXEEXT): tableopts_ver_nr%.$(OBJEXT)
 	$(AM_V_CCLD)$(LINK) -o $@ $^
 
 tableopts_ver_r%.c: tableopts.l4 $(FLEX)
-	$(AM_V_LEX)$(FLEX) --unsafe-no-m4-sect3-escape -P $(subst -,_,$(basename $(*F))) -R --tables-file="tableopts_ver_r$*.ver.tables" --tables-verify $*  -o $@ $<
+	$(AM_V_LEX)$(FLEX) --unsafe-no-m4-sect3-escape -P $(subst -,_,$(basename $(*F))) -R --tables-file="tableopts_ver_r$*.ver.tables" --tables-verify $(subst _F,F,$*)  -o $@ $<
 
 tableopts_ver_r%.$(OBJEXT):  tableopts_ver_r%.c  
 	$(AM_V_CC)$(COMPILE) -DTEST_HAS_TABLES_EXTERNAL -DTEST_IS_REENTRANT -c -o $@ $<
diff --git a/tests/tableopts.am b/tests/tableopts.am
index 099870b..8460c04 100644
--- a/tests/tableopts.am
+++ b/tests/tableopts.am
@@ -1,333 +1,333 @@
 tableopts_opt_nr_Ca_opt_SOURCES = tableopts.l4
 
 tableopts_opt_nr-Ca.opt$(EXEEXT): tableopts_opt_nr-Ca.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_opt_nr_Ce_opt_SOURCES = tableopts.l4
 
 tableopts_opt_nr-Ce.opt$(EXEEXT): tableopts_opt_nr-Ce.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_opt_nr_Cf_opt_SOURCES = tableopts.l4
 
 tableopts_opt_nr-Cf.opt$(EXEEXT): tableopts_opt_nr-Cf.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
-tableopts_opt_nr_CF_opt_SOURCES = tableopts.l4
+tableopts_opt_nr_C_F_opt_SOURCES = tableopts.l4
 
-tableopts_opt_nr-CF.opt$(EXEEXT): tableopts_opt_nr-CF.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+tableopts_opt_nr-C_F.opt$(EXEEXT): tableopts_opt_nr-C_F.$(OBJEXT)
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_opt_nr_Cm_opt_SOURCES = tableopts.l4
 
 tableopts_opt_nr-Cm.opt$(EXEEXT): tableopts_opt_nr-Cm.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_opt_nr_Cem_opt_SOURCES = tableopts.l4
 
 tableopts_opt_nr-Cem.opt$(EXEEXT): tableopts_opt_nr-Cem.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_opt_nr_Cae_opt_SOURCES = tableopts.l4
 
 tableopts_opt_nr-Cae.opt$(EXEEXT): tableopts_opt_nr-Cae.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_opt_nr_Caef_opt_SOURCES = tableopts.l4
 
 tableopts_opt_nr-Caef.opt$(EXEEXT): tableopts_opt_nr-Caef.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
-tableopts_opt_nr_CaeF_opt_SOURCES = tableopts.l4
+tableopts_opt_nr_Cae_F_opt_SOURCES = tableopts.l4
 
-tableopts_opt_nr-CaeF.opt$(EXEEXT): tableopts_opt_nr-CaeF.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+tableopts_opt_nr-Cae_F.opt$(EXEEXT): tableopts_opt_nr-Cae_F.$(OBJEXT)
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_opt_nr_Cam_opt_SOURCES = tableopts.l4
 
 tableopts_opt_nr-Cam.opt$(EXEEXT): tableopts_opt_nr-Cam.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_opt_nr_Caem_opt_SOURCES = tableopts.l4
 
 tableopts_opt_nr-Caem.opt$(EXEEXT): tableopts_opt_nr-Caem.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_opt_r_Ca_opt_SOURCES = tableopts.l4
 
 tableopts_opt_r-Ca.opt$(EXEEXT): tableopts_opt_r-Ca.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_opt_r_Ce_opt_SOURCES = tableopts.l4
 
 tableopts_opt_r-Ce.opt$(EXEEXT): tableopts_opt_r-Ce.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_opt_r_Cf_opt_SOURCES = tableopts.l4
 
 tableopts_opt_r-Cf.opt$(EXEEXT): tableopts_opt_r-Cf.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
-tableopts_opt_r_CF_opt_SOURCES = tableopts.l4
+tableopts_opt_r_C_F_opt_SOURCES = tableopts.l4
 
-tableopts_opt_r-CF.opt$(EXEEXT): tableopts_opt_r-CF.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+tableopts_opt_r-C_F.opt$(EXEEXT): tableopts_opt_r-C_F.$(OBJEXT)
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_opt_r_Cm_opt_SOURCES = tableopts.l4
 
 tableopts_opt_r-Cm.opt$(EXEEXT): tableopts_opt_r-Cm.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_opt_r_Cem_opt_SOURCES = tableopts.l4
 
 tableopts_opt_r-Cem.opt$(EXEEXT): tableopts_opt_r-Cem.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_opt_r_Cae_opt_SOURCES = tableopts.l4
 
 tableopts_opt_r-Cae.opt$(EXEEXT): tableopts_opt_r-Cae.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_opt_r_Caef_opt_SOURCES = tableopts.l4
 
 tableopts_opt_r-Caef.opt$(EXEEXT): tableopts_opt_r-Caef.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
-tableopts_opt_r_CaeF_opt_SOURCES = tableopts.l4
+tableopts_opt_r_Cae_F_opt_SOURCES = tableopts.l4
 
-tableopts_opt_r-CaeF.opt$(EXEEXT): tableopts_opt_r-CaeF.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+tableopts_opt_r-Cae_F.opt$(EXEEXT): tableopts_opt_r-Cae_F.$(OBJEXT)
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_opt_r_Cam_opt_SOURCES = tableopts.l4
 
 tableopts_opt_r-Cam.opt$(EXEEXT): tableopts_opt_r-Cam.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_opt_r_Caem_opt_SOURCES = tableopts.l4
 
 tableopts_opt_r-Caem.opt$(EXEEXT): tableopts_opt_r-Caem.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ser_nr_Ca_ser_SOURCES = tableopts.l4
 
 tableopts_ser_nr-Ca.ser$(EXEEXT): tableopts_ser_nr-Ca.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ser_nr_Ce_ser_SOURCES = tableopts.l4
 
 tableopts_ser_nr-Ce.ser$(EXEEXT): tableopts_ser_nr-Ce.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ser_nr_Cf_ser_SOURCES = tableopts.l4
 
 tableopts_ser_nr-Cf.ser$(EXEEXT): tableopts_ser_nr-Cf.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
-tableopts_ser_nr_CF_ser_SOURCES = tableopts.l4
+tableopts_ser_nr_C_F_ser_SOURCES = tableopts.l4
 
-tableopts_ser_nr-CF.ser$(EXEEXT): tableopts_ser_nr-CF.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+tableopts_ser_nr-C_F.ser$(EXEEXT): tableopts_ser_nr-C_F.$(OBJEXT)
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ser_nr_Cm_ser_SOURCES = tableopts.l4
 
 tableopts_ser_nr-Cm.ser$(EXEEXT): tableopts_ser_nr-Cm.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ser_nr_Cem_ser_SOURCES = tableopts.l4
 
 tableopts_ser_nr-Cem.ser$(EXEEXT): tableopts_ser_nr-Cem.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ser_nr_Cae_ser_SOURCES = tableopts.l4
 
 tableopts_ser_nr-Cae.ser$(EXEEXT): tableopts_ser_nr-Cae.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ser_nr_Caef_ser_SOURCES = tableopts.l4
 
 tableopts_ser_nr-Caef.ser$(EXEEXT): tableopts_ser_nr-Caef.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
-tableopts_ser_nr_CaeF_ser_SOURCES = tableopts.l4
+tableopts_ser_nr_Cae_F_ser_SOURCES = tableopts.l4
 
-tableopts_ser_nr-CaeF.ser$(EXEEXT): tableopts_ser_nr-CaeF.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+tableopts_ser_nr-Cae_F.ser$(EXEEXT): tableopts_ser_nr-Cae_F.$(OBJEXT)
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ser_nr_Cam_ser_SOURCES = tableopts.l4
 
 tableopts_ser_nr-Cam.ser$(EXEEXT): tableopts_ser_nr-Cam.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ser_nr_Caem_ser_SOURCES = tableopts.l4
 
 tableopts_ser_nr-Caem.ser$(EXEEXT): tableopts_ser_nr-Caem.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ser_r_Ca_ser_SOURCES = tableopts.l4
 
 tableopts_ser_r-Ca.ser$(EXEEXT): tableopts_ser_r-Ca.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ser_r_Ce_ser_SOURCES = tableopts.l4
 
 tableopts_ser_r-Ce.ser$(EXEEXT): tableopts_ser_r-Ce.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ser_r_Cf_ser_SOURCES = tableopts.l4
 
 tableopts_ser_r-Cf.ser$(EXEEXT): tableopts_ser_r-Cf.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
-tableopts_ser_r_CF_ser_SOURCES = tableopts.l4
+tableopts_ser_r_C_F_ser_SOURCES = tableopts.l4
 
-tableopts_ser_r-CF.ser$(EXEEXT): tableopts_ser_r-CF.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+tableopts_ser_r-C_F.ser$(EXEEXT): tableopts_ser_r-C_F.$(OBJEXT)
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ser_r_Cm_ser_SOURCES = tableopts.l4
 
 tableopts_ser_r-Cm.ser$(EXEEXT): tableopts_ser_r-Cm.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ser_r_Cem_ser_SOURCES = tableopts.l4
 
 tableopts_ser_r-Cem.ser$(EXEEXT): tableopts_ser_r-Cem.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ser_r_Cae_ser_SOURCES = tableopts.l4
 
 tableopts_ser_r-Cae.ser$(EXEEXT): tableopts_ser_r-Cae.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ser_r_Caef_ser_SOURCES = tableopts.l4
 
 tableopts_ser_r-Caef.ser$(EXEEXT): tableopts_ser_r-Caef.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
-tableopts_ser_r_CaeF_ser_SOURCES = tableopts.l4
+tableopts_ser_r_Cae_F_ser_SOURCES = tableopts.l4
 
-tableopts_ser_r-CaeF.ser$(EXEEXT): tableopts_ser_r-CaeF.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+tableopts_ser_r-Cae_F.ser$(EXEEXT): tableopts_ser_r-Cae_F.$(OBJEXT)
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ser_r_Cam_ser_SOURCES = tableopts.l4
 
 tableopts_ser_r-Cam.ser$(EXEEXT): tableopts_ser_r-Cam.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ser_r_Caem_ser_SOURCES = tableopts.l4
 
 tableopts_ser_r-Caem.ser$(EXEEXT): tableopts_ser_r-Caem.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ver_nr_Ca_ver_SOURCES = tableopts.l4
 
 tableopts_ver_nr-Ca.ver$(EXEEXT): tableopts_ver_nr-Ca.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ver_nr_Ce_ver_SOURCES = tableopts.l4
 
 tableopts_ver_nr-Ce.ver$(EXEEXT): tableopts_ver_nr-Ce.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ver_nr_Cf_ver_SOURCES = tableopts.l4
 
 tableopts_ver_nr-Cf.ver$(EXEEXT): tableopts_ver_nr-Cf.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
-tableopts_ver_nr_CF_ver_SOURCES = tableopts.l4
+tableopts_ver_nr_C_F_ver_SOURCES = tableopts.l4
 
-tableopts_ver_nr-CF.ver$(EXEEXT): tableopts_ver_nr-CF.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+tableopts_ver_nr-C_F.ver$(EXEEXT): tableopts_ver_nr-C_F.$(OBJEXT)
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ver_nr_Cm_ver_SOURCES = tableopts.l4
 
 tableopts_ver_nr-Cm.ver$(EXEEXT): tableopts_ver_nr-Cm.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ver_nr_Cem_ver_SOURCES = tableopts.l4
 
 tableopts_ver_nr-Cem.ver$(EXEEXT): tableopts_ver_nr-Cem.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ver_nr_Cae_ver_SOURCES = tableopts.l4
 
 tableopts_ver_nr-Cae.ver$(EXEEXT): tableopts_ver_nr-Cae.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ver_nr_Caef_ver_SOURCES = tableopts.l4
 
 tableopts_ver_nr-Caef.ver$(EXEEXT): tableopts_ver_nr-Caef.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
-tableopts_ver_nr_CaeF_ver_SOURCES = tableopts.l4
+tableopts_ver_nr_Cae_F_ver_SOURCES = tableopts.l4
 
-tableopts_ver_nr-CaeF.ver$(EXEEXT): tableopts_ver_nr-CaeF.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+tableopts_ver_nr-Cae_F.ver$(EXEEXT): tableopts_ver_nr-Cae_F.$(OBJEXT)
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ver_nr_Cam_ver_SOURCES = tableopts.l4
 
 tableopts_ver_nr-Cam.ver$(EXEEXT): tableopts_ver_nr-Cam.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ver_nr_Caem_ver_SOURCES = tableopts.l4
 
 tableopts_ver_nr-Caem.ver$(EXEEXT): tableopts_ver_nr-Caem.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ver_r_Ca_ver_SOURCES = tableopts.l4
 
 tableopts_ver_r-Ca.ver$(EXEEXT): tableopts_ver_r-Ca.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ver_r_Ce_ver_SOURCES = tableopts.l4
 
 tableopts_ver_r-Ce.ver$(EXEEXT): tableopts_ver_r-Ce.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ver_r_Cf_ver_SOURCES = tableopts.l4
 
 tableopts_ver_r-Cf.ver$(EXEEXT): tableopts_ver_r-Cf.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
-tableopts_ver_r_CF_ver_SOURCES = tableopts.l4
+tableopts_ver_r_C_F_ver_SOURCES = tableopts.l4
 
-tableopts_ver_r-CF.ver$(EXEEXT): tableopts_ver_r-CF.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+tableopts_ver_r-C_F.ver$(EXEEXT): tableopts_ver_r-C_F.$(OBJEXT)
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ver_r_Cm_ver_SOURCES = tableopts.l4
 
 tableopts_ver_r-Cm.ver$(EXEEXT): tableopts_ver_r-Cm.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ver_r_Cem_ver_SOURCES = tableopts.l4
 
 tableopts_ver_r-Cem.ver$(EXEEXT): tableopts_ver_r-Cem.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ver_r_Cae_ver_SOURCES = tableopts.l4
 
 tableopts_ver_r-Cae.ver$(EXEEXT): tableopts_ver_r-Cae.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ver_r_Caef_ver_SOURCES = tableopts.l4
 
 tableopts_ver_r-Caef.ver$(EXEEXT): tableopts_ver_r-Caef.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
-tableopts_ver_r_CaeF_ver_SOURCES = tableopts.l4
+tableopts_ver_r_Cae_F_ver_SOURCES = tableopts.l4
 
-tableopts_ver_r-CaeF.ver$(EXEEXT): tableopts_ver_r-CaeF.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+tableopts_ver_r-Cae_F.ver$(EXEEXT): tableopts_ver_r-Cae_F.$(OBJEXT)
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ver_r_Cam_ver_SOURCES = tableopts.l4
 
 tableopts_ver_r-Cam.ver$(EXEEXT): tableopts_ver_r-Cam.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
 tableopts_ver_r_Caem_ver_SOURCES = tableopts.l4
 
 tableopts_ver_r-Caem.ver$(EXEEXT): tableopts_ver_r-Caem.$(OBJEXT)
-	$(AM_V_CCLD)$(LINK) -o $@ $<
+	$(AM_V_CCLD)$(LINK) $<
 
-TABLEOPTS_TESTS = tableopts_opt_nr-Ca.opt tableopts_opt_nr-Ce.opt tableopts_opt_nr-Cf.opt tableopts_opt_nr-CF.opt tableopts_opt_nr-Cm.opt tableopts_opt_nr-Cem.opt tableopts_opt_nr-Cae.opt tableopts_opt_nr-Caef.opt tableopts_opt_nr-CaeF.opt tableopts_opt_nr-Cam.opt tableopts_opt_nr-Caem.opt tableopts_opt_r-Ca.opt tableopts_opt_r-Ce.opt tableopts_opt_r-Cf.opt tableopts_opt_r-CF.opt tableopts_opt_r-Cm.opt tableopts_opt_r-Cem.opt tableopts_opt_r-Cae.opt tableopts_opt_r-Caef.opt tableopts_opt_r-CaeF.opt tableopts_opt_r-Cam.opt tableopts_opt_r-Caem.opt tableopts_ser_nr-Ca.ser tableopts_ser_nr-Ce.ser tableopts_ser_nr-Cf.ser tableopts_ser_nr-CF.ser tableopts_ser_nr-Cm.ser tableopts_ser_nr-Cem.ser tableopts_ser_nr-Cae.ser tableopts_ser_nr-Caef.ser tableopts_ser_nr-CaeF.ser tableopts_ser_nr-Cam.ser tableopts_ser_nr-Caem.ser tableopts_ser_r-Ca.ser tableopts_ser_r-Ce.ser tableopts_ser_r-Cf.ser tableopts_ser_r-CF.ser tableopts_ser_r-Cm.ser tableopts_ser_r-Cem.ser tableopts_ser_r-Cae.ser tableopts_ser_r-Caef.ser tableopts_ser_r-CaeF.ser tableopts_ser_r-Cam.ser tableopts_ser_r-Caem.ser tableopts_ver_nr-Ca.ver tableopts_ver_nr-Ce.ver tableopts_ver_nr-Cf.ver tableopts_ver_nr-CF.ver tableopts_ver_nr-Cm.ver tableopts_ver_nr-Cem.ver tableopts_ver_nr-Cae.ver tableopts_ver_nr-Caef.ver tableopts_ver_nr-CaeF.ver tableopts_ver_nr-Cam.ver tableopts_ver_nr-Caem.ver tableopts_ver_r-Ca.ver tableopts_ver_r-Ce.ver tableopts_ver_r-Cf.ver tableopts_ver_r-CF.ver tableopts_ver_r-Cm.ver tableopts_ver_r-Cem.ver tableopts_ver_r-Cae.ver tableopts_ver_r-Caef.ver tableopts_ver_r-CaeF.ver tableopts_ver_r-Cam.ver tableopts_ver_r-Caem.ver
+TABLEOPTS_TESTS = tableopts_opt_nr-Ca.opt tableopts_opt_nr-Ce.opt tableopts_opt_nr-Cf.opt tableopts_opt_nr-C_F.opt tableopts_opt_nr-Cm.opt tableopts_opt_nr-Cem.opt tableopts_opt_nr-Cae.opt tableopts_opt_nr-Caef.opt tableopts_opt_nr-Cae_F.opt tableopts_opt_nr-Cam.opt tableopts_opt_nr-Caem.opt tableopts_opt_r-Ca.opt tableopts_opt_r-Ce.opt tableopts_opt_r-Cf.opt tableopts_opt_r-C_F.opt tableopts_opt_r-Cm.opt tableopts_opt_r-Cem.opt tableopts_opt_r-Cae.opt tableopts_opt_r-Caef.opt tableopts_opt_r-Cae_F.opt tableopts_opt_r-Cam.opt tableopts_opt_r-Caem.opt tableopts_ser_nr-Ca.ser tableopts_ser_nr-Ce.ser tableopts_ser_nr-Cf.ser tableopts_ser_nr-C_F.ser tableopts_ser_nr-Cm.ser tableopts_ser_nr-Cem.ser tableopts_ser_nr-Cae.ser tableopts_ser_nr-Caef.ser tableopts_ser_nr-Cae_F.ser tableopts_ser_nr-Cam.ser tableopts_ser_nr-Caem.ser tableopts_ser_r-Ca.ser tableopts_ser_r-Ce.ser tableopts_ser_r-Cf.ser tableopts_ser_r-C_F.ser tableopts_ser_r-Cm.ser tableopts_ser_r-Cem.ser tableopts_ser_r-Cae.ser tableopts_ser_r-Caef.ser tableopts_ser_r-Cae_F.ser tableopts_ser_r-Cam.ser tableopts_ser_r-Caem.ser tableopts_ver_nr-Ca.ver tableopts_ver_nr-Ce.ver tableopts_ver_nr-Cf.ver tableopts_ver_nr-C_F.ver tableopts_ver_nr-Cm.ver tableopts_ver_nr-Cem.ver tableopts_ver_nr-Cae.ver tableopts_ver_nr-Caef.ver tableopts_ver_nr-Cae_F.ver tableopts_ver_nr-Cam.ver tableopts_ver_nr-Caem.ver tableopts_ver_r-Ca.ver tableopts_ver_r-Ce.ver tableopts_ver_r-Cf.ver tableopts_ver_r-C_F.ver tableopts_ver_r-Cm.ver tableopts_ver_r-Cem.ver tableopts_ver_r-Cae.ver tableopts_ver_r-Caef.ver tableopts_ver_r-Cae_F.ver tableopts_ver_r-Cam.ver tableopts_ver_r-Caem.ver
 
-tableopts_tables =  tableopts_ser_nr-Ca.ser.tables tableopts_ser_nr-Ce.ser.tables tableopts_ser_nr-Cf.ser.tables tableopts_ser_nr-CF.ser.tables tableopts_ser_nr-Cm.ser.tables tableopts_ser_nr-Cem.ser.tables tableopts_ser_nr-Cae.ser.tables tableopts_ser_nr-Caef.ser.tables tableopts_ser_nr-CaeF.ser.tables tableopts_ser_nr-Cam.ser.tables tableopts_ser_nr-Caem.ser.tables tableopts_ser_r-Ca.ser.tables tableopts_ser_r-Ce.ser.tables tableopts_ser_r-Cf.ser.tables tableopts_ser_r-CF.ser.tables tableopts_ser_r-Cm.ser.tables tableopts_ser_r-Cem.ser.tables tableopts_ser_r-Cae.ser.tables tableopts_ser_r-Caef.ser.tables tableopts_ser_r-CaeF.ser.tables tableopts_ser_r-Cam.ser.tables tableopts_ser_r-Caem.ser.tables tableopts_ver_nr-Ca.ver.tables tableopts_ver_nr-Ce.ver.tables tableopts_ver_nr-Cf.ver.tables tableopts_ver_nr-CF.ver.tables tableopts_ver_nr-Cm.ver.tables tableopts_ver_nr-Cem.ver.tables tableopts_ver_nr-Cae.ver.tables tableopts_ver_nr-Caef.ver.tables tableopts_ver_nr-CaeF.ver.tables tableopts_ver_nr-Cam.ver.tables tableopts_ver_nr-Caem.ver.tables tableopts_ver_r-Ca.ver.tables tableopts_ver_r-Ce.ver.tables tableopts_ver_r-Cf.ver.tables tableopts_ver_r-CF.ver.tables tableopts_ver_r-Cm.ver.tables tableopts_ver_r-Cem.ver.tables tableopts_ver_r-Cae.ver.tables tableopts_ver_r-Caef.ver.tables tableopts_ver_r-CaeF.ver.tables tableopts_ver_r-Cam.ver.tables tableopts_ver_r-Caem.ver.tables
+tableopts_tables =  tableopts_ser_nr-Ca.ser.tables tableopts_ser_nr-Ce.ser.tables tableopts_ser_nr-Cf.ser.tables tableopts_ser_nr-C_F.ser.tables tableopts_ser_nr-Cm.ser.tables tableopts_ser_nr-Cem.ser.tables tableopts_ser_nr-Cae.ser.tables tableopts_ser_nr-Caef.ser.tables tableopts_ser_nr-Cae_F.ser.tables tableopts_ser_nr-Cam.ser.tables tableopts_ser_nr-Caem.ser.tables tableopts_ser_r-Ca.ser.tables tableopts_ser_r-Ce.ser.tables tableopts_ser_r-Cf.ser.tables tableopts_ser_r-C_F.ser.tables tableopts_ser_r-Cm.ser.tables tableopts_ser_r-Cem.ser.tables tableopts_ser_r-Cae.ser.tables tableopts_ser_r-Caef.ser.tables tableopts_ser_r-Cae_F.ser.tables tableopts_ser_r-Cam.ser.tables tableopts_ser_r-Caem.ser.tables tableopts_ver_nr-Ca.ver.tables tableopts_ver_nr-Ce.ver.tables tableopts_ver_nr-Cf.ver.tables tableopts_ver_nr-C_F.ver.tables tableopts_ver_nr-Cm.ver.tables tableopts_ver_nr-Cem.ver.tables tableopts_ver_nr-Cae.ver.tables tableopts_ver_nr-Caef.ver.tables tableopts_ver_nr-Cae_F.ver.tables tableopts_ver_nr-Cam.ver.tables tableopts_ver_nr-Caem.ver.tables tableopts_ver_r-Ca.ver.tables tableopts_ver_r-Ce.ver.tables tableopts_ver_r-Cf.ver.tables tableopts_ver_r-C_F.ver.tables tableopts_ver_r-Cm.ver.tables tableopts_ver_r-Cem.ver.tables tableopts_ver_r-Cae.ver.tables tableopts_ver_r-Caef.ver.tables tableopts_ver_r-Cae_F.ver.tables tableopts_ver_r-Cam.ver.tables tableopts_ver_r-Caem.ver.tables
diff --git a/tests/tableopts.sh b/tests/tableopts.sh
index c1ac19e..60fcee8 100755
--- a/tests/tableopts.sh
+++ b/tests/tableopts.sh
@@ -17,7 +17,11 @@ tableopts_tables=""
 for kind in opt ser ver ; do
     for threading in nr r ; do
         for opt in -Ca -Ce -Cf -CF -Cm -Cem -Cae -Caef -CaeF -Cam -Caem ; do
-            testname=tableopts_${kind}_${threading}${opt}.${kind}
+            bare_opt=${opt#-}
+            # The filenames must work on case-insensitive filesystems.
+            bare_opt=`echo ${bare_opt}| sed 's/F$/_F/'`
+
+            testname=tableopts_${kind}_${threading}-${bare_opt}.${kind}
             if [ "${TABLEOPTS_TESTS}" = "" ] ;then
                 TABLEOPTS_TESTS=${testname}
                 if [ "$kind" = "ser" ] || [ "$kind" = "ver" ] ; then
@@ -30,12 +34,11 @@ for kind in opt ser ver ; do
                 fi
             fi
 
-            bare_opt=${opt#-}
             cat << EOF
 tableopts_${kind}_${threading}_${bare_opt}_${kind}_SOURCES = tableopts.l4
 
-${testname}\$(EXEEXT): tableopts_${kind}_${threading}${opt}.\$(OBJEXT)
-	\$(AM_V_CCLD)\$(LINK) -o \$@ \$<
+${testname}\$(EXEEXT): tableopts_${kind}_${threading}-${bare_opt}.\$(OBJEXT)
+	\$(AM_V_CCLD)\$(LINK) \$<
 
 EOF
         done
diff --git a/tests/testwrapper-direct.sh b/tests/testwrapper-direct.sh
index 589ad33..9160501 100755
--- a/tests/testwrapper-direct.sh
+++ b/tests/testwrapper-direct.sh
@@ -1,5 +1,5 @@
 #!/bin/sh
-set -vx
+echo 'set -euvx'
 set -euvx
 
 # testwrapper-direct.sh: run some specialized flex tests that care where
diff --git a/tests/testwrapper.sh b/tests/testwrapper.sh
index 6a7e666..293f8cc 100755
--- a/tests/testwrapper.sh
+++ b/tests/testwrapper.sh
@@ -1,5 +1,5 @@
 #!/bin/sh
-set -vx
+echo 'set -euvx'
 set -euvx
 
 # testwrapper.sh: run a flex test, typically called by a Makefile
diff -up flex-2.6.4/src/scan.c.2~ flex-2.6.4/src/scan.c
--- flex-2.6.4/src/scan.c.2~	2018-04-28 21:10:51.599246917 +0200
+++ flex-2.6.4/src/scan.c	2018-04-28 21:10:58.019075073 +0200
@@ -1,6 +1,9 @@
-#line 1 "scan.c"
+#line 2 "scan.c"
+/* flexdef.h includes config.h, which may contain macros that alter the API */
+/* of libc functions. Must include first before any libc header. */
+#include "flexdef.h"
 
-#line 3 "scan.c"
+#line 7 "scan.c"
 
 #define  YY_INT_ALIGNED short int
 
@@ -17,6 +20,22 @@
 /* First, we deal with  platform-specific or compiler-specific issues. */
 
 /* begin standard C headers. */
+/* Feature test macros. Flex uses functions that require a minimum set of
+ * macros defined. As defining some macros may hide function declarations that
+ * user code might use, be conservative and respect user's definitions as much
+ * as possible. In glibc, feature test macros may not be all set up until one
+ * of the libc header (that includes <features.h>) is included. This creates
+ * a circular dependency when we check the macros. <assert.h> is the safest
+ * header we can include and does not declare too many functions we don't need.
+ */
+#if !defined(__GNU_LIBRARY__) && defined(__STDC__)
+#include <assert.h>
+#endif
+#if !(defined(_POSIX_C_SOURCE) || defined(_XOPEN_SOURCE) || \
+    defined(_POSIX_SOURCE))
+# define _POSIX_C_SOURCE 1 /* Required for fileno() */
+# define _POSIX_SOURCE 1
+#endif
 #include <stdio.h>
 #include <string.h>
 #include <errno.h>
@@ -24,23 +43,27 @@
 
 /* end standard C headers. */
 
-/* flex integer type definitions */
-
-#ifndef FLEXINT_H
-#define FLEXINT_H
-
-/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */
+/* begin standard C++ headers. */
 
-#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
+/* flex integer type definitions */
 
-/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
- * if you want the limit (max/min) macros for int types. 
+/* Prefer C99 integer types if available. */
+#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
+/* Include <inttypes.h> and not <stdint.h> because Solaris 2.6 has the former
+ * and not the latter.
  */
-#ifndef __STDC_LIMIT_MACROS
-#define __STDC_LIMIT_MACROS 1
-#endif
-
 #include <inttypes.h>
+# define YYFLEX_USE_STDINT
+#else
+# if defined(_MSC_VER) && _MSC_VER >= 1600
+/* Visual C++ 2010 does not define __STDC_VERSION__ and has <stdint.h> but not
+ * <inttypes.h>.
+ */
+#include <stdint.h>
+#  define YYFLEX_USE_STDINT
+# endif
+#endif
+#ifdef YYFLEX_USE_STDINT
 typedef int8_t flex_int8_t;
 typedef uint8_t flex_uint8_t;
 typedef int16_t flex_int16_t;
@@ -48,51 +71,26 @@ typedef uint16_t flex_uint16_t;
 typedef int32_t flex_int32_t;
 typedef uint32_t flex_uint32_t;
 #else
-typedef signed char flex_int8_t;
+typedef unsigned char flex_uint8_t;
 typedef short int flex_int16_t;
-typedef int flex_int32_t;
-typedef unsigned char flex_uint8_t; 
 typedef unsigned short int flex_uint16_t;
+# ifdef __STDC__
+typedef signed char flex_int8_t;
+/* ISO C only requires at least 16 bits for int. */
+#include <limits.h>
+#  if UINT_MAX >= 4294967295
+#   define YYFLEX_INT32_DEFINED
+typedef int flex_int32_t;
 typedef unsigned int flex_uint32_t;
-
-/* Limits of integral types. */
-#ifndef INT8_MIN
-#define INT8_MIN               (-128)
-#endif
-#ifndef INT16_MIN
-#define INT16_MIN              (-32767-1)
-#endif
-#ifndef INT32_MIN
-#define INT32_MIN              (-2147483647-1)
-#endif
-#ifndef INT8_MAX
-#define INT8_MAX               (127)
-#endif
-#ifndef INT16_MAX
-#define INT16_MAX              (32767)
-#endif
-#ifndef INT32_MAX
-#define INT32_MAX              (2147483647)
-#endif
-#ifndef UINT8_MAX
-#define UINT8_MAX              (255U)
+#  endif
+# else
+typedef char flex_int8_t;
+# endif
+# ifndef YYFLEX_INT32_DEFINED
+typedef long int flex_int32_t;
+typedef unsigned long int flex_uint32_t;
+# endif
 #endif
-#ifndef UINT16_MAX
-#define UINT16_MAX             (65535U)
-#endif
-#ifndef UINT32_MAX
-#define UINT32_MAX             (4294967295U)
-#endif
-
-#ifndef SIZE_MAX
-#define SIZE_MAX               (~(size_t)0)
-#endif
-
-#endif /* ! C99 */
-
-#endif /* ! FLEXINT_H */
-
-/* begin standard C++ headers. */
 
 /* TODO: this is always defined, so inline it */
 #define yyconst const
@@ -352,8 +350,8 @@ static void yynoreturn yy_fatal_error (
 	(yy_hold_char) = *yy_cp; \
 	*yy_cp = '\0'; \
 	(yy_c_buf_p) = yy_cp;
-#define YY_NUM_RULES 253
-#define YY_END_OF_BUFFER 254
+#define YY_NUM_RULES 255
+#define YY_END_OF_BUFFER 256
 /* This struct is not used in this scanner,
    but its presence is necessary. */
 struct yy_trans_info
@@ -361,131 +359,132 @@ struct yy_trans_info
 	flex_int32_t yy_verify;
 	flex_int32_t yy_nxt;
 	};
-static const flex_int16_t yy_accept[1114] =
+static const flex_int16_t yy_accept[1126] =
     {   0,
-        0,    0,    0,    0,    0,    0,  246,  246,   40,   40,
+        0,    0,    0,    0,    0,    0,  248,  248,   40,   40,
         0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
         0,    0,    0,    0,    0,    0,    0,    0,   21,   21,
-      239,  239,    0,    0,    0,    0,    0,    0,    0,    0,
+      241,  241,    0,    0,    0,    0,    0,    0,    0,    0,
         0,    0,    0,    0,    0,    0,    0,    0,   21,   21,
-      250,  250,  239,  239,  254,  252,    9,   20,  252,   18,
-        1,   19,  252,  252,  252,  252,   17,  163,  148,  149,
-      163,  141,  163,  160,  161,  162,  162,  163,  163,  163,
-      162,  147,  137,  163,  163,  139,  140,  135,  136,  135,
-      134,  133,  134,  246,  247,  247,   40,   42,   40,   41,
-
-       40,   40,   41,   41,   41,   50,   49,   51,  252,  169,
-      169,  164,  169,  165,  166,  168,  170,  218,  219,  218,
-      216,  215,  217,  171,  173,  171,  172,  171,  185,  185,
-      185,  185,  187,  189,  187,  187,  187,  187,  188,  228,
-      233,  228,  232,  231,  234,  229,  229,  229,  234,  234,
-      226,  227,  252,  130,  252,   21,   23,   21,   22,   22,
-       22,  235,  241,  235,  236,  242,  242,  242,  224,  224,
-      225,  224,  224,  224,  224,  224,  224,  224,  129,   53,
-       52,  129,  129,  129,  129,   54,  129,  129,  129,  129,
-      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
-
-      129,  129,  129,  129,  129,  129,  129,   36,   33,   36,
-       34,   48,   45,  252,   48,   48,   44,   43,  175,  174,
-      176,  177,  178,  179,  180,  181,  182,   31,   32,   31,
-       30,   28,   29,   28,   27,   22,  250,  251,  251,  237,
-      237,  238,    9,   20,    0,   18,    1,   19,    0,    0,
+      252,  252,  241,  241,  256,  254,    9,   20,  254,   18,
+        1,   19,  254,  254,  254,  254,   17,  165,  150,  151,
+      165,  143,  165,  162,  163,  164,  164,  165,  165,  165,
+      164,  149,  139,  165,  165,  141,  142,  137,  138,  137,
+      136,  135,  136,  248,  249,  249,   40,   42,   40,   41,
+
+       40,   40,   41,   41,   41,   50,   49,   51,  254,  171,
+      171,  166,  171,  167,  168,  170,  172,  220,  221,  220,
+      218,  217,  219,  173,  175,  173,  174,  173,  187,  187,
+      187,  187,  189,  191,  189,  189,  189,  189,  190,  230,
+      235,  230,  234,  233,  236,  231,  231,  231,  236,  236,
+      228,  229,  254,  132,  254,   21,   23,   21,   22,   22,
+       22,  237,  243,  237,  238,  244,  244,  244,  226,  226,
+      227,  226,  226,  226,  226,  226,  226,  226,  131,   53,
+       52,  131,  131,  131,  131,   54,  131,  131,  131,  131,
+      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
+
+      131,  131,  131,  131,  131,  131,  131,   36,   33,   36,
+       34,   48,   45,  254,   48,   48,   44,   43,  177,  176,
+      178,  179,  180,  181,  182,  183,  184,   31,   32,   31,
+       30,   28,   29,   28,   27,   22,  252,  253,  253,  239,
+      239,  240,    9,   20,    0,   18,    1,   19,    0,    0,
         0,   16,   10,    0,    0,    0,    0,    4,   16,    5,
-        0,    2,   17,  148,  149,    0,    0,    0,  143,    0,
-      159,  157,    0,  153,  153,    0,  243,  243,  243,    0,
-        0,  142,    0,  147,  137,    0,    0,    0,  139,  140,
-      152,  138,    0,  136,  134,  133,  131,  132,  246,  244,
-
-      245,   40,   42,   40,   40,   37,   38,    0,   50,   49,
-       51,    0,  164,    0,  164,  167,  168,  219,  215,  173,
-        0,  183,  184,  189,  186,  228,  233,    0,    0,  221,
-      229,  229,  229,    0,  130,    0,   21,   23,   24,  235,
-      241,  240,  239,  240,    0,    0,  225,  220,    0,    0,
-       53,   52,    0,  128,    0,    0,  129,  129,  129,  129,
-      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
-      129,  129,  129,  129,  129,  129,   55,  129,  129,  129,
-      129,  129,  129,  129,  129,  129,  129,  129,    0,   35,
+        0,    2,   17,  150,  151,    0,    0,    0,  145,    0,
+      161,  159,    0,  155,  155,    0,  245,  245,  245,    0,
+        0,  144,    0,  149,  139,    0,    0,    0,  141,  142,
+      154,  140,    0,  138,  136,  135,  133,  134,  248,  246,
+
+      247,   40,   42,   40,   40,   37,   38,    0,   50,   49,
+       51,    0,  166,    0,  166,  169,  170,  221,  217,  175,
+        0,  185,  186,  191,  188,  230,  235,    0,    0,  223,
+      231,  231,  231,    0,  132,    0,   21,   23,   24,  237,
+      243,  242,  241,  242,    0,    0,  227,  222,    0,    0,
+       53,   52,    0,  130,    0,    0,  131,  131,  131,  131,
+      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
+      131,  131,  131,  131,  131,  131,   55,  131,  131,  131,
+      131,  131,  131,  131,  131,  131,  131,  131,    0,   35,
        34,   48,   45,   46,   47,   31,   32,   29,   26,   25,
 
-      250,  248,  249,  237,    0,   16,   10,    0,   14,    0,
+      252,  250,  251,  239,    0,   16,   10,    0,   14,    0,
         0,    0,    0,    0,    4,   16,    5,    0,    6,    0,
-      144,    0,  145,    0,  158,    0,  153,  153,    0,  153,
-      153,  153,  243,  243,  155,  154,    0,  156,  138,  146,
-        0,  152,    0,  131,  132,   40,   40,    0,   39,    0,
+      146,    0,  147,    0,  160,    0,  155,  155,    0,  155,
+      155,  155,  245,  245,  157,  156,    0,  158,  140,  148,
+        0,  154,    0,  133,  134,   40,   40,    0,   39,    0,
         0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-        0,    0,  230,  229,  229,    0,    0,  220,    0,    0,
-        0,    0,  129,  129,  129,  129,  129,  129,   65,  129,
-      129,  129,   70,  129,  129,  129,  129,  129,  129,  129,
-      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
+        0,    0,  232,  231,  231,    0,    0,  222,    0,    0,
+        0,    0,  131,  131,  131,  131,  131,  131,   65,  131,
+      131,  131,   70,  131,  131,  131,  131,  131,  131,  131,
+      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
 
-      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
-      129,  129,  129,  129,  129,  129,  129,  129,    0,    0,
+      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
+      131,  131,  131,  131,  131,  131,  131,  131,    0,    0,
         0,    0,   14,    0,    0,    0,    0,    0,    0,    4,
-        8,    5,    0,  153,  153,  153,  153,  153,  153,  153,
-      243,  156,    0,    0,   40,   40,    0,    0,    0,    0,
+        8,    5,    0,  155,  155,  155,  155,  155,  155,  155,
+      245,  158,    0,    0,   40,   40,    0,    0,    0,    0,
         0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-        0,    0,    0,    0,    0,    0,    0,    0,  229,  229,
-        0,    0,   56,   57,  129,  129,  129,  129,  129,  129,
-      129,  129,  129,  129,   71,   72,  129,  129,  129,  129,
-       77,   78,  129,  129,  129,  129,  129,  129,  129,   83,
+        0,    0,    0,    0,    0,    0,    0,    0,  231,  231,
+        0,    0,   56,   57,  131,  131,  131,  131,  131,  131,
+      131,  131,  131,  131,   71,   72,  131,  131,  131,  131,
+       77,   78,  131,  131,  131,  131,  131,  131,  131,   83,
 
-      129,  129,  129,  129,  129,  129,  129,  129,  129,   92,
-      129,  129,  129,  129,  129,  129,  129,  129,  129,    0,
+      131,  131,  131,  131,  131,  131,  131,  131,  131,   92,
+      131,  131,  131,  131,  131,  131,  131,  131,  131,    0,
         0,    0,    0,   15,    0,    0,    0,    0,    0,    8,
-        8,    8,    0,  153,  153,  153,  153,  153,  153,  153,
-        0,    0,   40,   40,  214,    0,    0,    0,    0,    0,
+        8,    8,    0,  155,  155,  155,  155,  155,  155,  155,
+        0,    0,   40,   40,  216,    0,    0,    0,    0,    0,
         0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-        0,    0,    0,    0,    0,    0,    0,    0,  229,  229,
-        0,    0,   58,  129,   60,  129,   62,  129,  129,  129,
-      129,   68,  129,  129,  129,   73,  129,  129,  129,  129,
-      129,  129,  129,  129,  129,  129,  129,   86,  129,  129,
-
-      129,  129,   90,  129,  129,  129,  129,  129,  129,  129,
-      129,  129,  129,    0,    0,    0,    0,    3,    0,    0,
-        0,    8,    7,    8,    0,  153,  153,  153,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,  231,  231,
+        0,    0,   58,  131,   60,  131,   62,  131,  131,  131,
+      131,   68,  131,  131,  131,   73,  131,  131,  131,  131,
+      131,  131,  131,  131,  131,  131,  131,   86,  131,  131,
+
+      131,  131,   90,  131,  131,  131,  131,  131,  131,  131,
+      131,  131,  131,    0,    0,    0,    0,    3,    0,    0,
+        0,    8,    7,    8,    0,  155,  155,  155,    0,    0,
        40,   40,    0,    0,    0,    0,    0,    0,    0,    0,
         0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-        0,    0,    0,    0,    0,    0,  222,  223,  222,  223,
-      129,   61,  129,  129,  129,  129,  129,  129,  129,  125,
-      129,  129,  129,  129,  129,  129,  129,  129,  123,  129,
-       85,  129,   88,  129,   89,  129,  129,  129,  104,    0,
-      129,   94,  129,    0,   95,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,  224,  225,  224,  225,
+      131,   61,  131,  131,  131,  131,  131,  131,  131,  127,
+      131,  131,  131,  131,  131,  131,  131,  131,  125,  131,
+       85,  131,   88,  131,   89,  131,  131,  131,  104,    0,
+      131,   94,  131,    0,   95,    0,    0,    0,    0,    0,
 
-       12,    0,   13,    0,  151,    0,  150,    0,    0,    0,
+       12,    0,   13,    0,  153,    0,  152,    0,    0,    0,
         0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
         0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-        0,  129,  129,  129,  129,  129,   66,  129,   69,  129,
-      129,  129,  129,  129,  129,  122,  129,   82,  129,  129,
-       87,  129,   91,  102,  124,    0,    0,    0,    0,    0,
-        0,  129,  129,    0,    0,    0,    0,    0,    0,    0,
-        0,    0,    0,  150,    0,    0,    0,    0,    0,    0,
+        0,  131,  131,  131,  131,  131,   66,  131,   69,  131,
+      131,  131,  131,  131,  131,  124,  131,   82,  131,  131,
+       87,  131,   91,  102,  126,    0,    0,    0,    0,    0,
+        0,    0,  131,  131,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,  152,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
         0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-        0,    0,    0,    0,    0,    0,    0,    0,  129,  129,
-
-      129,  129,  129,   67,  129,  129,  129,  129,   79,  129,
-      129,  129,  129,  129,  129,    0,    0,  113,    0,    0,
-        0,    0,    0,    0,   93,  129,    0,    0,  114,    0,
-        0,    0,    0,    0,    0,    0,    0,    0,   11,    0,
-      190,  191,  192,  193,  194,  195,  196,  197,  198,  199,
-      200,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-        0,    0,    0,    0,  129,  129,  129,  129,  129,  129,
-      129,  129,  129,  129,  129,  129,   84,  129,  129,    0,
-        0,    0,    0,    0,    0,  115,    0,  103,    0,    0,
-        0,    0,    0,  116,    0,    0,    0,    0,    0,  201,
-
-      202,  203,  204,  205,  206,  207,  208,  209,  210,  211,
-      212,    0,  129,  129,  129,  129,  129,  121,  129,  129,
-       75,  129,  129,  129,  129,  129,    0,    0,  109,    0,
-      119,  117,  110,    0,    0,    0,  120,  118,    0,    0,
-        0,    0,    0,    0,  213,  129,  129,  129,  129,  129,
-      125,   74,  129,   81,  129,  126,  129,  105,  107,    0,
-      106,  108,    0,    0,    0,    0,    0,    0,    0,  129,
-       63,  129,  129,  129,  129,   76,  129,  111,  112,   97,
-        0,    0,    0,    0,   98,  129,  129,  129,  129,  129,
-      127,   96,    0,  100,    0,  129,  129,  129,   66,  129,
 
-       99,  101,  129,   64,  129,  129,  129,   67,  129,  129,
-       80,   59,    0
+      131,  131,  131,  131,  131,   67,  131,  131,  131,  131,
+       79,  131,  131,  131,  131,  131,  131,    0,    0,    0,
+      115,    0,    0,    0,    0,    0,    0,   93,  131,    0,
+        0,    0,  116,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,   11,    0,  192,  193,  194,  195,  196,  197,
+      198,  199,  200,  201,  202,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,  131,  131,
+      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
+       84,  131,  131,    0,    0,    0,    0,    0,    0,    0,
+      117,    0,  103,    0,    0,    0,    0,    0,    0,  118,
+
+        0,    0,    0,    0,    0,  203,  204,  205,  206,  207,
+      208,  209,  210,  211,  212,  213,  214,    0,  131,  131,
+      131,  131,  131,  123,  131,  131,   75,  131,  131,  131,
+      131,  131,    0,    0,    0,  109,    0,  121,  119,  110,
+        0,    0,    0,    0,  122,  120,    0,    0,    0,    0,
+        0,    0,  215,  131,  131,  131,  131,  131,  127,   74,
+      131,   81,  131,  128,  131,    0,  105,  107,    0,    0,
+      106,  108,    0,    0,    0,    0,    0,    0,    0,  131,
+       63,  131,  131,  131,  131,   76,  131,  111,  113,  112,
+      114,   97,    0,    0,    0,    0,   98,  131,  131,  131,
+
+      131,  131,  129,   96,    0,  100,    0,  131,  131,  131,
+       66,  131,   99,  101,  131,   64,  131,  131,  131,   67,
+      131,  131,   80,   59,    0
     } ;
 
 static const YY_CHAR yy_ec[256] =
@@ -533,283 +532,287 @@ static const YY_CHAR yy_meta[85] =
        15,   20,    1,   21
     } ;
 
-static const flex_int16_t yy_base[1221] =
+static const flex_int16_t yy_base[1233] =
     {   0,
         0,   84,  167,  250,  171,  184,  135,  142,  220,  231,
-      196,  200,  334,    0, 3627, 3625,  211,  416,  203,  212,
+      196,  200,  334,    0, 3650, 3647,  211,  416,  203,  212,
       189,  225,  266,  417,  500,    0,  207,  208,  234,  421,
       424,  436,  583,  588,  669,    0,  294,  304,  584,  751,
       579,  580,  417,  576,  287,  306,  241,  441,  595,  608,
-      169,  238,  440,  754, 3680, 4511,  325, 4511, 3676,    0,
-      446, 4511, 3673,  430,  827, 3661,    0, 4511,  758, 4511,
-     3650, 4511,  453, 3621, 4511, 4511, 3619, 3584,  129,  746,
-      445,  766, 4511, 3604,  198, 3582, 4511, 4511, 4511, 3600,
-        0, 3599,  214,    0, 3506, 3483,    0, 4511, 3532, 4511,
-
-      420,  119, 3481, 3478, 3446,    0, 3526, 4511, 3520, 4511,
-      482, 3520, 3518, 4511, 3455,    0, 4511, 4511, 4511, 3504,
-     4511,  598, 4511, 4511, 4511, 3499, 4511,  754, 4511, 3477,
-      759,  180, 4511, 4511, 3467,    0, 3442,  762, 4511,    0,
-     4511, 3459, 4511, 3406, 3434,    0,  562,  167, 3393, 3370,
-     4511, 4511,  326, 4511,  420,    0, 4511, 3418, 3402, 3366,
-     3342,    0, 4511, 3368, 4511, 3317,  444, 3314, 4511,  471,
-     4511, 3354, 3271, 3337,  572,  189, 3295, 3285, 4511, 3332,
-     4511, 3307, 3303,  585,  594, 4511,  746,  734,  744,  754,
+      169,  238,  440,  754, 3701, 4538,  325, 4538, 3677,    0,
+      446, 4538, 3672,  430,  827, 3646,    0, 4538,  758, 4538,
+     3632, 4538,  453, 3607, 4538, 4538, 3620, 3606,  129,  746,
+      445,  766, 4538, 3625,  198, 3562, 4538, 4538, 4538, 3562,
+        0, 3560,  214,    0, 3508, 3505,    0, 4538, 3554, 4538,
+
+      420,  119, 3502, 3495, 3465,    0, 3546, 4538, 3535, 4538,
+      482, 3532, 3526, 4538, 3471,    0, 4538, 4538, 4538, 3494,
+     4538,  598, 4538, 4538, 4538, 3489, 4538,  754, 4538, 3466,
+      759,  180, 4538, 4538, 3484,    0, 3451,  762, 4538,    0,
+     4538, 3470, 4538, 3398, 3435,    0,  562,  167, 3394, 3391,
+     4538, 4538,  326, 4538,  420,    0, 4538, 3421, 3380, 3344,
+     3341,    0, 4538, 3381, 4538, 3329,  444, 3322, 4538,  471,
+     4538, 3372, 3283, 3348,  572,  189, 3284, 3281, 4538, 3333,
+     4538, 3329, 3324,  585,  594, 4538,  746,  734,  744,  754,
       763,  770,    0,  755,  748,  763,  818,  789,  240,  822,
 
-      762,  381,  802,  791,  813,  824,  577, 4511, 4511, 3302,
-      871,    0, 4511, 3302, 3250, 3231, 4511, 4511, 4511, 4511,
-     4511, 4511, 4511, 4511, 4511, 4511, 4511,    0, 4511, 3279,
-     4511, 4511, 4511, 3276, 3260, 3259,    0, 3221, 3214,    0,
-     3264, 4511,  835, 4511, 3262,    0,  903, 4511, 3257,  842,
+      762,  381,  802,  791,  813,  824,  577, 4538, 4538, 3307,
+      871,    0, 4538, 3306, 3253, 3250, 4538, 4538, 4538, 4538,
+     4538, 4538, 4538, 4538, 4538, 4538, 4538,    0, 4538, 3301,
+     4538, 4538, 4538, 3298, 3278, 3276,    0, 3239, 3232,    0,
+     3268, 4538,  835, 4538, 3247,    0,  903, 4538, 3244,  842,
       817,    0,    0,  910,  914,  918,  922,    0,  814,    0,
-      457, 4511,    0,  943, 4511, 3241, 3141,  483, 4511, 3217,
-     3212, 4511,  826,  556,  903,  930, 4511,  757,    0, 3134,
-     3131, 4511, 3129,  964, 4511, 3190, 3110, 3174, 3161, 4511,
-        0, 4511,  896, 4511,    0, 3172,    0,    0,    0, 4511,
-
-     4511,    0, 4511,  910,  913, 4511, 4511,  602,    0, 3169,
-     4511,  957, 3164, 3161, 3127, 4511,    0, 4511,  976, 4511,
-     1020, 4511, 4511, 4511, 4511,    0, 4511, 3116,    0, 4511,
-        0,  926,  930,  644, 4511,  662,    0, 4511, 4511,    0,
-     4511, 4511, 3071, 3121,  794, 3037, 4511,    0,  934,  932,
-     3117, 4511, 3091, 4511,  938,  939,    0,  940,  738,  956,
-      802, 3059,  876,  978,  933,  933,  939,  948,  964, 1030,
-      938,  958,  976,  968,    0,  996, 4511,  999, 1057, 1068,
-      981, 1079, 1077, 1080, 1074, 1068, 1070, 1120, 3062, 4511,
-     1014,    0, 4511, 4511, 4511,    0, 4511, 4511, 4511, 4511,
-
-        0, 4511, 4511,    0, 1078,    0,    0, 1153, 4511, 3063,
-     1166, 1077, 1076, 1091,    0, 1089,    0, 1018, 4511, 1022,
-     4511, 1025, 4511, 1035, 4511, 1091, 1067, 1138, 1162, 1242,
-     1177, 1308, 1105,    0, 4511, 4511, 2954, 1198, 4511, 4511,
-     1144,    0, 1137,    0,    0, 1161, 1156, 1123, 4511, 1202,
-     1308, 1309, 1310, 1319, 3013, 1312, 1311, 1327, 1320, 1321,
-     1323, 1382, 4511, 1172, 1166, 2589, 2537,    0, 1178, 1169,
+      457, 4538,    0,  943, 4538, 3243, 3163,  483, 4538, 3239,
+     3233, 4538,  826,  556,  903,  930, 4538,  757,    0, 3136,
+     3135, 4538, 3130,  964, 4538, 3209, 3119, 3185, 3169, 4538,
+        0, 4538,  896, 4538,    0, 3189,    0,    0,    0, 4538,
+
+     4538,    0, 4538,  910,  913, 4538, 4538,  602,    0, 3154,
+     4538,  957, 3151, 3149, 3149, 4538,    0, 4538,  976, 4538,
+     1020, 4538, 4538, 4538, 4538,    0, 4538, 3138,    0, 4538,
+        0,  926,  930,  644, 4538,  662,    0, 4538, 4538,    0,
+     4538, 4538, 3092, 3121,  794, 3016, 4538,    0,  934,  932,
+     3093, 4538, 3087, 4538,  938,  939,    0,  940,  738,  956,
+      802, 3051,  876,  978,  933,  933,  939,  948,  964, 1030,
+      938,  958,  976,  968,    0,  996, 4538,  999, 1057, 1068,
+      981, 1079, 1077, 1080, 1074, 1068, 1070, 1120, 3057, 4538,
+     1014,    0, 4538, 4538, 4538,    0, 4538, 4538, 4538, 4538,
+
+        0, 4538, 4538,    0, 1078,    0,    0, 1153, 4538, 2616,
+     1166, 1077, 1076, 1091,    0, 1089,    0, 1018, 4538, 1022,
+     4538, 1025, 4538, 1035, 4538, 1091, 1067, 1138, 1162, 1242,
+     1177, 1308, 1105,    0, 4538, 4538, 2525, 1198, 4538, 4538,
+     1144,    0, 1137,    0,    0, 1161, 1156, 1123, 4538, 1202,
+     1308, 1309, 1310, 1319, 2580, 1312, 1311, 1327, 1320, 1321,
+     1323, 1382, 4538, 1172, 1166, 2599, 2545,    0, 1178, 1169,
      1169, 1298, 1315, 1324, 1330, 1321, 1330, 1323,    0, 1341,
-     1332, 1348,    0, 1346, 1350, 1348, 1361, 1350, 1367, 2573,
+     1332, 1348,    0, 1346, 1350, 1348, 1361, 1350, 1367, 2579,
      1370, 1366, 1380, 1382, 1382, 1385, 1378, 1387, 1391, 1400,
 
      1393, 1403, 1406, 1414, 1400, 1401, 1404, 1429, 1419, 1424,
      1428, 1425, 1436, 1435, 1430, 1441, 1442, 1432, 1432, 1450,
-     1209, 1508, 4511, 1215, 1512, 1219, 1461, 1455, 1451,    0,
-     1143,    0, 1461, 1534, 1600, 1636,  204, 2525, 1606, 1681,
-     4511, 4511, 1453, 1463, 1591, 1442, 2524, 1599, 1604, 1600,
+     1209, 1508, 4538, 1215, 1512, 1219, 1461, 1455, 1451,    0,
+     1143,    0, 1461, 1534, 1600, 1636,  204, 2535, 1606, 1681,
+     4538, 4538, 1453, 1463, 1591, 1442, 2484, 1599, 1604, 1600,
      1607, 1605, 1611, 1608, 1650, 1620, 1606, 1614, 1613, 1654,
      1663, 1652, 1661, 1666, 1682, 1664, 1693, 1694, 1655, 1674,
-     1662, 1675, 4511, 4511, 1683, 1676, 1677, 1683, 1697, 1692,
+     1662, 1675, 4538, 4538, 1683, 1676, 1677, 1683, 1697, 1692,
      1731, 1711, 1702, 1718,    0,    0, 1719, 1706, 1716, 1735,
-        0,    0, 2553, 1722, 1732, 2540, 1725, 1722, 1733,    0,
+        0,    0, 2448, 1722, 1732, 2440, 1725, 1722, 1733,    0,
 
      1727, 1747, 1740, 1739, 1735, 1752, 1739, 1740, 1746,    0,
      1750, 1763, 1760, 1750, 1752, 1759, 1777, 1762, 1778, 1769,
-     1783, 1778, 2514, 4511, 1224, 1230, 1772, 1783, 1780,    0,
-     1507, 1234, 2364,  732, 2273, 1809, 1845, 1430, 1076, 1585,
-     1797, 2286, 1785, 1807, 4511, 1811, 1814, 1829, 1835, 1821,
+     1783, 1778, 2403, 4538, 1224, 1230, 1772, 1783, 1780,    0,
+     1507, 1234, 2300,  732, 2235, 1809, 1845, 1430, 1076, 1585,
+     1797, 2259, 1785, 1807, 4538, 1811, 1814, 1829, 1835, 1821,
      1808, 1822, 1845, 1859, 1860, 1862, 1868, 1869, 1870, 1825,
      1888, 1890, 1876, 1891, 1874, 1902, 1894, 1898, 1795, 1891,
-     1882, 1899,    0, 1887,    0, 1892,    0, 2260, 1900, 1891,
-     1909,    0, 1904, 2253, 1902,    0, 1916, 1907, 1918, 2227,
-     1912, 1909, 1924, 2201, 1908, 1918, 1922,    0, 1934, 1925,
-
-     1931, 1947,    0, 1936, 1942, 1941, 1953, 2103, 1957, 1958,
-     1952, 2085, 1950, 1951, 1950, 1969, 1956, 2133, 1515, 1961,
-     1971, 2002, 4511, 2117, 2038, 1981, 1592, 1842, 2025, 1983,
+     1882, 1899,    0, 1887,    0, 1892,    0, 2234, 1900, 1891,
+     1909,    0, 1904, 2215, 1902,    0, 1916, 1907, 1918, 2202,
+     1912, 1909, 1924, 2158, 1908, 1918, 1922,    0, 1934, 1925,
+
+     1931, 1947,    0, 1936, 1942, 1941, 1953, 2099, 1957, 1958,
+     1952, 2095, 1950, 1951, 1950, 1969, 1956, 2127, 1515, 1961,
+     1971, 2002, 4538, 2117, 2038, 1981, 1592, 1842, 2025, 1983,
         0,    0, 1972, 1990, 1999, 1987, 1994, 2008, 2005, 2007,
      2015, 2023, 2016, 2021, 2017, 2024, 2022, 2026, 2030, 2029,
-     2037, 2035, 2045, 2051, 2054, 2061,    0,    0, 4511, 4511,
+     2037, 2035, 2045, 2051, 2054, 2061,    0,    0, 4538, 4538,
      1922,    0, 2049, 2039, 2050, 2053, 2051, 2051, 2054, 1831,
      2073, 2064, 2077, 2073, 2081, 2082, 2072, 2085,    0, 2091,
-        0, 2074,    0, 1824,    0, 2091, 2094, 2082,    0, 2116,
-     2088,    0, 2092, 2133,    0, 1728, 2097, 2095, 1714, 1678,
-
-     4511, 2135, 4511, 2096, 4511, 1726, 4511, 1703, 1612, 1601,
-     1514, 1500, 1477, 1377, 1373, 1333, 1274, 1203, 2133, 2128,
-     2148, 2151, 2144, 2150, 2156, 2158, 2161, 2163, 2184, 2167,
-     2164, 2157, 2151, 2159, 2158, 2173,    0, 2165,    0, 2166,
-     2182, 2173, 2179, 2178, 2186,    0, 2185,    0, 2187, 2193,
-        0, 2202,    0,    0,    0, 2204, 2187, 2201, 2224, 2200,
-     2222, 2213, 2219, 2230, 2199, 2227, 2239, 2222, 2225, 1162,
-     1158, 2228, 2278, 4511, 1112, 1109, 1081, 1063, 1057,  984,
-      976,  969,  923,  913,  910,  931,  895,  891,  887,  881,
-      874,  856,  848,  843,  840,  804,  788, 2259, 2248, 2258,
-
-     2265, 2264, 2241,    0, 2254, 2265, 2268, 2279,    0, 2262,
-     2268, 2271, 2266, 2278, 2283, 2289, 2273, 4511, 2280, 2281,
-     2281, 2300, 2283, 2281,    0, 2303, 2307, 2292, 4511, 2302,
-     2304, 2319, 2303, 2307, 2309, 2328, 2309, 2357, 4511, 2362,
-     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
-     4511,  746,  725,  597,  577,  441,  426,  420,  267,  253,
-      247,  230,  183,  181, 2317, 2338, 2342, 2330, 2336, 2343,
-     2339, 2331, 2334, 2350, 2341, 2345,    0, 2350, 2346, 2344,
-     2349, 2361, 2364, 2367, 2359, 4511, 2357,    0, 2358, 2362,
-     2379, 2383, 2375, 4511, 2388, 2375, 2382, 2377, 2389, 4511,
-
-     4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511, 4511,
-     4511,  122, 2399, 2398, 2382, 2391, 2391,    0, 2407, 2408,
-        0, 2397, 2398, 2420, 2417, 2414, 2418, 2426, 4511, 2414,
-     4511, 4511, 4511, 2422, 2429, 2419, 4511, 4511, 2417, 2437,
-     2435, 2425, 2428, 2428, 4511, 2431, 2445, 2445, 2447, 2452,
-        0,    0, 2461,    0, 2444,    0, 2459, 4511, 4511, 2452,
-     4511, 4511, 2454, 2465, 2452, 2467, 2471, 2470, 2476, 2481,
-        0, 2468, 2465, 2465, 2485,    0, 2465, 4511, 4511, 4511,
-     2489, 2491, 2479, 2488, 4511, 2501, 2491, 2498, 2503, 2490,
-        0, 4511, 2497, 4511, 2510, 2500, 2502, 2500,    0, 2514,
-
-     4511, 4511, 2516,    0, 2523, 2508, 2509,    0, 2528, 2531,
-        0,    0, 4511, 2593, 2614, 2635, 2656, 2677, 2698, 2719,
-     2740, 2761, 2782, 2803, 2824, 2845, 2866, 2887, 2908, 2929,
-     2950, 2971, 2992, 3013, 3025, 3044, 3055, 3074, 3095, 3108,
-     3127, 3148, 3169, 3190, 3202, 3221, 3242, 3263, 3280, 3292,
-     3311, 3332, 3353, 3374, 3395, 3408, 2553, 3423, 3444, 3463,
-     3484, 3505, 3517, 3536, 3557, 2569, 3057, 3578, 3590, 3609,
-     3630, 3651, 2558, 3663, 3684, 3705, 3726, 3747, 3768, 3789,
-     3810, 3831, 3843, 3862, 3879, 3891, 3910, 3931, 3952, 3973,
-     3994, 4007, 4022, 4043, 4062, 4083, 4104, 4125, 4146, 4167,
+        0, 2074,    0, 1824,    0, 2091, 2094, 2082,    0, 2128,
+     2090,    0, 2093, 2141,    0, 1728, 2100, 2095, 1714, 1678,
 
-     4179, 4189, 4208, 4229, 4250, 2561, 4262, 4283, 4304, 4325,
-     4346, 4367, 3028, 4379, 4398, 4419, 4432, 4447, 4468, 4489
+     4538, 2135, 4538, 2102, 4538, 1726, 4538, 1703, 1612, 1601,
+     1514, 1500, 1477, 1377, 1373, 1333, 1274, 1203, 2132, 2128,
+     2158, 2125, 2146, 2159, 2161, 2164, 2172, 2176, 2182, 2188,
+     2155, 2156, 2167, 2175, 2174, 2183,    0, 2181,    0, 2176,
+     2192, 2182, 2187, 2186, 2193,    0, 2193,    0, 2195, 2198,
+        0, 2210,    0,    0,    0, 2198, 2210, 2194, 2205, 2243,
+     2203, 2221, 2221, 2223, 2226, 2239, 2226, 2237, 2245, 2238,
+     2241, 1162, 1158, 2243, 2294, 4538, 1112, 1109, 1081, 1063,
+     1057,  984,  976,  969,  923,  913,  910,  931,  895,  891,
+      887,  881,  874,  856,  848,  843,  840,  804,  788, 2273,
+
+     2259, 2266, 2273, 2272, 2244,    0, 2264, 2274, 2277, 2289,
+        0, 2275, 2282, 2285, 2280, 2292, 2297, 2292, 2306, 2291,
+     4538, 2295, 2298, 2299, 2314, 2297, 2294,    0, 2316, 2309,
+     2321, 2305, 4538, 2312, 2315, 2332, 2315, 2316, 2318, 2339,
+     2323, 2372, 4538, 2379, 4538, 4538, 4538, 4538, 4538, 4538,
+     4538, 4538, 4538, 4538, 4538,  746,  725,  597,  577,  441,
+      426,  420,  267,  253,  247,  230,  183,  181, 2332, 2355,
+     2360, 2348, 2358, 2363, 2357, 2351, 2354, 2365, 2357, 2360,
+        0, 2365, 2361, 2359, 2361, 2365, 2377, 2380, 2383, 2376,
+     4538, 2370,    0, 2372, 2373, 2377, 2391, 2398, 2393, 4538,
+
+     2409, 2393, 2396, 2400, 2424, 4538, 4538, 4538, 4538, 4538,
+     4538, 4538, 4538, 4538, 4538, 4538, 4538,  122, 2422, 2421,
+     2410, 2413, 2413,    0, 2429, 2431,    0, 2420, 2419, 2440,
+     2438, 2435, 2432, 2440, 2447, 4538, 2437, 4538, 4538, 4538,
+     2439, 2446, 2453, 2442, 4538, 4538, 2440, 2462, 2459, 2449,
+     2452, 2452, 4538, 2458, 2474, 2471, 2476, 2478,    0,    0,
+     2487,    0, 2470,    0, 2485, 2478, 4538, 4538, 2479, 2482,
+     4538, 4538, 2482, 2495, 2482, 2497, 2499, 2497, 2502, 2507,
+        0, 2496, 2493, 2492, 2513,    0, 2495, 4538, 4538, 4538,
+     4538, 4538, 2518, 2520, 2509, 2515, 4538, 2529, 2521, 2530,
+
+     2535, 2524,    0, 4538, 2527, 4538, 2540, 2530, 2532, 2530,
+        0, 2539, 4538, 4538, 2545,    0, 2551, 2536, 2538,    0,
+     2556, 2558,    0,    0, 4538, 2620, 2641, 2662, 2683, 2704,
+     2725, 2746, 2767, 2788, 2809, 2830, 2851, 2872, 2893, 2914,
+     2935, 2956, 2977, 2998, 3019, 3040, 3052, 3071, 3082, 3101,
+     3122, 3135, 3154, 3175, 3196, 3217, 3229, 3248, 3269, 3290,
+     3307, 3319, 3338, 3359, 3380, 3401, 3422, 3435, 2127, 3450,
+     3471, 3490, 3511, 3532, 3544, 3563, 3584, 2579, 3084, 3605,
+     3617, 3636, 3657, 3678, 2598, 3690, 3711, 3732, 3753, 3774,
+     3795, 3816, 3837, 3858, 3870, 3889, 3906, 3918, 3937, 3958,
+
+     3979, 4000, 4021, 4034, 4049, 4070, 4089, 4110, 4131, 4152,
+     4173, 4194, 4206, 4216, 4235, 4256, 4277, 2603, 4289, 4310,
+     4331, 4352, 4373, 4394, 3055, 4406, 4425, 4446, 4459, 4474,
+     4495, 4516
     } ;
 
-static const flex_int16_t yy_def[1221] =
+static const flex_int16_t yy_def[1233] =
     {   0,
-     1113, 1113, 1114, 1114, 1115, 1116, 1117, 1117, 1118, 1118,
-     1119, 1119, 1113,   13, 1120, 1120, 1121, 1121, 1122, 1122,
-     1123, 1123, 1124, 1124, 1113,   25, 1125, 1125, 1126, 1126,
-     1127, 1127, 1128, 1128, 1113,   35, 1129, 1129, 1130, 1130,
-     1120, 1120, 1120, 1120, 1131, 1131, 1132, 1132, 1126, 1126,
-     1133, 1133, 1134, 1134, 1113, 1113, 1113, 1113, 1113, 1135,
-     1113, 1113, 1113, 1113, 1136, 1113, 1137, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1138, 1139,
-     1140, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1141, 1113, 1141, 1142, 1113, 1113, 1143, 1113, 1143, 1113,
-
-     1143, 1143, 1113, 1113, 1113, 1144, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1145, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1139, 1113, 1113,
-     1139, 1146, 1113, 1113, 1113, 1147, 1113, 1139, 1113, 1148,
-     1113, 1148, 1113, 1149, 1113, 1150, 1150, 1150, 1113, 1113,
-     1113, 1113, 1151, 1113, 1151, 1152, 1113, 1152, 1113, 1113,
-     1113, 1153, 1113, 1153, 1113, 1113, 1154, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1113, 1113, 1155, 1113, 1113, 1113, 1156, 1156, 1156, 1156,
-     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1157, 1156, 1156,
-
-     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1113, 1113, 1158,
-     1113, 1159, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1160, 1113, 1160,
-     1113, 1113, 1113, 1113, 1113, 1113, 1161, 1113, 1113, 1162,
-     1162, 1113, 1113, 1113, 1113, 1163, 1113, 1113, 1113, 1113,
-     1113, 1164, 1165, 1113, 1113, 1113, 1113, 1166, 1164, 1167,
-     1168, 1113, 1169, 1113, 1113, 1113, 1113, 1170, 1113, 1113,
-     1113, 1113, 1113, 1171, 1171, 1172, 1113, 1113, 1173, 1113,
-     1113, 1113, 1174, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1175, 1113, 1113, 1113, 1176, 1113, 1177, 1178, 1179, 1113,
-
-     1113, 1180, 1113, 1180, 1180, 1113, 1113, 1181, 1182, 1113,
-     1113, 1113, 1113, 1113, 1113, 1113, 1183, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1184, 1113, 1113, 1185, 1113,
-     1186, 1186, 1186, 1187, 1113, 1187, 1188, 1113, 1113, 1189,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1190, 1113, 1113,
-     1113, 1113, 1191, 1113, 1113, 1113, 1192, 1192, 1192, 1192,
-     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
-     1192, 1192, 1192, 1192, 1192, 1192, 1113, 1192, 1192, 1192,
-     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1193, 1113,
-     1113, 1194, 1113, 1113, 1113, 1195, 1113, 1113, 1113, 1113,
-
-     1196, 1113, 1113, 1197, 1113, 1198, 1199, 1200, 1113, 1113,
-     1113, 1113, 1113, 1113, 1201, 1198, 1202, 1203, 1113, 1203,
-     1113, 1204, 1113, 1204, 1113, 1113, 1205, 1205, 1205, 1113,
-     1205, 1205, 1113, 1206, 1113, 1113, 1207, 1113, 1113, 1113,
-     1113, 1208, 1113, 1209, 1210, 1211, 1211, 1212, 1113, 1212,
-     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
-     1213, 1213, 1113, 1214, 1214, 1113, 1215, 1216, 1113, 1113,
-     1113, 1113, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
-     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
-     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
-
-     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
-     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1113, 1113,
-     1200, 1200, 1113, 1200, 1200, 1113, 1113, 1113, 1113, 1201,
-     1218, 1202, 1113, 1113, 1205,  432,  430,  430, 1205,  432,
-     1113, 1113, 1113, 1113, 1211, 1211, 1113, 1213, 1213, 1213,
-     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
-     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1214, 1214,
-     1113, 1113, 1113, 1113, 1217, 1217, 1217, 1217, 1217, 1217,
-     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
-     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
-
-     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
-     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1113,
-     1113, 1113, 1113, 1113, 1200, 1200, 1113, 1113, 1113, 1218,
-     1218, 1218, 1113,  534,  534, 1205,  432, 1205, 1205, 1205,
-     1113, 1113, 1211, 1211, 1113, 1213, 1213, 1213, 1213, 1213,
-     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
-     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1214, 1214,
-     1113, 1113, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
-     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
-     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
-
-     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
-     1217, 1217, 1217, 1113, 1113, 1113, 1113, 1113, 1219, 1113,
-     1113, 1218, 1113, 1218, 1113, 1205, 1205, 1205, 1113, 1113,
-     1211, 1211, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
-     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
-     1213, 1213, 1213, 1213, 1213, 1213, 1214, 1214, 1113, 1113,
-     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
-     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
-     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1113,
-     1217, 1217, 1217, 1113, 1217, 1113, 1113, 1113, 1113, 1219,
+     1125, 1125, 1126, 1126, 1127, 1128, 1129, 1129, 1130, 1130,
+     1131, 1131, 1125,   13, 1132, 1132, 1133, 1133, 1134, 1134,
+     1135, 1135, 1136, 1136, 1125,   25, 1137, 1137, 1138, 1138,
+     1139, 1139, 1140, 1140, 1125,   35, 1141, 1141, 1142, 1142,
+     1132, 1132, 1132, 1132, 1143, 1143, 1144, 1144, 1138, 1138,
+     1145, 1145, 1146, 1146, 1125, 1125, 1125, 1125, 1125, 1147,
+     1125, 1125, 1125, 1125, 1148, 1125, 1149, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1150, 1151,
+     1152, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
+     1153, 1125, 1153, 1154, 1125, 1125, 1155, 1125, 1155, 1125,
+
+     1155, 1155, 1125, 1125, 1125, 1156, 1125, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1157, 1125, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1151, 1125, 1125,
+     1151, 1158, 1125, 1125, 1125, 1159, 1125, 1151, 1125, 1160,
+     1125, 1160, 1125, 1161, 1125, 1162, 1162, 1162, 1125, 1125,
+     1125, 1125, 1163, 1125, 1163, 1164, 1125, 1164, 1125, 1125,
+     1125, 1165, 1125, 1165, 1125, 1125, 1166, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125, 1167, 1125, 1125, 1125, 1168, 1168, 1168, 1168,
+     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1169, 1168, 1168,
 
-     1113, 1219, 1113, 1113, 1113, 1113, 1113, 1213, 1213, 1213,
-     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
-     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
-     1213, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
-     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
-     1217, 1217, 1217, 1217, 1217, 1113, 1113, 1113, 1113, 1113,
-     1113, 1217, 1217, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1113, 1113, 1220, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1213, 1213, 1213, 1213, 1213,
-     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1217, 1217,
+     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1125, 1125, 1170,
+     1125, 1171, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1172, 1125, 1172,
+     1125, 1125, 1125, 1125, 1125, 1125, 1173, 1125, 1125, 1174,
+     1174, 1125, 1125, 1125, 1125, 1175, 1125, 1125, 1125, 1125,
+     1125, 1176, 1177, 1125, 1125, 1125, 1125, 1178, 1176, 1179,
+     1180, 1125, 1181, 1125, 1125, 1125, 1125, 1182, 1125, 1125,
+     1125, 1125, 1125, 1183, 1183, 1184, 1125, 1125, 1185, 1125,
+     1125, 1125, 1186, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
+     1187, 1125, 1125, 1125, 1188, 1125, 1189, 1190, 1191, 1125,
+
+     1125, 1192, 1125, 1192, 1192, 1125, 1125, 1193, 1194, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1195, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1196, 1125, 1125, 1197, 1125,
+     1198, 1198, 1198, 1199, 1125, 1199, 1200, 1125, 1125, 1201,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1202, 1125, 1125,
+     1125, 1125, 1203, 1125, 1125, 1125, 1204, 1204, 1204, 1204,
+     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
+     1204, 1204, 1204, 1204, 1204, 1204, 1125, 1204, 1204, 1204,
+     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1205, 1125,
+     1125, 1206, 1125, 1125, 1125, 1207, 1125, 1125, 1125, 1125,
+
+     1208, 1125, 1125, 1209, 1125, 1210, 1211, 1212, 1125, 1125,
+     1125, 1125, 1125, 1125, 1213, 1210, 1214, 1215, 1125, 1215,
+     1125, 1216, 1125, 1216, 1125, 1125, 1217, 1217, 1217, 1125,
+     1217, 1217, 1125, 1218, 1125, 1125, 1219, 1125, 1125, 1125,
+     1125, 1220, 1125, 1221, 1222, 1223, 1223, 1224, 1125, 1224,
+     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
+     1225, 1225, 1125, 1226, 1226, 1125, 1227, 1228, 1125, 1125,
+     1125, 1125, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
+     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
+     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
+
+     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
+     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1125, 1125,
+     1212, 1212, 1125, 1212, 1212, 1125, 1125, 1125, 1125, 1213,
+     1230, 1214, 1125, 1125, 1217,  432,  430,  430, 1217,  432,
+     1125, 1125, 1125, 1125, 1223, 1223, 1125, 1225, 1225, 1225,
+     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
+     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1226, 1226,
+     1125, 1125, 1125, 1125, 1229, 1229, 1229, 1229, 1229, 1229,
+     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
+     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
+
+     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
+     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1125,
+     1125, 1125, 1125, 1125, 1212, 1212, 1125, 1125, 1125, 1230,
+     1230, 1230, 1125,  534,  534, 1217,  432, 1217, 1217, 1217,
+     1125, 1125, 1223, 1223, 1125, 1225, 1225, 1225, 1225, 1225,
+     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
+     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1226, 1226,
+     1125, 1125, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
+     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
+     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
+
+     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
+     1229, 1229, 1229, 1125, 1125, 1125, 1125, 1125, 1231, 1125,
+     1125, 1230, 1125, 1230, 1125, 1217, 1217, 1217, 1125, 1125,
+     1223, 1223, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
+     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
+     1225, 1225, 1225, 1225, 1225, 1225, 1226, 1226, 1125, 1125,
+     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
+     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
+     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1125,
+     1229, 1229, 1229, 1125, 1229, 1125, 1125, 1125, 1125, 1231,
+
+     1125, 1231, 1125, 1125, 1125, 1125, 1125, 1225, 1225, 1225,
+     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
+     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
+     1225, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
+     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
+     1229, 1229, 1229, 1229, 1229, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125, 1229, 1229, 1125, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1232, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1225, 1225, 1225,
+     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
+
+     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
+     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1229, 1229, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
+     1125, 1232, 1125, 1232, 1125, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1225, 1229, 1229,
+     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
+     1229, 1229, 1229, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125, 1229, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
 
-     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
-     1217, 1217, 1217, 1217, 1217, 1113, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1217, 1217, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1220, 1113, 1220,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1213, 1217, 1217, 1217, 1217, 1217, 1217,
-     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1113,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1217, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1113, 1113, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
-     1217, 1217, 1217, 1217, 1217, 1217, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1217, 1217, 1217, 1217, 1217,
-     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1217,
-     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1217, 1217, 1217, 1217, 1217,
-     1217, 1113, 1113, 1113, 1113, 1217, 1217, 1217, 1217, 1217,
-
-     1113, 1113, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
-     1217, 1217,    0, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1229, 1229,
+     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
+     1229, 1229, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125, 1125, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
+     1229, 1229, 1229, 1229, 1229, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1229,
+     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1229, 1229, 1229,
+
+     1229, 1229, 1229, 1125, 1125, 1125, 1125, 1229, 1229, 1229,
+     1229, 1229, 1125, 1125, 1229, 1229, 1229, 1229, 1229, 1229,
+     1229, 1229, 1229, 1229,    0, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
 
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125
     } ;
 
-static const flex_int16_t yy_nxt[4596] =
+static const flex_int16_t yy_nxt[4623] =
     {   0,
        56,   57,   58,   56,   59,   56,   56,   56,   56,   56,
        56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
@@ -829,24 +832,24 @@ static const flex_int16_t yy_nxt[4596] =
        67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
        67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
        67,   67,   67,   67,   67,   56,   56,   56,   69,   70,
-      305,   71,   72,   89,   73,   90, 1045,   74,   75,   76,
+      305,   71,   72,   89,   73,   90, 1053,   74,   75,   76,
        76,  275,  276,   76,   77,   92,   89,   95,   90,   96,
        78,   56,   93,   76,   95,  323,   96,  107,  108,  305,
 
-      109,  107,  108, 1012,  109,  125,  291,  126,  127,  154,
+      109,  107,  108, 1018,  109,  125,  291,  126,  127,  154,
       154,  155,  155,  119,  125,  120,  126,  127,  333,   79,
        80,  238,   98,  239,   99,  121,  638,   56,  100,  122,
-      122,  122,  122,   98,  323,   99,  157, 1011,  158,  105,
+      122,  122,  122,   98,  323,   99,  157, 1017,  158,  105,
       350,  130,  131,  233,  132,  234,  159,  333,   81,   76,
        76,   82,   83,  235,   84,   72,  128,   73,   85,  427,
        74,   75,   76,   76,  101,  128,   76,   77,  134,  350,
       135,  102,  103,   86,  104,  101,   76,  130,  131,  292,
-      132,  136,  102,  103, 1010,  104,  160,  378,  161,  229,
+      132,  136,  102,  103, 1016,  104,  160,  378,  161,  229,
       238,  230,  239,  101,  123,  297,  209,  298,  231,  210,
 
-      102, 1009,   79,   80,  101,   87,  209, 1008,  229,  210,
+      102, 1015,   79,   80,  101,   87,  209, 1014,  229,  210,
       230,  102,  211,  211,  211,  211,  378,  231,  137,  138,
-      139, 1007,  211,  211,  211,  211,  243,  244,  335,  245,
+      139, 1013,  211,  211,  211,  211,  243,  244,  335,  245,
       336,   81,   76,   76,  110,  111,  112,  110,  113,  110,
       110,  110,  110,  110,  110,  110,  114,  110,  114,  110,
       110,  110,  110,  110,  110,  110,  110,  110,  110,  115,
@@ -862,9 +865,9 @@ static const flex_int16_t yy_nxt[4596] =
       164,  165,  163,  233,  241,  234,  343,  247,  248,  242,
       249,  304,  225,  235,  269,  269,  383,  270,  280,  419,
       281,  420,  226,  282,  282,  282,  282,  227,  251,  137,
-      138,  139,  345,  160, 1006,  161,  166,  167,  168,  346,
-     1005,  304,  225,  312,  313,  423,  314,  424,  166,  167,
-      168,  226,  166,  167,  168, 1004,  227,  344,  251,  123,
+      138,  139,  345,  160, 1012,  161,  166,  167,  168,  346,
+     1011,  304,  225,  312,  313,  423,  314,  424,  166,  167,
+      168,  226,  166,  167,  168, 1010,  227,  344,  251,  123,
 
       140,  140,  141,  140,  142,  143,  140,  140,  140,  144,
       140,  140,  140,  140,  140,  140,  140,  145,  140,  140,
@@ -880,9 +883,9 @@ static const flex_int16_t yy_nxt[4596] =
       174,  220,  220,  349,  449,  174,  450,  236,  428,  429,
       157,  225,  158,  355,  221,  221,  319,  319,  319,  319,
       236,  226,  356,  332,  222,  222,  227,  175,  388,  223,
-      223, 1003,  175,  349,  176,  177,  215,  178,  216,  176,
+      223, 1009,  175,  349,  176,  177,  215,  178,  216,  176,
       177,  225,  178,  355,  221,  221,  335,  160,  336,  161,
-      226, 1002,  356,  222,  222,  227,  175,  388,  223,  223,
+      226, 1008,  356,  222,  222,  227,  175,  388,  223,  223,
       160,  175,  161,  176,  335,  217,  336,  218,  176,  179,
       180,  181,  179,  182,  183,  179,  179,  179,  179,  179,
       179,  179,  179,  179,  179,  179,  179,  179,  184,  185,
@@ -895,36 +898,36 @@ static const flex_int16_t yy_nxt[4596] =
       199,  200,  201,  202,  203,  204,  205,  206,  193,  207,
       179,  179,  179,  213,  726,  214,  163,  362,  241,  264,
       265,  360,  266,  242,  278,  278,  267,  284,  285,  361,
-      286,  363,  278,  278,  287,  433,  433,  278,  278, 1001,
+      286,  363,  278,  278,  287,  433,  433,  278,  278, 1007,
       278,  278,  475,  288,  358,  364,  369,  427,  370,  289,
       359,  360,  365,  382,  371,  345,  279,  367,  372,  361,
 
-     1000,  363,  346,  215,  279,  216,  166,  167,  168,  279,
-      963,  475,  279,  366,  358,  364,  369,  368,  370,  359,
-      376,  290,  365,  382,  371,  279,  962,  367,  372,  384,
+     1006,  363,  346,  215,  279,  216,  166,  167,  168,  279,
+      967,  475,  279,  366,  358,  364,  369,  368,  370,  359,
+      376,  290,  365,  382,  371,  279,  966,  367,  372,  384,
       377,  385,  217,  279,  218,  253,  243,  244,  279,  245,
       268,  279,  366,  250,  386,  373,  368,  478,  268,  374,
       376,  387,  405,  379,  254,  416,  255,  426,  255,  384,
-      377,  385,  961,  380,  255,  960,  381,  255,  256,  257,
-      959,  255,  258,  259,  386,  373,  478,  260,  958,  374,
+      377,  385,  965,  380,  255,  964,  381,  255,  256,  257,
+      963,  255,  258,  259,  386,  373,  478,  260,  962,  374,
       251,  387,  405,  379,  254,  416,  255,  426,  255,  391,
-      391,  391,  391,  380,  255,  381,  957,  255,  256,  257,
+      391,  391,  391,  380,  255,  381,  961,  255,  256,  257,
 
-      255,  258,  259,  956,  247,  248,  260,  249,  261,  955,
-      251,  408,  409,  954,  410,  408,  409,  953,  410,  408,
+      255,  258,  259,  960,  247,  248,  260,  249,  261,  959,
+      251,  408,  409,  958,  410,  408,  409,  957,  410,  408,
       409,  480,  410,  408,  409,  430,  410,  443,  411,  411,
       411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
       411,  411,  411,  411,  264,  265,  446,  266,  431,  431,
-      480,  267,  447,  952,  412,  428,  429,  443,  312,  313,
-      413,  314,  464,  414,  951,  284,  285,  950,  286,  465,
-      469,  470,  287,  471,  472,  473,  446,  949,  483,  484,
+      480,  267,  447,  956,  412,  428,  429,  443,  312,  313,
+      413,  314,  464,  414,  955,  284,  285,  954,  286,  465,
+      469,  470,  287,  471,  472,  473,  446,  953,  483,  484,
       432,  288,  447,  412,  485,  476,  486,  289,  490,  474,
       413,  487,  464,  414,  319,  319,  319,  319,  491,  465,
 
       469,  470,  477,  471,  472,  473,  481,  483,  484,  432,
       482,  492,  499,  485,  493,  476,  486,  490,  474,  290,
-      419,  487,  420,  948,  419,  268,  420,  423,  491,  424,
-      947,  477,  391,  391,  391,  391,  481,  423,  946,  424,
+      419,  487,  420,  952,  419,  268,  420,  423,  491,  424,
+      951,  477,  391,  391,  391,  391,  481,  423,  950,  424,
       482,  492,  499,  493,  494,  495,  268,  451,  452,  453,
       454,  455,  455,  456,  455,  455,  455,  455,  457,  455,
       455,  455,  458,  455,  455,  459,  455,  460,  455,  455,
@@ -933,39 +936,39 @@ static const flex_int16_t yy_nxt[4596] =
       455,  455,  458,  455,  459,  455,  460,  455,  455,  461,
 
       455,  496,  488,  497,  503,  489,  500,  504,  505,  506,
-      501,  945,  508,  498,  509,  502,  507,  944,  520,  428,
+      501,  949,  508,  498,  509,  502,  507,  948,  520,  428,
       429,  527,  528,  277,  277,  449,  529,  450,  428,  429,
-      496,  531,  533,  497,  503,  943,  500,  504,  505,  506,
+      496,  531,  533,  497,  503,  947,  500,  504,  505,  506,
       501,  508,  498,  509,  631,  502,  507,  510,  520,  511,
       527,  528,  512,  513,  522,  523,  529,  524,  514,  515,
-      534,  531,  533,  942,  516,  517,  941,  526,  409,  518,
+      534,  531,  533,  946,  516,  517,  945,  526,  409,  518,
       410,  525,  525,  525,  525,  543,  519,  510,  544,  511,
       535,  535,  512,  513,  411,  411,  411,  411,  514,  515,
       428,  429,  545,  516,  517,  539,  539,  546,  518,  542,
 
       542,  542,  542,  569,  449,  543,  450,  570,  544,  571,
-      572,  624,  536,  625,  936,  573,  427,  523,  935,  625,
-      526,  409,  545,  410,  632,  885,  624,  546,  625,  428,
+      572,  624,  536,  625,  940,  573,  427,  523,  939,  625,
+      526,  409,  545,  410,  632,  887,  624,  546,  625,  428,
       429,  626,  523,  569,  524,  722,  723,  570,  724,  571,
       572,  536,  427,  427,  573,  427,  427,  427,  427,  427,
       427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
       427,  427,  427,  427,  427,  427,  427,  427,  427,  537,
       537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
       537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
-      537,  537,  537,  537,  428,  429,  884,  538,  427,  537,
+      537,  537,  537,  537,  428,  429,  886,  538,  427,  537,
 
       537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
       537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
       537,  537,  537,  427,  427,  427,  540,  540,  540,  540,
       547,  547,  547,  547,  547,  540,  540,  540,  540,  540,
       540,  547,  547,  547,  574,  547,  548,  549,  575,  547,
-      550,  576,  553,  558,  551,  883,  552,  577,  578,  579,
+      550,  576,  553,  558,  551,  885,  552,  577,  578,  579,
       428,  429,  556,  557,  580,  540,  540,  540,  540,  540,
       540,  554,  581,  574,  555,  583,  548,  549,  575,  582,
       550,  576,  553,  558,  551,  552,  586,  577,  578,  579,
-      584,  587,  556,  557,  580,  882,  585,  588,  589,  881,
+      584,  587,  556,  557,  580,  884,  585,  588,  589,  883,
 
-      554,  591,  581,  555, 1113,  583,  592,  593,  582,  559,
+      554,  591,  581,  555, 1125,  583,  592,  593,  582,  559,
       560,  561,  562,  594,  595,  563,  586,  596,  597,  584,
       564,  587,  598,  599,  565,  585,  588,  566,  589,  567,
       600,  591,  568,  601,  602,  603,  592,  593,  606,  559,
@@ -974,12 +977,12 @@ static const flex_int16_t yy_nxt[4596] =
       600,  568,  611,  601,  602,  603,  612,  614,  606,  613,
       615,  616,  617,  618,  620,  607,  619,  621,  622,  604,
       608,  623,  428,  429,  274,  605,  644,  609,  627,  610,
-      628,  629,  611,  633,  641,  642,  612,  614,  613,  880,
+      628,  629,  611,  633,  641,  642,  612,  614,  613,  882,
 
       615,  616,  617,  618,  620,  619,  621,  622,  631,  522,
       523,  623,  524,  626,  523,  644,  524,  801,  627,  802,
-      628,  629,  879,  633,  641,  642,  525,  525,  525,  525,
-      525,  525,  525,  525,  427,  427,  878,  427,  427,  427,
+      628,  629,  881,  633,  641,  642,  525,  525,  525,  525,
+      525,  525,  525,  525,  427,  427,  880,  427,  427,  427,
       427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
       427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
       427,  634,  634,  634,  634,  634,  634,  634,  634,  634,
@@ -989,8 +992,8 @@ static const flex_int16_t yy_nxt[4596] =
 
       634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
       634,  634,  634,  634,  634,  427,  427,  427,  636,  636,
-      643,  547,  547,  877,  639,  639,  547,  547,  547,  547,
-      547,  648,  651,  547,  876,  547,  547,  428,  429,  646,
+      643,  547,  547,  879,  639,  639,  547,  547,  547,  547,
+      547,  648,  651,  547,  878,  547,  547,  428,  429,  646,
       650,  647,  547,  653,  428,  429,  649,  655,  656,  657,
       643,  658,  428,  429,  637,  637,  637,  637,  428,  429,
       652,  648,  651,  637,  637,  637,  637,  637,  637,  646,
@@ -1000,13 +1003,13 @@ static const flex_int16_t yy_nxt[4596] =
 
       640,  640,  640,  660,  547,  662,  666,  663,  640,  640,
       640,  640,  640,  640,  669,  547,  547,  661,  670,  672,
-      654,  671,  659,  673,  668,  875,  664,  674,  675,  665,
+      654,  671,  659,  673,  668,  877,  664,  674,  675,  665,
       676,  677,  678,  660,  662,  667,  666,  663,  640,  640,
       640,  640,  640,  640,  682,  684,  679,  670,  672,  683,
-      685,  874,  686,  673,  668,  664,  674,  675,  665,  676,
+      685,  876,  686,  673,  668,  664,  674,  675,  665,  676,
       687,  677,  678,  680,  688,  667,  690,  691,  695,  681,
-      872,  693,  694,  696,  682,  684,  697,  698,  683,  699,
-      685,  686,  700,  701,  869,  702,  703,  704,  705,  687,
+      874,  693,  694,  696,  682,  684,  697,  698,  683,  699,
+      685,  686,  700,  701,  871,  702,  703,  704,  705,  687,
       706,  707,  709,  680,  688,  690,  708,  691,  695,  681,
 
       693,  694,  696,  710,  711,  713,  697,  698,  712,  699,
@@ -1044,282 +1047,285 @@ static const flex_int16_t yy_nxt[4596] =
 
       840,  825,  842,  843,  828,  827,  844,  833,  845,  835,
       829,  836,  846,  847,  849,  830,  848,  834,  850,  723,
-      851,  837,  853,  854,  831,  838,  839,  855,  862,  840,
-      863,  870,  842,  843,  718,  871,  844,  801,  845,  802,
-      873,  794,  846,  847,  849,  848,  856,  857,  850,  851,
-      547,  858,  853,  854,  859,  547,  855,  860,  862,  790,
-      863,  870,  861,  864,  865,  871,  547,  887,  866,  873,
-      547,  867,  547,  547,  868,  888,  856,  857,  547,  886,
-      547,  858,  890,  547,  859,  547,  547,  860,  889,  547,
-      892,  861,  899,  864,  865,  900,  891,  887,  866,  898,
-
-      901,  867,  893,  902,  868,  888,  547,  894,  886,  895,
-      904,  897,  890,  903,  906,  896,  778,  905,  889,  907,
-      892,  908,  899,  909,  900,  891,  910,  911,  912,  898,
-      901,  893,  902,  913,  914,  916,  894,  917,  895,  904,
-      897,  918,  774,  903,  906,  896,  905,  923,  907,  928,
-      915,  908,  909,  924,  925,  919,  910,  911,  912,  920,
-      926,  927,  921,  913,  914,  916,  917,  929,  769,  933,
-      934,  918,  922,  937,  930,  763,  923,  931,  928,  915,
-      939,  547,  940,  924,  925,  919,  969,  932,  965,  920,
-      926,  927,  921,  966,  967,  968,  970,  929,  933,  934,
-
-      971,  922,  937,  972,  930,  964,  973,  931,  974,  975,
-      976,  730,  977,  978,  979,  969,  932,  980,  965,  981,
-      982,  983,  984,  966,  967,  968,  970,  985,  427,  986,
-      971,  987,  988,  972,  964,  989,  973,  974,  990,  975,
-      976,  977,  991,  978,  979,  992,  993,  980,  981,  994,
-      982,  983,  984,  995,  996,  999,  997,  985,  986,  939,
-      987,  940,  988, 1013,  939,  989,  940,  990, 1014, 1015,
-     1016, 1017,  991,  998, 1018,  992,  993, 1019,  994, 1020,
-     1021, 1022,  995,  996,  999, 1023,  997, 1024, 1025,  725,
-     1026, 1027, 1013, 1028, 1029, 1030, 1031, 1032, 1014, 1015,
-
-     1016, 1017,  998, 1033, 1018, 1034, 1035, 1019, 1020, 1021,
-     1036, 1022, 1037, 1038, 1023, 1039, 1044, 1024, 1025, 1026,
-     1027, 1040, 1028, 1043, 1029, 1030, 1031, 1032, 1048, 1041,
-     1046, 1047, 1033, 1042, 1034, 1035, 1049, 1050, 1051, 1052,
-     1036, 1053, 1037, 1038, 1054, 1039, 1044, 1055, 1056, 1057,
-     1040, 1058, 1043, 1059, 1060, 1061, 1062, 1048, 1041, 1063,
-     1046, 1047, 1042, 1064, 1065, 1049, 1050, 1066, 1051, 1052,
-     1053, 1067, 1068, 1054, 1069, 1070, 1071, 1055, 1056, 1057,
-     1072, 1058, 1073, 1059, 1060, 1061, 1062, 1074, 1075, 1063,
-     1076, 1077, 1064, 1078, 1065, 1079, 1080, 1066, 1081, 1082,
-
-     1067, 1068, 1083, 1069, 1070, 1084, 1071, 1085, 1086, 1087,
-     1072, 1088, 1073, 1089, 1090,  718, 1091, 1074, 1075, 1076,
-     1092, 1077, 1093, 1078, 1094, 1079, 1080, 1081, 1095, 1082,
-     1096, 1097, 1083, 1098, 1099, 1084, 1100, 1085, 1086, 1087,
-     1088, 1101, 1089, 1102, 1090, 1091, 1103, 1104, 1105, 1106,
-     1092, 1107, 1093, 1094, 1108,  692, 1109, 1110, 1095, 1111,
-     1096, 1097, 1112, 1098, 1099, 1100,  375,  375,  689,  434,
-     1101,  434,  541, 1102,  541, 1103, 1104, 1105,  645, 1106,
-      427, 1107,  415,  415, 1108, 1109, 1110,  415,  590, 1111,
-      344,  343, 1112,   68,   68,   68,   68,   68,   68,   68,
+      851,  837,  853,  854,  831,  838,  839,  855,  718,  840,
+      863,  864,  842,  843,  872,  873,  844,  801,  845,  802,
+      375,  375,  846,  847,  849,  848,  875,  547,  850,  851,
+      547,  794,  853,  854,  547,  790,  855,  856,  857,  858,
+      863,  864,  891,  859,  872,  873,  860,  889,  547,  861,
+      865,  866,  867,  778,  862,  875,  868,  547,  888,  869,
+      547,  547,  870,  547,  892,  890,  547,  856,  857,  858,
+      900,  901,  891,  859,  547,  894,  860,  889,  547,  861,
+
+      865,  866,  867,  862,  547,  893,  868,  888,  895,  869,
+      547,  902,  870,  898,  892,  890,  903,  774,  896,  904,
+      900,  901,  897,  905,  908,  894,  906,  907,  909,  910,
+      769,  911,  899,  912,  893,  913,  914,  895,  915,  918,
+      902,  919,  916,  898,  920,  921,  903,  896,  904,  763,
+      926,  897,  927,  905,  908,  906,  907,  909,  917,  910,
+      911,  899,  928,  912,  929,  913,  914,  930,  915,  918,
+      931,  919,  916,  920,  922,  921,  932,  933,  923,  926,
+      934,  924,  927,  935,  730,  937,  938,  917,  941,  973,
+      427,  925,  928,  936,  929,  547,  943,  930,  944,  969,
+
+      931,  970,  971,  972,  922,  932,  974,  933,  923,  975,
+      934,  924,  976,  935,  937,  938,  977,  941,  973,  968,
+      925,  978,  936,  979,  980,  725,  981,  982,  983,  969,
+      984,  970,  971,  972,  985,  987,  974,  986,  988,  975,
+      989,  990,  976,  991,  992,  993,  977,  994,  968,  995,
+      978,  996,  997,  979,  980,  981,  998,  982,  983,  999,
+      984, 1000, 1001, 1002,  985,  987,  986, 1003,  988, 1005,
+      989,  990,  991,  992,  943,  993,  944,  994, 1019,  995,
+      996,  943,  997,  944, 1004, 1020,  998, 1021, 1022,  999,
+     1000, 1001, 1002, 1023, 1024, 1025, 1028, 1003, 1005, 1026,
+
+     1027, 1029, 1030, 1031,  718, 1032, 1033, 1019, 1034, 1035,
+     1036, 1037, 1038, 1004, 1039, 1020, 1040, 1021, 1022, 1041,
+     1042, 1043, 1044, 1023, 1024, 1025, 1028, 1045, 1026, 1027,
+     1029, 1046, 1030, 1031, 1032, 1033, 1047, 1034, 1035, 1048,
+     1036, 1037, 1038, 1049, 1039, 1040, 1051, 1050, 1041, 1042,
+     1043, 1052, 1044, 1054, 1055,  692, 1056, 1045, 1057, 1058,
+     1059, 1046, 1060,  689, 1061, 1062, 1047, 1063, 1048, 1064,
+     1065, 1066, 1049, 1067, 1068, 1051, 1050, 1069, 1070, 1071,
+     1072, 1052, 1073, 1054, 1055, 1056, 1074, 1057, 1058, 1075,
+     1059, 1076, 1060, 1061, 1062, 1077, 1078, 1063, 1079, 1064,
+
+     1065, 1066, 1080, 1067, 1068, 1081, 1082, 1069, 1070, 1071,
+     1072, 1083, 1073, 1084, 1085, 1074, 1086, 1087, 1088, 1075,
+     1089, 1076, 1090, 1091, 1077, 1078, 1092, 1079, 1093, 1094,
+     1095, 1080, 1096, 1097, 1098, 1081, 1082, 1099,  645, 1100,
+     1101, 1083, 1102, 1084, 1085, 1086, 1103, 1087, 1088, 1104,
+     1089, 1105, 1090, 1091, 1106, 1107, 1092, 1093, 1108, 1094,
+     1095, 1109, 1096, 1097, 1098, 1110, 1111, 1099, 1100, 1101,
+     1112, 1113, 1102, 1114, 1118, 1103, 1115, 1116, 1117, 1104,
+     1119, 1105, 1120, 1106, 1121, 1107, 1122, 1123, 1108, 1124,
+      427, 1109,  415,  415,  590, 1110, 1111,  415,  344, 1112,
 
+     1113,  343,  547, 1114, 1118, 1115, 1116, 1117,  438,  434,
+     1119,  434, 1120, 1121,  541, 1122,  541, 1123,  409, 1124,
+       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
        68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
-       68,   68,   68,   68,   88,   88,   88,   88,   88,   88,
+       68,   88,   88,   88,   88,   88,   88,   88,   88,   88,
        88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
-       88,   88,   88,   88,   88,   91,   91,   91,   91,   91,
+       88,   88,   91,   91,   91,   91,   91,   91,   91,   91,
        91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
-       91,   91,   91,   91,   91,   91,   94,   94,   94,   94,
+       91,   91,   91,   94,   94,   94,   94,   94,   94,   94,
        94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
-       94,   94,   94,   94,   94,   94,   94,   97,   97,   97,
-       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
-       97,   97,   97,   97,   97,   97,   97,   97,  106,  106,
 
+       94,   94,   94,   94,   97,   97,   97,   97,   97,   97,
+       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
+       97,   97,   97,   97,   97,  106,  106,  106,  106,  106,
       106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
-      106,  106,  106,  106,  106,  106,  106,  106,  106,   56,
-       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
+      106,  106,  106,  106,  106,  106,   56,   56,   56,   56,
        56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
+       56,   56,   56,   56,   56,   56,   56,  118,  118,  118,
       118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
-      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
-      118,  124,  124,  124,  124,  124,  124,  124,  124,  124,
+      118,  118,  118,  118,  118,  118,  118,  118,  124,  124,
       124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
-      124,  124,  129,  129,  129,  129,  129,  129,  129,  129,
-      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
 
-      129,  129,  129,  133,  133,  133,  133,  133,  133,  133,
+      124,  124,  124,  124,  124,  124,  124,  124,  124,  129,
+      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
+      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
+      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
       133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
-      133,  133,  133,  133,  153,  153,  153,  153,  153,  153,
+      133,  153,  153,  153,  153,  153,  153,  153,  153,  153,
       153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
-      153,  153,  153,  153,  153,  156,  156,  156,  156,  156,
+      153,  153,  156,  156,  156,  156,  156,  156,  156,  156,
       156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
-      156,  156,  156,  156,  156,  156,  162,  162,  162,  162,
+      156,  156,  156,  162,  162,  162,  162,  162,  162,  162,
+
       162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
-      162,  162,  162,  162,  162,  162,  162,  169,  169,  169,
+      162,  162,  162,  162,  169,  169,  169,  169,  169,  169,
       169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
-
-      169,  169,  169,  169,  169,  169,  169,  169,  208,  208,
+      169,  169,  169,  169,  169,  208,  208,  208,  208,  208,
       208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
-      208,  208,  208,  208,  208,  208,  208,  208,  208,  212,
-      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
+      208,  208,  208,  208,  208,  208,  212,  212,  212,  212,
       212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
+      212,  212,  212,  212,  212,  212,  212,  228,  228,  228,
       228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
-      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
-      228,  232,  232,  232,  232,  232,  232,  232,  232,  232,
-      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
-      232,  232,  237,  237,  237,  237,  237,  237,  237,  237,
+      228,  228,  228,  228,  228,  228,  228,  228,  232,  232,
 
+      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
+      232,  232,  232,  232,  232,  232,  232,  232,  232,  237,
       237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
-      237,  237,  237,  240,  240,  240,  240,  240,  240,  240,
+      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
+      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
       240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
-      240,  240,  240,  240,  246,  547,  246,  438,  246,  246,
-      455,  455,  455,  246,  252,  252,  252,  252,  252,  252,
+      240,  246,  390,  246,  479,  246,  246,  455,  455,  455,
+      246,  252,  252,  252,  252,  252,  252,  252,  252,  252,
       252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
-      252,  252,  252,  252,  263,  409,  263,  390,  263,  263,
-      417,  417,  479,  263,  274,  417,  274,  274,  274,  274,
-      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
-      274,  274,  274,  274,  274,  277,  354,  277,  277,  277,
+      252,  263,  354,  263,  351,  263,  263,  417,  417,  348,
 
+      263,  274,  417,  274,  274,  274,  274,  274,  274,  274,
+      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
+      274,  274,  277,  467,  277,  277,  277,  277,  277,  277,
       277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
-      277,  277,  277,  277,  277,  277,  283,  283,  351,  283,
-      348,  283,  283,  467,  466,  463,  283,  295,  315,  295,
+      277,  277,  277,  283,  283,  466,  283,  463,  283,  283,
+      315,  313,  315,  283,  295,  310,  295,  295,  295,  295,
       295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
-      295,  295,  295,  295,  295,  295,  295,  295,  299,  299,
+      295,  295,  295,  295,  295,  299,  299,  299,  299,  299,
       299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
-      299,  299,  299,  313,  299,  315,  299,  299,  299,  302,
-      310,  302,  302,  296,  302,  302,  302,  302,  302,  302,
-      302,  302,  302,  302,  441,  302,  440,  302,  302,  302,
-      309,  439,  285,  309,  309,  309,  309,  309,  309,  309,
+      296,  299,  441,  299,  299,  299,  302,  440,  302,  302,
 
+      439,  302,  302,  302,  302,  302,  302,  302,  302,  302,
+      302,  285,  302,  438,  302,  302,  302,  309,  436,  435,
       309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
-      309,  317,  438,  317,  436,  317,  317,  435,  425,  269,
-      317,  322,  421,  322,  322,  322,  322,  322,  322,  322,
+      309,  309,  309,  309,  309,  309,  309,  309,  317,  425,
+      317,  269,  317,  317,  421,  265,  248,  317,  322,  244,
       322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
-      322,  322,  325,  265,  325,  325,  325,  325,  325,  325,
-      325,  325,  325,  325,  325,  325,  325,  325,  325,  248,
-      325,  325,  325,  326,  244,  326,  341,  326,  403,  326,
-      326,  326,  326,  402,  326,  326,  400,  399,  398,  326,
-      328,  397,  328,  328,  328,  395,  328,  328,  328,  328,
-      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
-
-      328,  331,  394,  331,  393,  331,  331,  390,  354,  352,
-      331,  334,  334,  334,  334,  334,  334,  334,  334,  334,
+      322,  322,  322,  322,  322,  322,  322,  322,  322,  325,
+      341,  325,  325,  325,  325,  325,  325,  325,  325,  325,
+      325,  325,  325,  325,  325,  325,  403,  325,  325,  325,
+      326,  402,  326,  400,  326,  399,  326,  326,  326,  326,
+
+      398,  326,  326,  397,  395,  394,  326,  328,  393,  328,
+      328,  328,  390,  328,  328,  328,  328,  328,  328,  328,
+      328,  328,  328,  328,  328,  328,  328,  328,  331,  354,
+      331,  352,  331,  331,  351,  307,  306,  331,  334,  334,
       334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
-      334,  334,  337,  351,  337,  337,  337,  337,  337,  307,
-      337,  337,  337,  337,  337,  337,  337,  306,  337,  330,
-      337,  337,  337,  340,  348,  340,  347,  340,  340,  340,
-      340,  340,  340,  340,  340,  340,  340,  340,  307,  306,
-      341,  340,  340,  340,  342,  342,  342,  342,  342,  342,
-      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
-      342,  342,  342,  342,  342,  353,  307,  353,  353,  353,
+      334,  334,  334,  334,  334,  334,  334,  334,  334,  337,
+      330,  337,  337,  337,  337,  337,  348,  337,  337,  337,
+      337,  337,  337,  337,  347,  337,  307,  337,  337,  337,
+      340,  306,  340,  341,  340,  340,  340,  340,  340,  340,
+      340,  340,  340,  340,  340,  307,  306,  339,  340,  340,
 
+      340,  342,  342,  342,  342,  342,  342,  342,  342,  342,
+      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
+      342,  342,  353,  338,  353,  353,  353,  353,  353,  353,
       353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
-      353,  353,  353,  353,  353,  353,  357,  357,  306,  339,
-      338,  357,  357,  389,  307,  389,  389,  389,  389,  389,
+      353,  353,  353,  357,  357,  307,  306,  330,  357,  357,
+      389,  329,  389,  389,  389,  389,  389,  389,  389,  389,
       389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
-      389,  389,  389,  389,  392,  306,  330,  392,  392,  392,
-      392,  392,  392,  392,  392,  392,  392,  392,  392,  329,
-      392,  327,  392,  396,  321,  396,  396,  396,  396,  324,
-      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
-      396,  396,  396,  396,  401,  401,  401,  401,  401,  401,
-      401,  401,  401,  401,  401,  401,  401,  401,  401,  321,
+      389,  392,  327,  321,  392,  392,  392,  392,  392,  392,
+      392,  392,  392,  392,  392,  392,  324,  392,  321,  392,
+      396,  320,  396,  396,  396,  396,  318,  396,  396,  396,
 
-      401,  320,  401,  401,  401,  404,  318,  404,  404,  404,
-      316,  404,  404,  404,  404,  404,  404,  404,  404,  404,
-      313,  315,  311,  404,  404,  404,  246,  310,  246,  308,
-      246,  246,  307,  306,  303,  246,  406,  301,  406,  406,
+      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
+      396,  401,  401,  401,  401,  401,  401,  401,  401,  401,
+      401,  401,  401,  401,  401,  401,  316,  401,  313,  401,
+      401,  401,  404,  315,  404,  404,  404,  311,  404,  404,
+      404,  404,  404,  404,  404,  404,  404,  310,  308,  307,
+      404,  404,  404,  246,  306,  246,  303,  246,  246,  301,
+      300,  296,  246,  406,  294,  406,  406,  406,  406,  406,
       406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
-      406,  406,  406,  406,  406,  406,  406,  407,  300,  407,
+      406,  406,  406,  406,  407,  293,  407,  407,  407,  407,
       407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
-      407,  407,  407,  407,  407,  407,  407,  407,  418,  418,
-      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
-      418,  418,  418,  418,  418,  418,  418,  418,  418,  263,
 
-      296,  263,  294,  263,  263,  293,  285,  273,  263,  422,
-      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
+      407,  407,  407,  407,  407,  418,  418,  418,  418,  418,
+      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
+      418,  418,  418,  418,  418,  418,  263,  285,  263,  273,
+      263,  263,  272,  271,  265,  263,  422,  422,  422,  422,
       422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
-      427,  272,  427,  427,  427,  427,  427,  427,  427,  427,
-      427,  427,  427,  427,  427,  427,  427,  271,  427,  427,
-      427,  274,  265,  274,  274,  274,  274,  274,  274,  274,
+      422,  422,  422,  422,  422,  422,  422,  427,  262,  427,
+      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
+      427,  427,  427,  427,  248,  427,  427,  427,  274,  244,
       274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
-      274,  274,  437,  262,  437,  248,  437,  437,  244, 1113,
-      117,  437,  117,  437,  442, 1113,  442,  442,  442,  442,
-      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
+      274,  274,  274,  274,  274,  274,  274,  274,  274,  437,
 
-      442,  442,  442,  442,  442,  295, 1113,  295,  295,  295,
+     1125,  437,  117,  437,  437,  117, 1125, 1125,  437, 1125,
+      437,  442, 1125,  442,  442,  442,  442,  442,  442,  442,
+      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
+      442,  442,  295, 1125,  295,  295,  295,  295,  295,  295,
       295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
-      295,  295,  295,  295,  295,  295,  444, 1113,  444,  444,
+      295,  295,  295,  444, 1125,  444,  444,  444,  444,  444,
       444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
-      444,  444,  444,  444,  444,  444,  444,  445, 1113,  445,
+      444,  444,  444,  444,  445, 1125,  445,  445,  445,  445,
       445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
-      445,  445,  445,  445,  445,  445,  445,  445,  299,  299,
-      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
-      299,  299,  299, 1113,  299, 1113,  299,  299,  299,  302,
-     1113,  302,  302, 1113,  302,  302,  302,  302,  302,  302,
+      445,  445,  445,  445,  445,  299,  299,  299,  299,  299,
 
-      302,  302,  302,  302, 1113,  302, 1113,  302,  302,  302,
-      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
+      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
+     1125,  299, 1125,  299,  299,  299,  302, 1125,  302,  302,
+     1125,  302,  302,  302,  302,  302,  302,  302,  302,  302,
+      302, 1125,  302, 1125,  302,  302,  302,  448,  448,  448,
       448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
-      448,  309, 1113, 1113,  309,  309,  309,  309,  309,  309,
-      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
-      309,  309,  317, 1113,  317, 1113,  317,  317, 1113, 1113,
-     1113,  317,  326, 1113,  326, 1113,  326, 1113,  326,  326,
-      326,  326, 1113,  326,  326, 1113, 1113, 1113,  326,  328,
-     1113,  328,  328,  328,  328,  328,  328,  328,  328,  328,
-      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
+      448,  448,  448,  448,  448,  448,  448,  448,  309, 1125,
+     1125,  309,  309,  309,  309,  309,  309,  309,  309,  309,
+      309,  309,  309,  309,  309,  309,  309,  309,  309,  317,
+     1125,  317, 1125,  317,  317, 1125, 1125, 1125,  317,  326,
+     1125,  326, 1125,  326, 1125,  326,  326,  326,  326, 1125,
 
-      331, 1113,  331, 1113,  331,  331, 1113, 1113, 1113,  331,
-      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
+      326,  326, 1125, 1125, 1125,  326,  328, 1125,  328,  328,
+      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
+      328,  328,  328,  328,  328,  328,  328,  331, 1125,  331,
+     1125,  331,  331, 1125, 1125, 1125,  331,  334,  334,  334,
       334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
-      334,  337, 1113,  337,  337,  337,  337,  337, 1113,  337,
-      337,  337,  337,  337,  337,  337, 1113,  337, 1113,  337,
-      337,  337,  340, 1113,  340, 1113,  340,  340,  340,  340,
-      340,  340,  340,  340,  340,  340,  340, 1113, 1113, 1113,
-      340,  340,  340,  468, 1113,  468,  468,  468,  468,  468,
-      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
-      468,  468,  468,  468,  353, 1113,  353,  353,  353,  353,
+      334,  334,  334,  334,  334,  334,  334,  334,  337, 1125,
+      337,  337,  337,  337,  337, 1125,  337,  337,  337,  337,
+      337,  337,  337, 1125,  337, 1125,  337,  337,  337,  340,
+     1125,  340, 1125,  340,  340,  340,  340,  340,  340,  340,
+      340,  340,  340,  340, 1125, 1125, 1125,  340,  340,  340,
 
+      468, 1125,  468,  468,  468,  468,  468,  468,  468,  468,
+      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
+      468,  353, 1125,  353,  353,  353,  353,  353,  353,  353,
       353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
-      353,  353,  353,  353,  353,  357,  357, 1113, 1113, 1113,
-      357,  357,  389, 1113,  389,  389,  389,  389,  389,  389,
+      353,  353,  357,  357, 1125, 1125, 1125,  357,  357,  389,
+     1125,  389,  389,  389,  389,  389,  389,  389,  389,  389,
       389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
-      389,  389,  389,  392, 1113, 1113,  392,  392,  392,  392,
-      392,  392,  392,  392,  392,  392,  392,  392, 1113,  392,
-     1113,  392,  396, 1113,  396,  396,  396,  396, 1113,  396,
-      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
-      396,  396,  396,  401,  401,  401,  401,  401,  401,  401,
-      401,  401,  401,  401,  401,  401,  401,  401, 1113,  401,
+      392, 1125, 1125,  392,  392,  392,  392,  392,  392,  392,
+      392,  392,  392,  392,  392, 1125,  392, 1125,  392,  396,
+     1125,  396,  396,  396,  396, 1125,  396,  396,  396,  396,
 
-     1113,  401,  401,  401,  404, 1113,  404,  404,  404, 1113,
-      404,  404,  404,  404,  404,  404,  404,  404,  404, 1113,
-     1113, 1113,  404,  404,  404,  406, 1113,  406,  406,  406,
+      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
+      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
+      401,  401,  401,  401,  401, 1125,  401, 1125,  401,  401,
+      401,  404, 1125,  404,  404,  404, 1125,  404,  404,  404,
+      404,  404,  404,  404,  404,  404, 1125, 1125, 1125,  404,
+      404,  404,  406, 1125,  406,  406,  406,  406,  406,  406,
       406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
-      406,  406,  406,  406,  406,  406,  407, 1113,  407,  407,
+      406,  406,  406,  407, 1125,  407,  407,  407,  407,  407,
       407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
-      407,  407,  407,  407,  407,  407,  407,  521,  521,  521,
-      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
-      521,  521,  521,  521,  521,  521,  521,  521,  530, 1113,
-      530, 1113,  530,  530, 1113, 1113, 1113,  530,  532, 1113,
+      407,  407,  407,  407,  521,  521,  521,  521,  521,  521,
 
-      532, 1113,  532,  532, 1113, 1113, 1113,  532,  418,  418,
+      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
+      521,  521,  521,  521,  521,  530, 1125,  530, 1125,  530,
+      530, 1125, 1125, 1125,  530,  532, 1125,  532, 1125,  532,
+      532, 1125, 1125, 1125,  532,  418,  418,  418,  418,  418,
       418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
-      418,  418,  418,  418,  418,  418,  418,  418,  418,  422,
-      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
+      418,  418,  418,  418,  418,  418,  422,  422,  422,  422,
       422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
-      427, 1113,  427,  427,  427,  427,  427,  427,  427,  427,
-      427,  427,  427,  427,  427,  427,  427, 1113,  427,  427,
-      427,  437, 1113,  437, 1113,  437,  437, 1113, 1113, 1113,
-      437, 1113,  437,  442, 1113,  442,  442,  442,  442,  442,
-      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
+      422,  422,  422,  422,  422,  422,  422,  427, 1125,  427,
+      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
+      427,  427,  427,  427, 1125,  427,  427,  427,  437, 1125,
 
-      442,  442,  442,  442,  444, 1113,  444,  444,  444,  444,
+      437, 1125,  437,  437, 1125, 1125, 1125,  437, 1125,  437,
+      442, 1125,  442,  442,  442,  442,  442,  442,  442,  442,
+      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
+      442,  444, 1125,  444,  444,  444,  444,  444,  444,  444,
       444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
-      444,  444,  444,  444,  444,  445, 1113,  445,  445,  445,
+      444,  444,  445, 1125,  445,  445,  445,  445,  445,  445,
       445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
-      445,  445,  445,  445,  445,  445,  302, 1113,  302,  302,
-     1113,  302,  302,  302,  302,  302,  302,  302,  302,  302,
-      302, 1113,  302, 1113,  302,  302,  302,  448,  448,  448,
-      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
-      448,  448,  448,  448,  448,  448,  448,  448,  331, 1113,
-      331, 1113,  331,  331, 1113, 1113, 1113,  331,  342, 1113,
+      445,  445,  445,  302, 1125,  302,  302, 1125,  302,  302,
+      302,  302,  302,  302,  302,  302,  302,  302, 1125,  302,
+     1125,  302,  302,  302,  448,  448,  448,  448,  448,  448,
 
+      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
+      448,  448,  448,  448,  448,  331, 1125,  331, 1125,  331,
+      331, 1125, 1125, 1125,  331,  342, 1125,  342,  342,  342,
       342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
-      342,  342,  342,  342,  342,  342,  342,  342,  342,  468,
-     1113,  468,  468,  468,  468,  468,  468,  468,  468,  468,
+      342,  342,  342,  342,  342,  342,  468, 1125,  468,  468,
       468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
-      357,  357, 1113, 1113, 1113,  357,  357,  630, 1113,  630,
+      468,  468,  468,  468,  468,  468,  468,  357,  357, 1125,
+     1125, 1125,  357,  357,  630, 1125,  630,  630,  630,  630,
       630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
-      630,  630,  630,  630,  630,  630,  630,  630,  800,  800,
-      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
-      800,  800,  800,  800,  800,  800,  800,  800,  800,  938,
-      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
+      630,  630,  630,  630,  630,  800,  800,  800,  800,  800,
 
-      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
-       55, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113
+      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
+      800,  800,  800,  800,  800,  800,  942,  942,  942,  942,
+      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
+      942,  942,  942,  942,  942,  942,  942,   55, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
 
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125
     } ;
 
-static const flex_int16_t yy_chk[4596] =
+static const flex_int16_t yy_chk[4623] =
     {   0,
         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
@@ -1339,24 +1345,24 @@ static const flex_int16_t yy_chk[4596] =
         2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
         2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
         2,    2,    2,    2,    2,    2,    2,    2,    3,    3,
-      102,    3,    3,    5,    3,    5, 1012,    3,    3,    3,
+      102,    3,    3,    5,    3,    5, 1018,    3,    3,    3,
         3,   79,   79,    3,    3,    6,    6,    7,    6,    7,
         3,   21,    6,    3,    8,  132,    8,   11,   11,  102,
 
-       11,   12,   12,  964,   12,   19,   85,   19,   19,   27,
+       11,   12,   12,  968,   12,   19,   85,   19,   19,   27,
        28,   27,   28,   17,   20,   17,   20,   20,  148,    3,
         3,   51,    9,   51,    9,   17,  537,   22,    9,   17,
-       17,   17,   17,   10,  132,   10,   29,  963,   29,   10,
+       17,   17,   17,   10,  132,   10,   29,  967,   29,   10,
       176,   21,   21,   47,   21,   47,   29,  148,    3,    3,
         3,    4,    4,   47,    4,    4,   19,    4,    4,  537,
         4,    4,    4,    4,    9,   20,    4,    4,   23,  176,
        23,    9,    9,    4,    9,   10,    4,   22,   22,   85,
-       22,   23,   10,   10,  962,   10,   29,  199,   29,   45,
+       22,   23,   10,   10,  966,   10,   29,  199,   29,   45,
        52,   45,   52,    9,   17,   93,   37,   93,   45,   37,
 
-        9,  961,    4,    4,   10,    4,   38,  960,   46,   38,
+        9,  965,    4,    4,   10,    4,   38,  964,   46,   38,
        46,   10,   37,   37,   37,   37,  199,   46,   23,   23,
-       23,  959,   38,   38,   38,   38,   57,   57,  153,   57,
+       23,  963,   38,   38,   38,   38,   57,   57,  153,   57,
       153,    4,    4,    4,   13,   13,   13,   13,   13,   13,
        13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
        13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
@@ -1372,9 +1378,9 @@ static const flex_int16_t yy_chk[4596] =
        32,   32,   53,   48,   53,   48,  167,   61,   61,   53,
        61,  101,   43,   48,   73,   73,  202,   73,   81,  261,
        81,  261,   43,   81,   81,   81,   81,   43,   64,   24,
-       24,   24,  170,   30,  958,   30,   31,   31,   31,  170,
-      957,  101,   43,  111,  111,  268,  111,  268,   32,   32,
-       32,   43,   53,   53,   53,  956,   43,  167,   64,   18,
+       24,   24,  170,   30,  962,   30,   31,   31,   31,  170,
+      961,  101,   43,  111,  111,  268,  111,  268,   32,   32,
+       32,   43,   53,   53,   53,  960,   43,  167,   64,   18,
 
        25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
        25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
@@ -1390,9 +1396,9 @@ static const flex_int16_t yy_chk[4596] =
        33,   41,   42,  175,  308,   34,  308,   49,  274,  274,
        50,   44,   50,  184,   41,   42,  122,  122,  122,  122,
        50,   44,  185,  147,   41,   42,   44,   33,  207,   41,
-       42,  955,   34,  175,   33,   33,   39,   33,   39,   34,
+       42,  959,   34,  175,   33,   33,   39,   33,   39,   34,
        34,   44,   34,  184,   41,   42,  334,   49,  334,   49,
-       44,  954,  185,   41,   42,   44,   33,  207,   41,   42,
+       44,  958,  185,   41,   42,   44,   33,  207,   41,   42,
        50,   34,   50,   33,  336,   39,  336,   39,   34,   35,
        35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
        35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
@@ -1405,36 +1411,36 @@ static const flex_int16_t yy_chk[4596] =
        35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
        35,   35,   35,   40,  634,   40,   54,  189,   54,   69,
        69,  188,   69,   54,   80,   80,   69,   82,   82,  188,
-       82,  189,  128,  128,   82,  278,  278,  131,  131,  953,
+       82,  189,  128,  128,   82,  278,  278,  131,  131,  957,
       138,  138,  359,   82,  187,  190,  194,  634,  195,   82,
       187,  188,  191,  201,  196,  345,   80,  192,  196,  188,
 
-      952,  189,  345,   40,  128,   40,   54,   54,   54,  131,
-      897,  359,  138,  191,  187,  190,  194,  192,  195,  187,
-      198,   82,  191,  201,  196,   80,  896,  192,  196,  203,
+      956,  189,  345,   40,  128,   40,   54,   54,   54,  131,
+      899,  359,  138,  191,  187,  190,  194,  192,  195,  187,
+      198,   82,  191,  201,  196,   80,  898,  192,  196,  203,
       198,  204,   40,  128,   40,   65,  243,  243,  131,  243,
        69,  138,  191,  250,  205,  197,  192,  361,   82,  197,
       198,  206,  251,  200,   65,  259,   65,  273,   65,  203,
-      198,  204,  895,  200,   65,  894,  200,   65,   65,   65,
-      893,   65,   65,   65,  205,  197,  361,   65,  892,  197,
+      198,  204,  897,  200,   65,  896,  200,   65,   65,   65,
+      895,   65,   65,   65,  205,  197,  361,   65,  894,  197,
       250,  206,  251,  200,   65,  259,   65,  273,   65,  211,
-      211,  211,  211,  200,   65,  200,  891,   65,   65,   65,
+      211,  211,  211,  200,   65,  200,  893,   65,   65,   65,
 
-       65,   65,   65,  890,  247,  247,   65,  247,   65,  889,
-      250,  254,  254,  888,  254,  255,  255,  887,  255,  256,
+       65,   65,   65,  892,  247,  247,   65,  247,   65,  891,
+      250,  254,  254,  890,  254,  255,  255,  889,  255,  256,
       256,  363,  256,  257,  257,  275,  257,  293,  254,  254,
       254,  254,  255,  255,  255,  255,  256,  256,  256,  256,
       257,  257,  257,  257,  264,  264,  304,  264,  276,  276,
-      363,  264,  305,  886,  254,  275,  275,  293,  312,  312,
-      256,  312,  332,  257,  885,  284,  284,  884,  284,  333,
-      349,  350,  284,  355,  356,  358,  304,  883,  365,  366,
+      363,  264,  305,  888,  254,  275,  275,  293,  312,  312,
+      256,  312,  332,  257,  887,  284,  284,  886,  284,  333,
+      349,  350,  284,  355,  356,  358,  304,  885,  365,  366,
       276,  284,  305,  254,  367,  360,  368,  284,  371,  358,
       256,  369,  332,  257,  319,  319,  319,  319,  372,  333,
 
       349,  350,  360,  355,  356,  358,  364,  365,  366,  276,
       364,  373,  381,  367,  374,  360,  368,  371,  358,  284,
-      418,  369,  418,  882,  420,  264,  420,  422,  372,  422,
-      881,  360,  391,  391,  391,  391,  364,  424,  880,  424,
+      418,  369,  418,  884,  420,  264,  420,  422,  372,  422,
+      883,  360,  391,  391,  391,  391,  364,  424,  882,  424,
       364,  373,  381,  374,  376,  378,  284,  321,  321,  321,
       321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
       321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
@@ -1443,18 +1449,18 @@ static const flex_int16_t yy_chk[4596] =
       321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
 
       321,  379,  370,  380,  383,  370,  382,  383,  384,  385,
-      382,  879,  386,  380,  387,  382,  385,  878,  405,  427,
+      382,  881,  386,  380,  387,  382,  385,  880,  405,  427,
       427,  412,  413,  433,  433,  448,  414,  448,  639,  639,
-      379,  416,  426,  380,  383,  877,  382,  383,  384,  385,
+      379,  416,  426,  380,  383,  879,  382,  383,  384,  385,
       382,  386,  380,  387,  531,  382,  385,  388,  405,  388,
       412,  413,  388,  388,  408,  408,  414,  408,  388,  388,
-      428,  416,  426,  876,  388,  388,  875,  411,  411,  388,
+      428,  416,  426,  878,  388,  388,  877,  411,  411,  388,
       411,  408,  408,  408,  408,  441,  388,  388,  443,  388,
       429,  429,  388,  388,  411,  411,  411,  411,  388,  388,
       428,  428,  446,  388,  388,  431,  431,  447,  388,  438,
 
       438,  438,  438,  464,  450,  441,  450,  465,  443,  469,
-      470,  521,  429,  521,  871,  471,  429,  524,  870,  524,
+      470,  521,  429,  521,  873,  471,  429,  524,  872,  524,
       526,  526,  446,  526,  531,  818,  625,  447,  625,  431,
       431,  626,  626,  464,  626,  632,  632,  465,  632,  469,
       470,  429,  430,  430,  471,  430,  430,  430,  430,  430,
@@ -1554,279 +1560,282 @@ static const flex_int16_t yy_chk[4596] =
 
       769,  750,  771,  772,  753,  752,  773,  763,  774,  764,
       754,  765,  775,  776,  778,  755,  777,  763,  780,  724,
-      782,  766,  786,  787,  756,  767,  768,  788,  791,  769,
-      793,  797,  771,  772,  718,  798,  773,  802,  774,  802,
-      804,  712,  775,  776,  778,  777,  790,  790,  780,  782,
-      820,  790,  786,  787,  790,  819,  788,  790,  791,  708,
-      793,  797,  790,  794,  794,  798,  823,  820,  794,  804,
-      821,  794,  824,  822,  794,  821,  790,  790,  825,  819,
-      826,  790,  823,  827,  790,  828,  831,  790,  822,  830,
-      825,  790,  832,  794,  794,  833,  824,  820,  794,  831,
-
-      834,  794,  826,  835,  794,  821,  829,  827,  819,  828,
-      838,  830,  823,  836,  841,  829,  694,  840,  822,  842,
-      825,  843,  832,  844,  833,  824,  845,  847,  849,  831,
-      834,  826,  835,  850,  852,  856,  827,  857,  828,  838,
-      830,  858,  690,  836,  841,  829,  840,  860,  842,  865,
-      852,  843,  844,  861,  862,  859,  845,  847,  849,  859,
-      863,  864,  859,  850,  852,  856,  857,  866,  684,  868,
-      869,  858,  859,  872,  867,  678,  860,  867,  865,  852,
-      873,  898,  873,  861,  862,  859,  903,  867,  899,  859,
-      863,  864,  859,  900,  901,  902,  905,  866,  868,  869,
-
-      906,  859,  872,  907,  867,  898,  908,  867,  910,  911,
-      912,  642,  913,  914,  915,  903,  867,  916,  899,  917,
-      919,  920,  921,  900,  901,  902,  905,  922,  635,  923,
-      906,  924,  926,  907,  898,  927,  908,  910,  928,  911,
-      912,  913,  930,  914,  915,  931,  932,  916,  917,  933,
-      919,  920,  921,  934,  935,  937,  936,  922,  923,  938,
-      924,  938,  926,  965,  940,  927,  940,  928,  966,  967,
-      968,  969,  930,  936,  970,  931,  932,  971,  933,  972,
-      973,  974,  934,  935,  937,  975,  936,  976,  978,  633,
-      979,  980,  965,  981,  982,  983,  984,  985,  966,  967,
-
-      968,  969,  936,  987,  970,  989,  990,  971,  972,  973,
-      991,  974,  992,  993,  975,  995,  999,  976,  978,  979,
-      980,  996,  981,  998,  982,  983,  984,  985, 1015,  997,
-     1013, 1014,  987,  997,  989,  990, 1016, 1017, 1019, 1020,
-      991, 1022,  992,  993, 1023,  995,  999, 1024, 1025, 1026,
-      996, 1027,  998, 1028, 1030, 1034, 1035, 1015,  997, 1036,
-     1013, 1014,  997, 1039, 1040, 1016, 1017, 1041, 1019, 1020,
-     1022, 1042, 1043, 1023, 1044, 1046, 1047, 1024, 1025, 1026,
-     1048, 1027, 1049, 1028, 1030, 1034, 1035, 1050, 1053, 1036,
-     1055, 1057, 1039, 1060, 1040, 1063, 1064, 1041, 1065, 1066,
-
-     1042, 1043, 1067, 1044, 1046, 1068, 1047, 1069, 1070, 1072,
-     1048, 1073, 1049, 1074, 1075,  623, 1077, 1050, 1053, 1055,
-     1081, 1057, 1082, 1060, 1083, 1063, 1064, 1065, 1084, 1066,
-     1086, 1087, 1067, 1088, 1089, 1068, 1090, 1069, 1070, 1072,
-     1073, 1093, 1074, 1095, 1075, 1077, 1096, 1097, 1098, 1100,
-     1081, 1103, 1082, 1083, 1105,  596, 1106, 1107, 1084, 1109,
-     1086, 1087, 1110, 1088, 1089, 1090, 1157, 1157,  593, 1173,
-     1093, 1173, 1206, 1095, 1206, 1096, 1097, 1098,  547, 1100,
-      538, 1103, 1166, 1166, 1105, 1106, 1107, 1166,  490, 1109,
-      467,  466, 1110, 1114, 1114, 1114, 1114, 1114, 1114, 1114,
-
-     1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,
-     1114, 1114, 1114, 1114, 1115, 1115, 1115, 1115, 1115, 1115,
-     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
-     1115, 1115, 1115, 1115, 1115, 1116, 1116, 1116, 1116, 1116,
-     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
-     1116, 1116, 1116, 1116, 1116, 1116, 1117, 1117, 1117, 1117,
-     1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
-     1117, 1117, 1117, 1117, 1117, 1117, 1117, 1118, 1118, 1118,
-     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
-     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1119, 1119,
-
-     1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119,
-     1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1120,
-     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
-     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
-     1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121,
-     1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121,
-     1121, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
-     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
-     1122, 1122, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123,
-     1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123,
-
-     1123, 1123, 1123, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
-     1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
-     1124, 1124, 1124, 1124, 1125, 1125, 1125, 1125, 1125, 1125,
-     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
-     1125, 1125, 1125, 1125, 1125, 1126, 1126, 1126, 1126, 1126,
+      782,  766,  786,  787,  756,  767,  768,  788,  718,  769,
+      791,  793,  771,  772,  797,  798,  773,  802,  774,  802,
+     1169, 1169,  775,  776,  778,  777,  804,  822,  780,  782,
+      820,  712,  786,  787,  819,  708,  788,  790,  790,  790,
+      791,  793,  822,  790,  797,  798,  790,  820,  823,  790,
+      794,  794,  794,  694,  790,  804,  794,  831,  819,  794,
+      821,  824,  794,  825,  823,  821,  826,  790,  790,  790,
+      831,  832,  822,  790,  827,  825,  790,  820,  828,  790,
+
+      794,  794,  794,  790,  829,  824,  794,  819,  826,  794,
+      830,  833,  794,  829,  823,  821,  834,  690,  827,  835,
+      831,  832,  828,  836,  841,  825,  838,  840,  842,  843,
+      684,  844,  830,  845,  824,  847,  849,  826,  850,  856,
+      833,  857,  852,  829,  858,  859,  834,  827,  835,  678,
+      861,  828,  862,  836,  841,  838,  840,  842,  852,  843,
+      844,  830,  863,  845,  864,  847,  849,  865,  850,  856,
+      866,  857,  852,  858,  860,  859,  867,  868,  860,  861,
+      869,  860,  862,  869,  642,  870,  871,  852,  874,  905,
+      635,  860,  863,  869,  864,  900,  875,  865,  875,  901,
+
+      866,  902,  903,  904,  860,  867,  907,  868,  860,  908,
+      869,  860,  909,  869,  870,  871,  910,  874,  905,  900,
+      860,  912,  869,  913,  914,  633,  915,  916,  917,  901,
+      918,  902,  903,  904,  919,  922,  907,  920,  923,  908,
+      924,  925,  909,  926,  927,  929,  910,  930,  900,  931,
+      912,  932,  934,  913,  914,  915,  935,  916,  917,  936,
+      918,  937,  938,  939,  919,  922,  920,  940,  923,  941,
+      924,  925,  926,  927,  942,  929,  942,  930,  969,  931,
+      932,  944,  934,  944,  940,  970,  935,  971,  972,  936,
+      937,  938,  939,  973,  974,  975,  978,  940,  941,  976,
+
+      977,  979,  980,  982,  623,  983,  984,  969,  985,  986,
+      987,  988,  989,  940,  990,  970,  992,  971,  972,  994,
+      995,  996,  997,  973,  974,  975,  978,  998,  976,  977,
+      979,  999,  980,  982,  983,  984, 1001,  985,  986, 1002,
+      987,  988,  989, 1003,  990,  992, 1004, 1003,  994,  995,
+      996, 1005,  997, 1019, 1020,  596, 1021,  998, 1022, 1023,
+     1025,  999, 1026,  593, 1028, 1029, 1001, 1030, 1002, 1031,
+     1032, 1033, 1003, 1034, 1035, 1004, 1003, 1037, 1041, 1042,
+     1043, 1005, 1044, 1019, 1020, 1021, 1047, 1022, 1023, 1048,
+     1025, 1049, 1026, 1028, 1029, 1050, 1051, 1030, 1052, 1031,
+
+     1032, 1033, 1054, 1034, 1035, 1055, 1056, 1037, 1041, 1042,
+     1043, 1057, 1044, 1058, 1061, 1047, 1063, 1065, 1066, 1048,
+     1069, 1049, 1070, 1073, 1050, 1051, 1074, 1052, 1075, 1076,
+     1077, 1054, 1078, 1079, 1080, 1055, 1056, 1082,  547, 1083,
+     1084, 1057, 1085, 1058, 1061, 1063, 1087, 1065, 1066, 1093,
+     1069, 1094, 1070, 1073, 1095, 1096, 1074, 1075, 1098, 1076,
+     1077, 1099, 1078, 1079, 1080, 1100, 1101, 1082, 1083, 1084,
+     1102, 1105, 1085, 1107, 1112, 1087, 1108, 1109, 1110, 1093,
+     1115, 1094, 1117, 1095, 1118, 1096, 1119, 1121, 1098, 1122,
+      538, 1099, 1178, 1178,  490, 1100, 1101, 1178,  467, 1102,
+
+     1105,  466,  455, 1107, 1112, 1108, 1109, 1110,  437, 1185,
+     1115, 1185, 1117, 1118, 1218, 1119, 1218, 1121,  410, 1122,
+     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
      1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
-     1126, 1126, 1126, 1126, 1126, 1126, 1127, 1127, 1127, 1127,
+     1126, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127,
      1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127,
-     1127, 1127, 1127, 1127, 1127, 1127, 1127, 1128, 1128, 1128,
+     1127, 1127, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
      1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
-
-     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1129, 1129,
+     1128, 1128, 1128, 1129, 1129, 1129, 1129, 1129, 1129, 1129,
      1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129,
-     1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1130,
-     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
+
+     1129, 1129, 1129, 1129, 1130, 1130, 1130, 1130, 1130, 1130,
      1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
+     1130, 1130, 1130, 1130, 1130, 1131, 1131, 1131, 1131, 1131,
      1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
-     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
-     1131, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132,
+     1131, 1131, 1131, 1131, 1131, 1131, 1132, 1132, 1132, 1132,
      1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132,
-     1132, 1132, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133,
-
+     1132, 1132, 1132, 1132, 1132, 1132, 1132, 1133, 1133, 1133,
      1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133,
-     1133, 1133, 1133, 1134, 1134, 1134, 1134, 1134, 1134, 1134,
+     1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1134, 1134,
      1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134,
-     1134, 1134, 1134, 1134, 1135,  455, 1135,  437, 1135, 1135,
-     1213, 1213, 1213, 1135, 1136, 1136, 1136, 1136, 1136, 1136,
+
+     1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1135,
+     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
+     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
+     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
      1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
-     1136, 1136, 1136, 1136, 1137,  410, 1137,  389, 1137, 1137,
-     1167, 1167,  362, 1137, 1138, 1167, 1138, 1138, 1138, 1138,
+     1136, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
+     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
+     1137, 1137, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
      1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
-     1138, 1138, 1138, 1138, 1138, 1139,  353, 1139, 1139, 1139,
+     1138, 1138, 1138, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
 
      1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
-     1139, 1139, 1139, 1139, 1139, 1139, 1140, 1140,  351, 1140,
-      346, 1140, 1140,  344,  343,  328, 1140, 1141,  315, 1141,
+     1139, 1139, 1139, 1139, 1140, 1140, 1140, 1140, 1140, 1140,
+     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
+     1140, 1140, 1140, 1140, 1140, 1141, 1141, 1141, 1141, 1141,
      1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141,
-     1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1142, 1142,
+     1141, 1141, 1141, 1141, 1141, 1141, 1142, 1142, 1142, 1142,
      1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
-     1142, 1142, 1142,  314, 1142,  313, 1142, 1142, 1142, 1143,
-      310, 1143, 1143,  296, 1143, 1143, 1143, 1143, 1143, 1143,
-     1143, 1143, 1143, 1143,  289, 1143,  288, 1143, 1143, 1143,
-     1144,  287,  286, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
+     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1143, 1143, 1143,
+     1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143,
+     1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1144, 1144,
 
      1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
-     1144, 1145,  283, 1145,  281, 1145, 1145,  280,  271,  270,
-     1145, 1146,  267, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
+     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1145,
+     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
+     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
      1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
-     1146, 1146, 1147,  266, 1147, 1147, 1147, 1147, 1147, 1147,
-     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,  249,
-     1147, 1147, 1147, 1148,  245, 1148,  241, 1148,  239, 1148,
-     1148, 1148, 1148,  238, 1148, 1148,  236,  235,  234, 1148,
-     1149,  230, 1149, 1149, 1149,  216, 1149, 1149, 1149, 1149,
-     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
-
-     1149, 1150,  215, 1150,  214, 1150, 1150,  210,  183,  182,
-     1150, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
+     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
+     1146, 1147,  389, 1147,  362, 1147, 1147, 1225, 1225, 1225,
+     1147, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
+     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
+     1148, 1149,  353, 1149,  351, 1149, 1149, 1179, 1179,  346,
+
+     1149, 1150, 1179, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
+     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
+     1150, 1150, 1151,  344, 1151, 1151, 1151, 1151, 1151, 1151,
      1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
-     1151, 1151, 1152,  180, 1152, 1152, 1152, 1152, 1152,  178,
-     1152, 1152, 1152, 1152, 1152, 1152, 1152,  177, 1152,  174,
-     1152, 1152, 1152, 1153,  173, 1153,  172, 1153, 1153, 1153,
-     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,  168,  166,
-      164, 1153, 1153, 1153, 1154, 1154, 1154, 1154, 1154, 1154,
+     1151, 1151, 1151, 1152, 1152,  343, 1152,  328, 1152, 1152,
+      315,  314,  313, 1152, 1153,  310, 1153, 1153, 1153, 1153,
+     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
+     1153, 1153, 1153, 1153, 1153, 1154, 1154, 1154, 1154, 1154,
      1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
-     1154, 1154, 1154, 1154, 1154, 1155,  161, 1155, 1155, 1155,
+      296, 1154,  289, 1154, 1154, 1154, 1155,  288, 1155, 1155,
 
-     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
-     1155, 1155, 1155, 1155, 1155, 1155, 1156, 1156,  160,  159,
-      158, 1156, 1156, 1158,  150, 1158, 1158, 1158, 1158, 1158,
+      287, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
+     1155,  286, 1155,  283, 1155, 1155, 1155, 1156,  281,  280,
+     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
+     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1157,  271,
+     1157,  270, 1157, 1157,  267,  266,  249, 1157, 1158,  245,
      1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
-     1158, 1158, 1158, 1158, 1159,  149,  145, 1159, 1159, 1159,
-     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,  144,
-     1159,  142, 1159, 1160,  137, 1160, 1160, 1160, 1160,  135,
-     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
-     1160, 1160, 1160, 1160, 1161, 1161, 1161, 1161, 1161, 1161,
-     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,  130,
-
-     1161,  126, 1161, 1161, 1161, 1162,  120, 1162, 1162, 1162,
-      115, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
-      113,  112,  109, 1162, 1162, 1162, 1163,  107, 1163,  105,
-     1163, 1163,  104,  103,   99, 1163, 1164,   96, 1164, 1164,
-     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
-     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1165,   95, 1165,
-     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
-     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1168, 1168,
-     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
-     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1169,
-
-       92, 1169,   90, 1169, 1169,   86,   84,   78, 1169, 1170,
-     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
+     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1159,
+      241, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
+     1159, 1159, 1159, 1159, 1159, 1159,  239, 1159, 1159, 1159,
+     1160,  238, 1160,  236, 1160,  235, 1160, 1160, 1160, 1160,
+
+      234, 1160, 1160,  230,  216,  215, 1160, 1161,  214, 1161,
+     1161, 1161,  210, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
+     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1162,  183,
+     1162,  182, 1162, 1162,  180,  178,  177, 1162, 1163, 1163,
+     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
+     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1164,
+      174, 1164, 1164, 1164, 1164, 1164,  173, 1164, 1164, 1164,
+     1164, 1164, 1164, 1164,  172, 1164,  168, 1164, 1164, 1164,
+     1165,  166, 1165,  164, 1165, 1165, 1165, 1165, 1165, 1165,
+     1165, 1165, 1165, 1165, 1165,  161,  160,  159, 1165, 1165,
+
+     1165, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
+     1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
+     1166, 1166, 1167,  158, 1167, 1167, 1167, 1167, 1167, 1167,
+     1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167,
+     1167, 1167, 1167, 1168, 1168,  150,  149,  145, 1168, 1168,
+     1170,  144, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
      1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
-     1171,   77, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
-     1171, 1171, 1171, 1171, 1171, 1171, 1171,   74, 1171, 1171,
-     1171, 1172,   71, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
-     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
-     1172, 1172, 1174,   66, 1174,   63, 1174, 1174,   59,   55,
-       16, 1174,   15, 1174, 1175,    0, 1175, 1175, 1175, 1175,
-     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
+     1170, 1171,  142,  137, 1171, 1171, 1171, 1171, 1171, 1171,
+     1171, 1171, 1171, 1171, 1171, 1171,  135, 1171,  130, 1171,
+     1172,  126, 1172, 1172, 1172, 1172,  120, 1172, 1172, 1172,
 
-     1175, 1175, 1175, 1175, 1175, 1176,    0, 1176, 1176, 1176,
+     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
+     1172, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
+     1173, 1173, 1173, 1173, 1173, 1173,  115, 1173,  113, 1173,
+     1173, 1173, 1174,  112, 1174, 1174, 1174,  109, 1174, 1174,
+     1174, 1174, 1174, 1174, 1174, 1174, 1174,  107,  105,  104,
+     1174, 1174, 1174, 1175,  103, 1175,   99, 1175, 1175,   96,
+       95,   92, 1175, 1176,   90, 1176, 1176, 1176, 1176, 1176,
      1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
-     1176, 1176, 1176, 1176, 1176, 1176, 1177,    0, 1177, 1177,
+     1176, 1176, 1176, 1176, 1177,   86, 1177, 1177, 1177, 1177,
      1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
-     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1178,    0, 1178,
-     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
-     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1179, 1179,
-     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
-     1179, 1179, 1179,    0, 1179,    0, 1179, 1179, 1179, 1180,
-        0, 1180, 1180,    0, 1180, 1180, 1180, 1180, 1180, 1180,
-
-     1180, 1180, 1180, 1180,    0, 1180,    0, 1180, 1180, 1180,
-     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
-     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
-     1181, 1182,    0,    0, 1182, 1182, 1182, 1182, 1182, 1182,
+
+     1177, 1177, 1177, 1177, 1177, 1180, 1180, 1180, 1180, 1180,
+     1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180,
+     1180, 1180, 1180, 1180, 1180, 1180, 1181,   84, 1181,   78,
+     1181, 1181,   77,   74,   71, 1181, 1182, 1182, 1182, 1182,
      1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
-     1182, 1182, 1183,    0, 1183,    0, 1183, 1183,    0,    0,
-        0, 1183, 1184,    0, 1184,    0, 1184,    0, 1184, 1184,
-     1184, 1184,    0, 1184, 1184,    0,    0,    0, 1184, 1185,
-        0, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
-     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
+     1182, 1182, 1182, 1182, 1182, 1182, 1182, 1183,   66, 1183,
+     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
+     1183, 1183, 1183, 1183,   63, 1183, 1183, 1183, 1184,   59,
+     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
+     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1186,
 
-     1186,    0, 1186,    0, 1186, 1186,    0,    0,    0, 1186,
-     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
+       55, 1186,   16, 1186, 1186,   15,    0,    0, 1186,    0,
+     1186, 1187,    0, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
      1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
-     1187, 1188,    0, 1188, 1188, 1188, 1188, 1188,    0, 1188,
-     1188, 1188, 1188, 1188, 1188, 1188,    0, 1188,    0, 1188,
-     1188, 1188, 1189,    0, 1189,    0, 1189, 1189, 1189, 1189,
-     1189, 1189, 1189, 1189, 1189, 1189, 1189,    0,    0,    0,
-     1189, 1189, 1189, 1190,    0, 1190, 1190, 1190, 1190, 1190,
+     1187, 1187, 1188,    0, 1188, 1188, 1188, 1188, 1188, 1188,
+     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
+     1188, 1188, 1188, 1189,    0, 1189, 1189, 1189, 1189, 1189,
+     1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
+     1189, 1189, 1189, 1189, 1190,    0, 1190, 1190, 1190, 1190,
      1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
-     1190, 1190, 1190, 1190, 1191,    0, 1191, 1191, 1191, 1191,
+     1190, 1190, 1190, 1190, 1190, 1191, 1191, 1191, 1191, 1191,
 
      1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
-     1191, 1191, 1191, 1191, 1191, 1192, 1192,    0,    0,    0,
-     1192, 1192, 1193,    0, 1193, 1193, 1193, 1193, 1193, 1193,
+        0, 1191,    0, 1191, 1191, 1191, 1192,    0, 1192, 1192,
+        0, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
+     1192,    0, 1192,    0, 1192, 1192, 1192, 1193, 1193, 1193,
      1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
-     1193, 1193, 1193, 1194,    0,    0, 1194, 1194, 1194, 1194,
-     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,    0, 1194,
-        0, 1194, 1195,    0, 1195, 1195, 1195, 1195,    0, 1195,
-     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
-     1195, 1195, 1195, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
-     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,    0, 1196,
-
-        0, 1196, 1196, 1196, 1197,    0, 1197, 1197, 1197,    0,
-     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,    0,
-        0,    0, 1197, 1197, 1197, 1198,    0, 1198, 1198, 1198,
-     1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
-     1198, 1198, 1198, 1198, 1198, 1198, 1199,    0, 1199, 1199,
+     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1194,    0,
+        0, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
+     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1195,
+        0, 1195,    0, 1195, 1195,    0,    0,    0, 1195, 1196,
+        0, 1196,    0, 1196,    0, 1196, 1196, 1196, 1196,    0,
+
+     1196, 1196,    0,    0,    0, 1196, 1197,    0, 1197, 1197,
+     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
+     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1198,    0, 1198,
+        0, 1198, 1198,    0,    0,    0, 1198, 1199, 1199, 1199,
      1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
-     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1200, 1200, 1200,
-     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
-     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1201,    0,
-     1201,    0, 1201, 1201,    0,    0,    0, 1201, 1202,    0,
-
-     1202,    0, 1202, 1202,    0,    0,    0, 1202, 1203, 1203,
+     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1200,    0,
+     1200, 1200, 1200, 1200, 1200,    0, 1200, 1200, 1200, 1200,
+     1200, 1200, 1200,    0, 1200,    0, 1200, 1200, 1200, 1201,
+        0, 1201,    0, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
+     1201, 1201, 1201, 1201,    0,    0,    0, 1201, 1201, 1201,
+
+     1202,    0, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
+     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
+     1202, 1203,    0, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
      1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
-     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1204,
-     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
-     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
-     1205,    0, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205,
-     1205, 1205, 1205, 1205, 1205, 1205, 1205,    0, 1205, 1205,
-     1205, 1207,    0, 1207,    0, 1207, 1207,    0,    0,    0,
-     1207,    0, 1207, 1208,    0, 1208, 1208, 1208, 1208, 1208,
-     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
+     1203, 1203, 1204, 1204,    0,    0,    0, 1204, 1204, 1205,
+        0, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205,
+     1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205,
+     1206,    0,    0, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
+     1206, 1206, 1206, 1206, 1206,    0, 1206,    0, 1206, 1207,
+        0, 1207, 1207, 1207, 1207,    0, 1207, 1207, 1207, 1207,
 
-     1208, 1208, 1208, 1208, 1209,    0, 1209, 1209, 1209, 1209,
-     1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209,
-     1209, 1209, 1209, 1209, 1209, 1210,    0, 1210, 1210, 1210,
+     1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207,
+     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
+     1208, 1208, 1208, 1208, 1208,    0, 1208,    0, 1208, 1208,
+     1208, 1209,    0, 1209, 1209, 1209,    0, 1209, 1209, 1209,
+     1209, 1209, 1209, 1209, 1209, 1209,    0,    0,    0, 1209,
+     1209, 1209, 1210,    0, 1210, 1210, 1210, 1210, 1210, 1210,
      1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
-     1210, 1210, 1210, 1210, 1210, 1210, 1211,    0, 1211, 1211,
-        0, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
-     1211,    0, 1211,    0, 1211, 1211, 1211, 1212, 1212, 1212,
-     1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212,
-     1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1214,    0,
-     1214,    0, 1214, 1214,    0,    0,    0, 1214, 1215,    0,
+     1210, 1210, 1210, 1211,    0, 1211, 1211, 1211, 1211, 1211,
+     1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
+     1211, 1211, 1211, 1211, 1212, 1212, 1212, 1212, 1212, 1212,
 
+     1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212,
+     1212, 1212, 1212, 1212, 1212, 1213,    0, 1213,    0, 1213,
+     1213,    0,    0,    0, 1213, 1214,    0, 1214,    0, 1214,
+     1214,    0,    0,    0, 1214, 1215, 1215, 1215, 1215, 1215,
      1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
-     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1216,
-        0, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
+     1215, 1215, 1215, 1215, 1215, 1215, 1216, 1216, 1216, 1216,
      1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
-     1217, 1217,    0,    0,    0, 1217, 1217, 1218,    0, 1218,
-     1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218,
-     1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1219, 1219,
-     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
-     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1220,
-     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
+     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1217,    0, 1217,
+     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
+     1217, 1217, 1217, 1217,    0, 1217, 1217, 1217, 1219,    0,
 
+     1219,    0, 1219, 1219,    0,    0,    0, 1219,    0, 1219,
+     1220,    0, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
      1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
-     1113, 1113, 1113, 1113, 1113
+     1220, 1221,    0, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
+     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
+     1221, 1221, 1222,    0, 1222, 1222, 1222, 1222, 1222, 1222,
+     1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222,
+     1222, 1222, 1222, 1223,    0, 1223, 1223,    0, 1223, 1223,
+     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,    0, 1223,
+        0, 1223, 1223, 1223, 1224, 1224, 1224, 1224, 1224, 1224,
+
+     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
+     1224, 1224, 1224, 1224, 1224, 1226,    0, 1226,    0, 1226,
+     1226,    0,    0,    0, 1226, 1227,    0, 1227, 1227, 1227,
+     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
+     1227, 1227, 1227, 1227, 1227, 1227, 1228,    0, 1228, 1228,
+     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
+     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1229, 1229,    0,
+        0,    0, 1229, 1229, 1230,    0, 1230, 1230, 1230, 1230,
+     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
+     1230, 1230, 1230, 1230, 1230, 1231, 1231, 1231, 1231, 1231,
+
+     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
+     1231, 1231, 1231, 1231, 1231, 1231, 1232, 1232, 1232, 1232,
+     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
+     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
 
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
+     1125, 1125
     } ;
 
 static yy_state_type yy_last_accepting_state;
@@ -1845,7 +1854,8 @@ int yy_flex_debug = 0;
 char *yytext;
 #line 1 "scan.l"
 /* scan.l - scanner for flex input -*-C-*- */
-#line 4 "scan.l"
+
+#line 10 "scan.l"
 /*  Copyright (c) 1990 The Regents of the University of California. */
 /*  All rights reserved. */
 
@@ -1877,7 +1887,6 @@ char *yytext;
 /*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR */
 /*  PURPOSE. */
 
-#include "flexdef.h"
 #include "parse.h"
 extern bool tablesverify, tablesext;
 extern int trlcontxt; /* Set in  parse.y for each rule. */
@@ -1963,9 +1972,9 @@ extern const char *escaped_qstart, *esca
     if (!indented_code) line_directive_out(NULL, 0);\
 } while (0)
 
-#line 1966 "scan.c"
+#line 1976 "scan.c"
 
-#line 1968 "scan.c"
+#line 1978 "scan.c"
 
 #define INITIAL 0
 #define SECT2 1
@@ -2219,9 +2228,9 @@ YY_DECL
 		}
 
 	{
-#line 158 "scan.l"
+#line 163 "scan.l"
 
-#line 160 "scan.l"
+#line 165 "scan.l"
 	static int bracelevel, didadef, indented_code;
 	static int doing_rule_action = false;
 	static int option_sense;
@@ -2231,7 +2240,7 @@ YY_DECL
 	char nmdef[MAXLINE];
 
 
-#line 2234 "scan.c"
+#line 2244 "scan.c"
 
 	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
 		{
@@ -2259,13 +2268,13 @@ yy_match:
 			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
 				{
 				yy_current_state = (int) yy_def[yy_current_state];
-				if ( yy_current_state >= 1114 )
+				if ( yy_current_state >= 1126 )
 					yy_c = yy_meta[yy_c];
 				}
 			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
 			++yy_cp;
 			}
-		while ( yy_base[yy_current_state] != 4511 );
+		while ( yy_base[yy_current_state] != 4538 );
 
 yy_find_action:
 		yy_act = yy_accept[yy_current_state];
@@ -2291,39 +2300,39 @@ do_action:	/* This label is used only to
 
 case 1:
 YY_RULE_SETUP
-#line 170 "scan.l"
+#line 175 "scan.l"
 START_CODEBLOCK(true);
 	YY_BREAK
 case 2:
 YY_RULE_SETUP
-#line 171 "scan.l"
+#line 176 "scan.l"
 add_action("/*[""["); yy_push_state( COMMENT );
 	YY_BREAK
 case 3:
 YY_RULE_SETUP
-#line 172 "scan.l"
+#line 177 "scan.l"
 yy_push_state( LINEDIR );
 	YY_BREAK
 case 4:
 YY_RULE_SETUP
-#line 173 "scan.l"
+#line 178 "scan.l"
 return SCDECL;
 	YY_BREAK
 case 5:
 YY_RULE_SETUP
-#line 174 "scan.l"
+#line 179 "scan.l"
 return XSCDECL;
 	YY_BREAK
 case 6:
 /* rule 6 can match eol */
 YY_RULE_SETUP
-#line 175 "scan.l"
+#line 180 "scan.l"
 START_CODEBLOCK(false);
 	YY_BREAK
 case 7:
 /* rule 7 can match eol */
 YY_RULE_SETUP
-#line 176 "scan.l"
+#line 181 "scan.l"
 {
                 brace_start_line = linenum;
                 ++linenum;
@@ -2334,17 +2343,17 @@ YY_RULE_SETUP
 	YY_BREAK
 case 8:
 YY_RULE_SETUP
-#line 184 "scan.l"
+#line 189 "scan.l"
 synerr( _("malformed '%top' directive") );
 	YY_BREAK
 case 9:
 YY_RULE_SETUP
-#line 186 "scan.l"
+#line 191 "scan.l"
 /* discard */
 	YY_BREAK
 case 10:
 YY_RULE_SETUP
-#line 188 "scan.l"
+#line 193 "scan.l"
 {
 			sectnum = 2;
 			bracelevel = 0;
@@ -2357,42 +2366,42 @@ YY_RULE_SETUP
 case 11:
 /* rule 11 can match eol */
 YY_RULE_SETUP
-#line 197 "scan.l"
+#line 202 "scan.l"
 yytext_is_array = false; ++linenum;
 	YY_BREAK
 case 12:
 /* rule 12 can match eol */
 YY_RULE_SETUP
-#line 198 "scan.l"
+#line 203 "scan.l"
 yytext_is_array = true; ++linenum;
 	YY_BREAK
 case 13:
 YY_RULE_SETUP
-#line 200 "scan.l"
+#line 205 "scan.l"
 BEGIN(OPTION); return TOK_OPTION;
 	YY_BREAK
 case 14:
 /* rule 14 can match eol */
 YY_RULE_SETUP
-#line 202 "scan.l"
+#line 207 "scan.l"
 ++linenum; /* ignore */
 	YY_BREAK
 case 15:
 /* rule 15 can match eol */
 YY_RULE_SETUP
-#line 203 "scan.l"
+#line 208 "scan.l"
 ++linenum;	/* ignore */
 	YY_BREAK
 /* xgettext: no-c-format */
 case 16:
 /* rule 16 can match eol */
 YY_RULE_SETUP
-#line 206 "scan.l"
+#line 211 "scan.l"
 synerr( _( "unrecognized '%' directive" ) );
 	YY_BREAK
 case 17:
 YY_RULE_SETUP
-#line 208 "scan.l"
+#line 213 "scan.l"
 {
 			if(yyleng < MAXLINE)
         		 {
@@ -2410,51 +2419,51 @@ YY_RULE_SETUP
 	YY_BREAK
 case 18:
 YY_RULE_SETUP
-#line 223 "scan.l"
+#line 228 "scan.l"
 RETURNNAME;
 	YY_BREAK
 case 19:
 /* rule 19 can match eol */
 YY_RULE_SETUP
-#line 224 "scan.l"
+#line 229 "scan.l"
 ++linenum; /* allows blank lines in section 1 */
 	YY_BREAK
 case 20:
 /* rule 20 can match eol */
 YY_RULE_SETUP
-#line 225 "scan.l"
+#line 230 "scan.l"
 ACTION_ECHO; ++linenum; /* maybe end of comment line */
 	YY_BREAK
 
 /* */
 case 21:
 YY_RULE_SETUP
-#line 230 "scan.l"
+#line 235 "scan.l"
 ACTION_ECHO;
 	YY_BREAK
 case 22:
 YY_RULE_SETUP
-#line 231 "scan.l"
+#line 236 "scan.l"
 ACTION_ECHO;
 	YY_BREAK
 case 23:
 /* rule 23 can match eol */
 YY_RULE_SETUP
-#line 233 "scan.l"
+#line 238 "scan.l"
 ++linenum; ACTION_ECHO;
 	YY_BREAK
 
 
 case 24:
 YY_RULE_SETUP
-#line 236 "scan.l"
+#line 241 "scan.l"
 add_action("*/]""]"); yy_pop_state();
 	YY_BREAK
 
 
 case 25:
 YY_RULE_SETUP
-#line 239 "scan.l"
+#line 244 "scan.l"
 ACTION_ECHO; yy_pop_state();
 	YY_BREAK
 
@@ -2462,41 +2471,41 @@ ACTION_ECHO; yy_pop_state();
 /* This is the same as COMMENT, but is discarded rather than output. */
 case 26:
 YY_RULE_SETUP
-#line 244 "scan.l"
+#line 249 "scan.l"
 yy_pop_state();
 	YY_BREAK
 case 27:
 YY_RULE_SETUP
-#line 245 "scan.l"
+#line 250 "scan.l"
 ;
 	YY_BREAK
 case 28:
 YY_RULE_SETUP
-#line 246 "scan.l"
+#line 251 "scan.l"
 ;
 	YY_BREAK
 case 29:
 /* rule 29 can match eol */
 YY_RULE_SETUP
-#line 247 "scan.l"
+#line 252 "scan.l"
 ++linenum;
 	YY_BREAK
 
 
 case 30:
 YY_RULE_SETUP
-#line 251 "scan.l"
+#line 256 "scan.l"
 yy_pop_state();
 	YY_BREAK
 case 31:
 YY_RULE_SETUP
-#line 252 "scan.l"
+#line 257 "scan.l"
 ;
 	YY_BREAK
 case 32:
 /* rule 32 can match eol */
 YY_RULE_SETUP
-#line 253 "scan.l"
+#line 258 "scan.l"
 ++linenum;
 	YY_BREAK
 
@@ -2504,17 +2513,17 @@ YY_RULE_SETUP
 case 33:
 /* rule 33 can match eol */
 YY_RULE_SETUP
-#line 257 "scan.l"
+#line 262 "scan.l"
 yy_pop_state();
 	YY_BREAK
 case 34:
 YY_RULE_SETUP
-#line 258 "scan.l"
+#line 263 "scan.l"
 linenum = myctoi( yytext );
 	YY_BREAK
 case 35:
 YY_RULE_SETUP
-#line 260 "scan.l"
+#line 265 "scan.l"
 {
 			free(infilename);
 			infilename = xstrdup(yytext + 1);
@@ -2523,19 +2532,19 @@ YY_RULE_SETUP
 	YY_BREAK
 case 36:
 YY_RULE_SETUP
-#line 265 "scan.l"
+#line 270 "scan.l"
 /* ignore spurious characters */
 	YY_BREAK
 
 
 case 37:
 YY_RULE_SETUP
-#line 268 "scan.l"
+#line 273 "scan.l"
 ACTION_ECHO_QSTART;
 	YY_BREAK
 case 38:
 YY_RULE_SETUP
-#line 269 "scan.l"
+#line 274 "scan.l"
 ACTION_ECHO_QEND;
 	YY_BREAK
 
@@ -2543,23 +2552,23 @@ ACTION_ECHO_QEND;
 case 39:
 /* rule 39 can match eol */
 YY_RULE_SETUP
-#line 273 "scan.l"
+#line 278 "scan.l"
 ++linenum; END_CODEBLOCK;
 	YY_BREAK
 case 40:
 YY_RULE_SETUP
-#line 274 "scan.l"
+#line 279 "scan.l"
 ACTION_ECHO;
 	YY_BREAK
 case 41:
 YY_RULE_SETUP
-#line 275 "scan.l"
+#line 280 "scan.l"
 ACTION_ECHO;
 	YY_BREAK
 case 42:
 /* rule 42 can match eol */
 YY_RULE_SETUP
-#line 276 "scan.l"
+#line 281 "scan.l"
 {
 			++linenum;
 			ACTION_ECHO;
@@ -2570,7 +2579,7 @@ YY_RULE_SETUP
 
 case 43:
 YY_RULE_SETUP
-#line 284 "scan.l"
+#line 289 "scan.l"
 {
                 if( --brace_depth == 0){
                     /* TODO: Matched. */
@@ -2581,7 +2590,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 44:
 YY_RULE_SETUP
-#line 292 "scan.l"
+#line 297 "scan.l"
 {
                 brace_depth++;
                 buf_strnappend(&top_buf, yytext, yyleng);
@@ -2590,7 +2599,7 @@ YY_RULE_SETUP
 case 45:
 /* rule 45 can match eol */
 YY_RULE_SETUP
-#line 297 "scan.l"
+#line 302 "scan.l"
 {
                 ++linenum;
                 buf_strnappend(&top_buf, yytext, yyleng);
@@ -2598,23 +2607,23 @@ YY_RULE_SETUP
 	YY_BREAK
 case 46:
 YY_RULE_SETUP
-#line 302 "scan.l"
+#line 307 "scan.l"
 buf_strnappend(&top_buf, escaped_qstart, (int) strlen(escaped_qstart));
 	YY_BREAK
 case 47:
 YY_RULE_SETUP
-#line 303 "scan.l"
+#line 308 "scan.l"
 buf_strnappend(&top_buf, escaped_qend, (int) strlen(escaped_qend));
 	YY_BREAK
 case 48:
 YY_RULE_SETUP
-#line 304 "scan.l"
+#line 309 "scan.l"
 {
        buf_strnappend(&top_buf, yytext, yyleng);
     }
 	YY_BREAK
 case YY_STATE_EOF(CODEBLOCK_MATCH_BRACE):
-#line 308 "scan.l"
+#line 313 "scan.l"
 {
                 linenum = brace_start_line;
                 synerr(_("Unmatched '{'"));
@@ -2625,12 +2634,12 @@ case YY_STATE_EOF(CODEBLOCK_MATCH_BRACE)
 
 case 49:
 YY_RULE_SETUP
-#line 317 "scan.l"
+#line 322 "scan.l"
 /* separates name and definition */
 	YY_BREAK
 case 50:
 YY_RULE_SETUP
-#line 319 "scan.l"
+#line 324 "scan.l"
 {
  		        if(yyleng < MAXLINE)
  		         {
@@ -2656,7 +2665,7 @@ YY_RULE_SETUP
 case 51:
 /* rule 51 can match eol */
 YY_RULE_SETUP
-#line 341 "scan.l"
+#line 346 "scan.l"
 {
 			if ( ! didadef )
 				synerr( _( "incomplete name definition" ) );
@@ -2669,42 +2678,42 @@ YY_RULE_SETUP
 case 52:
 /* rule 52 can match eol */
 YY_RULE_SETUP
-#line 351 "scan.l"
+#line 356 "scan.l"
 ++linenum; BEGIN(INITIAL);
 	YY_BREAK
 case 53:
 YY_RULE_SETUP
-#line 352 "scan.l"
+#line 357 "scan.l"
 option_sense = true;
 	YY_BREAK
 case 54:
 YY_RULE_SETUP
-#line 354 "scan.l"
+#line 359 "scan.l"
 return '=';
 	YY_BREAK
 case 55:
 YY_RULE_SETUP
-#line 356 "scan.l"
+#line 361 "scan.l"
 option_sense = ! option_sense;
 	YY_BREAK
 case 56:
 YY_RULE_SETUP
-#line 358 "scan.l"
+#line 363 "scan.l"
 csize = option_sense ? 128 : 256;
 	YY_BREAK
 case 57:
 YY_RULE_SETUP
-#line 359 "scan.l"
+#line 364 "scan.l"
 csize = option_sense ? 256 : 128;
 	YY_BREAK
 case 58:
 YY_RULE_SETUP
-#line 361 "scan.l"
+#line 366 "scan.l"
 long_align = option_sense;
 	YY_BREAK
 case 59:
 YY_RULE_SETUP
-#line 362 "scan.l"
+#line 367 "scan.l"
 {
 			ACTION_M4_IFDEF( "M4""_YY_ALWAYS_INTERACTIVE", option_sense );
             interactive = option_sense;
@@ -2712,64 +2721,64 @@ YY_RULE_SETUP
 	YY_BREAK
 case 60:
 YY_RULE_SETUP
-#line 366 "scan.l"
+#line 371 "scan.l"
 yytext_is_array = option_sense;
 	YY_BREAK
 case 61:
 YY_RULE_SETUP
-#line 367 "scan.l"
+#line 372 "scan.l"
 backing_up_report = option_sense;
 	YY_BREAK
 case 62:
 YY_RULE_SETUP
-#line 368 "scan.l"
+#line 373 "scan.l"
 interactive = ! option_sense;
 	YY_BREAK
 case 63:
 YY_RULE_SETUP
-#line 369 "scan.l"
+#line 374 "scan.l"
 bison_bridge_lval = option_sense;
 	YY_BREAK
 case 64:
 YY_RULE_SETUP
-#line 370 "scan.l"
+#line 375 "scan.l"
 { if((bison_bridge_lloc = option_sense))
                             bison_bridge_lval = true;
                      }
 	YY_BREAK
 case 65:
 YY_RULE_SETUP
-#line 373 "scan.l"
+#line 378 "scan.l"
 C_plus_plus = option_sense;
 	YY_BREAK
 case 66:
 YY_RULE_SETUP
-#line 374 "scan.l"
+#line 379 "scan.l"
 sf_set_case_ins(!option_sense);
 	YY_BREAK
 case 67:
 YY_RULE_SETUP
-#line 375 "scan.l"
+#line 380 "scan.l"
 sf_set_case_ins(option_sense);
 	YY_BREAK
 case 68:
 YY_RULE_SETUP
-#line 376 "scan.l"
+#line 381 "scan.l"
 ddebug = option_sense;
 	YY_BREAK
 case 69:
 YY_RULE_SETUP
-#line 377 "scan.l"
+#line 382 "scan.l"
 spprdflt = ! option_sense;
 	YY_BREAK
 case 70:
 YY_RULE_SETUP
-#line 378 "scan.l"
+#line 383 "scan.l"
 useecs = option_sense;
 	YY_BREAK
 case 71:
 YY_RULE_SETUP
-#line 379 "scan.l"
+#line 384 "scan.l"
 {
 			useecs = usemecs = false;
 			use_read = fullspd = true;
@@ -2777,7 +2786,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 72:
 YY_RULE_SETUP
-#line 383 "scan.l"
+#line 388 "scan.l"
 {
 			useecs = usemecs = false;
 			use_read = fulltbl = true;
@@ -2785,32 +2794,32 @@ YY_RULE_SETUP
 	YY_BREAK
 case 73:
 YY_RULE_SETUP
-#line 387 "scan.l"
+#line 392 "scan.l"
 ACTION_IFDEF("YY_NO_INPUT", ! option_sense);
 	YY_BREAK
 case 74:
 YY_RULE_SETUP
-#line 388 "scan.l"
+#line 393 "scan.l"
 interactive = option_sense;
 	YY_BREAK
 case 75:
 YY_RULE_SETUP
-#line 389 "scan.l"
+#line 394 "scan.l"
 lex_compat = option_sense;
 	YY_BREAK
 case 76:
 YY_RULE_SETUP
-#line 390 "scan.l"
+#line 395 "scan.l"
 posix_compat = option_sense;
 	YY_BREAK
 case 77:
 YY_RULE_SETUP
-#line 391 "scan.l"
+#line 396 "scan.l"
 gen_line_dirs = option_sense;
 	YY_BREAK
 case 78:
 YY_RULE_SETUP
-#line 392 "scan.l"
+#line 397 "scan.l"
 {
 			ACTION_M4_IFDEF( "M4""_YY_MAIN", option_sense);
             /* Override yywrap */
@@ -2820,12 +2829,12 @@ YY_RULE_SETUP
 	YY_BREAK
 case 79:
 YY_RULE_SETUP
-#line 398 "scan.l"
+#line 403 "scan.l"
 usemecs = option_sense;
 	YY_BREAK
 case 80:
 YY_RULE_SETUP
-#line 399 "scan.l"
+#line 404 "scan.l"
 {
 			ACTION_M4_IFDEF( "M4""_YY_NEVER_INTERACTIVE", option_sense );
             interactive = !option_sense;
@@ -2833,246 +2842,256 @@ YY_RULE_SETUP
 	YY_BREAK
 case 81:
 YY_RULE_SETUP
-#line 403 "scan.l"
+#line 408 "scan.l"
 performance_report += option_sense ? 1 : -1;
 	YY_BREAK
 case 82:
 YY_RULE_SETUP
-#line 404 "scan.l"
+#line 409 "scan.l"
 yytext_is_array = ! option_sense;
 	YY_BREAK
 case 83:
 YY_RULE_SETUP
-#line 405 "scan.l"
+#line 410 "scan.l"
 use_read = option_sense;
 	YY_BREAK
 case 84:
 YY_RULE_SETUP
-#line 406 "scan.l"
+#line 411 "scan.l"
 reentrant = option_sense;
 	YY_BREAK
 case 85:
 YY_RULE_SETUP
-#line 407 "scan.l"
+#line 412 "scan.l"
 reject_really_used = option_sense;
 	YY_BREAK
 case 86:
 YY_RULE_SETUP
-#line 408 "scan.l"
+#line 413 "scan.l"
 ACTION_M4_IFDEF( "M4""_YY_STACK_USED", option_sense );
 	YY_BREAK
 case 87:
 YY_RULE_SETUP
-#line 409 "scan.l"
+#line 414 "scan.l"
 do_stdinit = option_sense;
 	YY_BREAK
 case 88:
 YY_RULE_SETUP
-#line 410 "scan.l"
+#line 415 "scan.l"
 use_stdout = option_sense;
 	YY_BREAK
 case 89:
 YY_RULE_SETUP
-#line 411 "scan.l"
+#line 416 "scan.l"
 ACTION_IFDEF("YY_NO_UNISTD_H", ! option_sense);
 	YY_BREAK
 case 90:
 YY_RULE_SETUP
-#line 412 "scan.l"
+#line 417 "scan.l"
 ACTION_M4_IFDEF("M4""_YY_NO_UNPUT", ! option_sense);
 	YY_BREAK
 case 91:
 YY_RULE_SETUP
-#line 413 "scan.l"
+#line 418 "scan.l"
 printstats = option_sense;
 	YY_BREAK
 case 92:
 YY_RULE_SETUP
-#line 414 "scan.l"
+#line 419 "scan.l"
 nowarn = ! option_sense;
 	YY_BREAK
 case 93:
 YY_RULE_SETUP
-#line 415 "scan.l"
+#line 420 "scan.l"
 do_yylineno = option_sense; ACTION_M4_IFDEF("M4""_YY_USE_LINENO", option_sense);
 	YY_BREAK
 case 94:
 YY_RULE_SETUP
-#line 416 "scan.l"
+#line 421 "scan.l"
 yymore_really_used = option_sense;
 	YY_BREAK
 case 95:
 YY_RULE_SETUP
-#line 417 "scan.l"
+#line 422 "scan.l"
 do_yywrap = option_sense;
 	YY_BREAK
 case 96:
 YY_RULE_SETUP
-#line 419 "scan.l"
+#line 424 "scan.l"
 ACTION_M4_IFDEF("M4""_YY_NO_PUSH_STATE", ! option_sense);
 	YY_BREAK
 case 97:
 YY_RULE_SETUP
-#line 420 "scan.l"
+#line 425 "scan.l"
 ACTION_M4_IFDEF("M4""_YY_NO_POP_STATE", ! option_sense);
 	YY_BREAK
 case 98:
 YY_RULE_SETUP
-#line 421 "scan.l"
+#line 426 "scan.l"
 ACTION_M4_IFDEF("M4""_YY_NO_TOP_STATE", ! option_sense);
 	YY_BREAK
 case 99:
 YY_RULE_SETUP
-#line 423 "scan.l"
+#line 428 "scan.l"
 ACTION_M4_IFDEF("M4""_YY_NO_SCAN_BUFFER", ! option_sense);
 	YY_BREAK
 case 100:
 YY_RULE_SETUP
-#line 424 "scan.l"
+#line 429 "scan.l"
 ACTION_M4_IFDEF("M4""_YY_NO_SCAN_BYTES", ! option_sense);
 	YY_BREAK
 case 101:
 YY_RULE_SETUP
-#line 425 "scan.l"
+#line 430 "scan.l"
 ACTION_M4_IFDEF("M4""_YY_NO_SCAN_STRING", ! option_sense);
 	YY_BREAK
 case 102:
 YY_RULE_SETUP
-#line 427 "scan.l"
+#line 432 "scan.l"
 ACTION_M4_IFDEF("M4""_YY_NO_FLEX_ALLOC", ! option_sense);
 	YY_BREAK
 case 103:
 YY_RULE_SETUP
-#line 428 "scan.l"
+#line 433 "scan.l"
 ACTION_M4_IFDEF("M4""_YY_NO_FLEX_REALLOC", ! option_sense);
 	YY_BREAK
 case 104:
 YY_RULE_SETUP
-#line 429 "scan.l"
+#line 434 "scan.l"
 ACTION_M4_IFDEF("M4""_YY_NO_FLEX_FREE", ! option_sense);
 	YY_BREAK
 case 105:
 YY_RULE_SETUP
-#line 431 "scan.l"
+#line 436 "scan.l"
 ACTION_M4_IFDEF("M4""_YY_NO_GET_DEBUG", ! option_sense);
 	YY_BREAK
 case 106:
 YY_RULE_SETUP
-#line 432 "scan.l"
+#line 437 "scan.l"
 ACTION_M4_IFDEF("M4""_YY_NO_SET_DEBUG", ! option_sense);
 	YY_BREAK
 case 107:
 YY_RULE_SETUP
-#line 433 "scan.l"
+#line 438 "scan.l"
 ACTION_M4_IFDEF("M4""_YY_NO_GET_EXTRA", ! option_sense);
 	YY_BREAK
 case 108:
 YY_RULE_SETUP
-#line 434 "scan.l"
+#line 439 "scan.l"
 ACTION_M4_IFDEF("M4""_YY_NO_SET_EXTRA", ! option_sense);
 	YY_BREAK
 case 109:
 YY_RULE_SETUP
-#line 435 "scan.l"
+#line 440 "scan.l"
 ACTION_M4_IFDEF("M4""_YY_NO_GET_LENG", ! option_sense);
 	YY_BREAK
 case 110:
 YY_RULE_SETUP
-#line 436 "scan.l"
+#line 441 "scan.l"
 ACTION_M4_IFDEF("M4""_YY_NO_GET_TEXT", ! option_sense);
 	YY_BREAK
 case 111:
 YY_RULE_SETUP
-#line 437 "scan.l"
-ACTION_M4_IFDEF("M4""_YY_NO_GET_LINENO", ! option_sense);
+#line 442 "scan.l"
+ACTION_M4_IFDEF("M4""_YY_NO_GET_COLUMN", ! option_sense);
 	YY_BREAK
 case 112:
 YY_RULE_SETUP
-#line 438 "scan.l"
-ACTION_M4_IFDEF("M4""_YY_NO_SET_LINENO", ! option_sense);
+#line 443 "scan.l"
+ACTION_M4_IFDEF("M4""_YY_NO_SET_COLUMN", ! option_sense);
 	YY_BREAK
 case 113:
 YY_RULE_SETUP
-#line 439 "scan.l"
-ACTION_M4_IFDEF("M4""_YY_NO_GET_IN", ! option_sense);
+#line 444 "scan.l"
+ACTION_M4_IFDEF("M4""_YY_NO_GET_LINENO", ! option_sense);
 	YY_BREAK
 case 114:
 YY_RULE_SETUP
-#line 440 "scan.l"
-ACTION_M4_IFDEF("M4""_YY_NO_SET_IN", ! option_sense);
+#line 445 "scan.l"
+ACTION_M4_IFDEF("M4""_YY_NO_SET_LINENO", ! option_sense);
 	YY_BREAK
 case 115:
 YY_RULE_SETUP
-#line 441 "scan.l"
-ACTION_M4_IFDEF("M4""_YY_NO_GET_OUT", ! option_sense);
+#line 446 "scan.l"
+ACTION_M4_IFDEF("M4""_YY_NO_GET_IN", ! option_sense);
 	YY_BREAK
 case 116:
 YY_RULE_SETUP
-#line 442 "scan.l"
-ACTION_M4_IFDEF("M4""_YY_NO_SET_OUT", ! option_sense);
+#line 447 "scan.l"
+ACTION_M4_IFDEF("M4""_YY_NO_SET_IN", ! option_sense);
 	YY_BREAK
 case 117:
 YY_RULE_SETUP
-#line 443 "scan.l"
-ACTION_M4_IFDEF("M4""_YY_NO_GET_LVAL", ! option_sense);
+#line 448 "scan.l"
+ACTION_M4_IFDEF("M4""_YY_NO_GET_OUT", ! option_sense);
 	YY_BREAK
 case 118:
 YY_RULE_SETUP
-#line 444 "scan.l"
-ACTION_M4_IFDEF("M4""_YY_NO_SET_LVAL", ! option_sense);
+#line 449 "scan.l"
+ACTION_M4_IFDEF("M4""_YY_NO_SET_OUT", ! option_sense);
 	YY_BREAK
 case 119:
 YY_RULE_SETUP
-#line 445 "scan.l"
-ACTION_M4_IFDEF("M4""_YY_NO_GET_LLOC", ! option_sense);
+#line 450 "scan.l"
+ACTION_M4_IFDEF("M4""_YY_NO_GET_LVAL", ! option_sense);
 	YY_BREAK
 case 120:
 YY_RULE_SETUP
-#line 446 "scan.l"
-ACTION_M4_IFDEF("M4""_YY_NO_SET_LLOC", ! option_sense);
+#line 451 "scan.l"
+ACTION_M4_IFDEF("M4""_YY_NO_SET_LVAL", ! option_sense);
 	YY_BREAK
 case 121:
 YY_RULE_SETUP
-#line 448 "scan.l"
-return TOK_EXTRA_TYPE;
+#line 452 "scan.l"
+ACTION_M4_IFDEF("M4""_YY_NO_GET_LLOC", ! option_sense);
 	YY_BREAK
 case 122:
 YY_RULE_SETUP
-#line 449 "scan.l"
-return TOK_OUTFILE;
+#line 453 "scan.l"
+ACTION_M4_IFDEF("M4""_YY_NO_SET_LLOC", ! option_sense);
 	YY_BREAK
 case 123:
 YY_RULE_SETUP
-#line 450 "scan.l"
-return TOK_PREFIX;
+#line 455 "scan.l"
+return TOK_EXTRA_TYPE;
 	YY_BREAK
 case 124:
 YY_RULE_SETUP
-#line 451 "scan.l"
-return TOK_YYCLASS;
+#line 456 "scan.l"
+return TOK_OUTFILE;
 	YY_BREAK
 case 125:
 YY_RULE_SETUP
-#line 452 "scan.l"
-return TOK_HEADER_FILE;
+#line 457 "scan.l"
+return TOK_PREFIX;
 	YY_BREAK
 case 126:
 YY_RULE_SETUP
-#line 453 "scan.l"
-return TOK_TABLES_FILE;
+#line 458 "scan.l"
+return TOK_YYCLASS;
 	YY_BREAK
 case 127:
 YY_RULE_SETUP
-#line 454 "scan.l"
+#line 459 "scan.l"
+return TOK_HEADER_FILE;
+	YY_BREAK
+case 128:
+YY_RULE_SETUP
+#line 460 "scan.l"
+return TOK_TABLES_FILE;
+	YY_BREAK
+case 129:
+YY_RULE_SETUP
+#line 461 "scan.l"
 {
                     tablesverify = option_sense;
                     if(!tablesext && option_sense)
                         tablesext = true;
                     }
 	YY_BREAK
-case 128:
+case 130:
 YY_RULE_SETUP
-#line 461 "scan.l"
+#line 468 "scan.l"
 {
 			if(yyleng-1 < MAXLINE)
         		 {
@@ -3087,9 +3106,9 @@ YY_RULE_SETUP
 			return NAME;
 			}
 	YY_BREAK
-case 129:
+case 131:
 YY_RULE_SETUP
-#line 475 "scan.l"
+#line 482 "scan.l"
 {
 			format_synerr( _( "unrecognized %%option: %s" ),
 				yytext );
@@ -3097,31 +3116,31 @@ YY_RULE_SETUP
 			}
 	YY_BREAK
 
-case 130:
-/* rule 130 can match eol */
+case 132:
+/* rule 132 can match eol */
 YY_RULE_SETUP
-#line 482 "scan.l"
+#line 489 "scan.l"
 ++linenum; BEGIN(INITIAL);
 	YY_BREAK
 
-case 131:
+case 133:
 YY_RULE_SETUP
-#line 486 "scan.l"
+#line 493 "scan.l"
 ++bracelevel; yyless( 2 );	/* eat only %{ */
 	YY_BREAK
-case 132:
+case 134:
 YY_RULE_SETUP
-#line 487 "scan.l"
+#line 494 "scan.l"
 --bracelevel; yyless( 2 );	/* eat only %} */
 	YY_BREAK
-case 133:
+case 135:
 YY_RULE_SETUP
-#line 489 "scan.l"
+#line 496 "scan.l"
 START_CODEBLOCK(true); /* indented code in prolog */
 	YY_BREAK
-case 134:
+case 136:
 YY_RULE_SETUP
-#line 491 "scan.l"
+#line 498 "scan.l"
 {
         /* non-indented code */
 		if ( bracelevel <= 0 ) {
@@ -3135,19 +3154,19 @@ YY_RULE_SETUP
         }
     }
 	YY_BREAK
-case 135:
+case 137:
 YY_RULE_SETUP
-#line 504 "scan.l"
+#line 511 "scan.l"
 ACTION_ECHO;
 	YY_BREAK
-case 136:
-/* rule 136 can match eol */
+case 138:
+/* rule 138 can match eol */
 YY_RULE_SETUP
-#line 505 "scan.l"
+#line 512 "scan.l"
 ++linenum; ACTION_ECHO;
 	YY_BREAK
 case YY_STATE_EOF(SECT2PROLOG):
-#line 507 "scan.l"
+#line 514 "scan.l"
 {
 			mark_prolog();
 			sectnum = 0;
@@ -3156,15 +3175,15 @@ case YY_STATE_EOF(SECT2PROLOG):
 	YY_BREAK
 
 
-case 137:
-/* rule 137 can match eol */
+case 139:
+/* rule 139 can match eol */
 YY_RULE_SETUP
-#line 515 "scan.l"
+#line 522 "scan.l"
 ++linenum; /* allow blank lines in section 2 */
 	YY_BREAK
-case 138:
+case 140:
 YY_RULE_SETUP
-#line 517 "scan.l"
+#line 524 "scan.l"
 {
 			indented_code = false;
 			doing_codeblock = true;
@@ -3172,9 +3191,9 @@ YY_RULE_SETUP
 			BEGIN(PERCENT_BRACE_ACTION);
 			}
 	YY_BREAK
-case 139:
+case 141:
 YY_RULE_SETUP
-#line 524 "scan.l"
+#line 531 "scan.l"
 {
                         /* Allow "<" to appear in (?x) patterns. */
                         if (!sf_skip_ws())
@@ -3182,22 +3201,22 @@ YY_RULE_SETUP
                         return '<';
                     }
 	YY_BREAK
-case 140:
+case 142:
 YY_RULE_SETUP
-#line 530 "scan.l"
+#line 537 "scan.l"
 return '^';
 	YY_BREAK
-case 141:
+case 143:
 YY_RULE_SETUP
-#line 531 "scan.l"
+#line 538 "scan.l"
 BEGIN(QUOTE); return '"';
 	YY_BREAK
-case 142:
+case 144:
 *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
 (yy_c_buf_p) = yy_cp = yy_bp + 1;
 YY_DO_BEFORE_ACTION; /* set up yytext again */
 YY_RULE_SETUP
-#line 532 "scan.l"
+#line 539 "scan.l"
 {
 			BEGIN(NUM);
 			if ( lex_compat || posix_compat )
@@ -3206,19 +3225,19 @@ YY_RULE_SETUP
 				return BEGIN_REPEAT_FLEX;
 			}
 	YY_BREAK
-case 143:
-/* rule 143 can match eol */
+case 145:
+/* rule 145 can match eol */
 *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
 YY_LINENO_REWIND_TO(yy_bp + 1);
 (yy_c_buf_p) = yy_cp = yy_bp + 1;
 YY_DO_BEFORE_ACTION; /* set up yytext again */
 YY_RULE_SETUP
-#line 539 "scan.l"
+#line 546 "scan.l"
 return '$';
 	YY_BREAK
-case 144:
+case 146:
 YY_RULE_SETUP
-#line 541 "scan.l"
+#line 548 "scan.l"
 {
 			bracelevel = 1;
 			BEGIN(PERCENT_BRACE_ACTION);
@@ -3231,10 +3250,10 @@ YY_RULE_SETUP
 				}
 			}
 	YY_BREAK
-case 145:
-/* rule 145 can match eol */
+case 147:
+/* rule 147 can match eol */
 YY_RULE_SETUP
-#line 552 "scan.l"
+#line 559 "scan.l"
 {
                         if (sf_skip_ws()){
                             /* We're in the middle of a (?x: ) pattern. */
@@ -3250,9 +3269,9 @@ YY_RULE_SETUP
                         }
                     }
 	YY_BREAK
-case 146:
+case 148:
 YY_RULE_SETUP
-#line 567 "scan.l"
+#line 574 "scan.l"
 {
 
                 if (sf_skip_ws()){
@@ -3267,14 +3286,14 @@ YY_RULE_SETUP
                 }
 			}
 	YY_BREAK
-case 147:
+case 149:
 YY_RULE_SETUP
-#line 581 "scan.l"
+#line 588 "scan.l"
 /* allow indented rules */ ;
 	YY_BREAK
-case 148:
+case 150:
 YY_RULE_SETUP
-#line 583 "scan.l"
+#line 590 "scan.l"
 {
             if (sf_skip_ws()){
                 /* We're in the middle of a (?x: ) pattern. */
@@ -3297,10 +3316,10 @@ YY_RULE_SETUP
             }
 			}
 	YY_BREAK
-case 149:
-/* rule 149 can match eol */
+case 151:
+/* rule 151 can match eol */
 YY_RULE_SETUP
-#line 605 "scan.l"
+#line 612 "scan.l"
 {
             if (sf_skip_ws()){
                 /* We're in the middle of a (?x: ) pattern. */
@@ -3321,16 +3340,16 @@ YY_RULE_SETUP
             }
 			}
 	YY_BREAK
-case 150:
-#line 626 "scan.l"
-case 151:
+case 152:
+#line 633 "scan.l"
+case 153:
 YY_RULE_SETUP
-#line 626 "scan.l"
+#line 633 "scan.l"
 return EOF_OP;
 	YY_BREAK
-case 152:
+case 154:
 YY_RULE_SETUP
-#line 628 "scan.l"
+#line 635 "scan.l"
 {
 			sectnum = 3;
 			BEGIN(no_section3_escape ? SECT3_NOESCAPE : SECT3);
@@ -3339,9 +3358,9 @@ YY_RULE_SETUP
 
 			}
 	YY_BREAK
-case 153:
+case 155:
 YY_RULE_SETUP
-#line 636 "scan.l"
+#line 643 "scan.l"
 {
 			int cclval;
 
@@ -3389,24 +3408,24 @@ YY_RULE_SETUP
 				}
 			}
 	YY_BREAK
-case 154:
+case 156:
 YY_RULE_SETUP
-#line 682 "scan.l"
+#line 689 "scan.l"
 return CCL_OP_DIFF;
 	YY_BREAK
-case 155:
+case 157:
 YY_RULE_SETUP
-#line 683 "scan.l"
+#line 690 "scan.l"
 return CCL_OP_UNION;
 	YY_BREAK
 /* Check for :space: at the end of the rule so we don't
      * wrap the expanded regex in '(' ')' -- breaking trailing
      * context.
      */
-case 156:
-/* rule 156 can match eol */
+case 158:
+/* rule 158 can match eol */
 YY_RULE_SETUP
-#line 690 "scan.l"
+#line 697 "scan.l"
 {
 			char *nmdefptr;
             int end_is_ws, end_ch;
@@ -3455,9 +3474,9 @@ nmstr[yyleng - 2 - end_is_ws] = '\0';  /
 				}
 			}
 	YY_BREAK
-case 157:
+case 159:
 YY_RULE_SETUP
-#line 738 "scan.l"
+#line 745 "scan.l"
 {
                     if (sf_skip_ws())
                         yy_push_state(COMMENT_DISCARD);
@@ -3468,9 +3487,9 @@ YY_RULE_SETUP
                     }
                 }
 	YY_BREAK
-case 158:
+case 160:
 YY_RULE_SETUP
-#line 748 "scan.l"
+#line 755 "scan.l"
 {
                     if (lex_compat || posix_compat){
                         /* Push back the "?#" and treat it like a normal parens. */
@@ -3482,9 +3501,9 @@ YY_RULE_SETUP
                         yy_push_state(EXTENDED_COMMENT);
                 }
 	YY_BREAK
-case 159:
+case 161:
 YY_RULE_SETUP
-#line 758 "scan.l"
+#line 765 "scan.l"
 {
                     sf_push();
                     if (lex_compat || posix_compat)
@@ -3495,14 +3514,14 @@ YY_RULE_SETUP
                     return '(';
                 }
 	YY_BREAK
-case 160:
+case 162:
 YY_RULE_SETUP
-#line 767 "scan.l"
+#line 774 "scan.l"
 sf_push(); return '(';
 	YY_BREAK
-case 161:
+case 163:
 YY_RULE_SETUP
-#line 768 "scan.l"
+#line 775 "scan.l"
 {
                     if (_sf_top_ix > 0) {
                         sf_pop();
@@ -3511,76 +3530,76 @@ YY_RULE_SETUP
                         synerr(_("unbalanced parenthesis"));
                 }
 	YY_BREAK
-case 162:
+case 164:
 YY_RULE_SETUP
-#line 776 "scan.l"
+#line 783 "scan.l"
 return (unsigned char) yytext[0];
 	YY_BREAK
-case 163:
+case 165:
 YY_RULE_SETUP
-#line 777 "scan.l"
+#line 784 "scan.l"
 RETURNCHAR;
 	YY_BREAK
 
 
-case 164:
-/* rule 164 can match eol */
+case 166:
+/* rule 166 can match eol */
 YY_RULE_SETUP
-#line 782 "scan.l"
+#line 789 "scan.l"
 ++linenum;	/* Allow blank lines & continuations */
 	YY_BREAK
-case 165:
+case 167:
 YY_RULE_SETUP
-#line 783 "scan.l"
+#line 790 "scan.l"
 return (unsigned char) yytext[0];
 	YY_BREAK
-case 166:
+case 168:
 YY_RULE_SETUP
-#line 784 "scan.l"
+#line 791 "scan.l"
 BEGIN(SECT2); return '>';
 	YY_BREAK
-case 167:
+case 169:
 *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
 (yy_c_buf_p) = yy_cp = yy_bp + 1;
 YY_DO_BEFORE_ACTION; /* set up yytext again */
 YY_RULE_SETUP
-#line 785 "scan.l"
+#line 792 "scan.l"
 BEGIN(CARETISBOL); return '>';
 	YY_BREAK
-case 168:
+case 170:
 YY_RULE_SETUP
-#line 786 "scan.l"
+#line 793 "scan.l"
 RETURNNAME;
 	YY_BREAK
-case 169:
+case 171:
 YY_RULE_SETUP
-#line 787 "scan.l"
+#line 794 "scan.l"
 {
 			format_synerr( _( "bad <start condition>: %s" ),
 				yytext );
 			}
 	YY_BREAK
 
-case 170:
+case 172:
 YY_RULE_SETUP
-#line 793 "scan.l"
+#line 800 "scan.l"
 BEGIN(SECT2); return '^';
 	YY_BREAK
 
-case 171:
+case 173:
 YY_RULE_SETUP
-#line 797 "scan.l"
+#line 804 "scan.l"
 RETURNCHAR;
 	YY_BREAK
-case 172:
+case 174:
 YY_RULE_SETUP
-#line 798 "scan.l"
+#line 805 "scan.l"
 BEGIN(SECT2); return '"';
 	YY_BREAK
-case 173:
-/* rule 173 can match eol */
+case 175:
+/* rule 175 can match eol */
 YY_RULE_SETUP
-#line 800 "scan.l"
+#line 807 "scan.l"
 {
 			synerr( _( "missing quote" ) );
 			BEGIN(SECT2);
@@ -3590,100 +3609,100 @@ YY_RULE_SETUP
 	YY_BREAK
 
 
-case 174:
+case 176:
 YY_RULE_SETUP
-#line 809 "scan.l"
+#line 816 "scan.l"
 BEGIN(SECT2);
 	YY_BREAK
-case 175:
+case 177:
 YY_RULE_SETUP
-#line 810 "scan.l"
+#line 817 "scan.l"
 BEGIN(GROUP_MINUS_PARAMS);
 	YY_BREAK
-case 176:
+case 178:
 YY_RULE_SETUP
-#line 811 "scan.l"
+#line 818 "scan.l"
 sf_set_case_ins(1);
 	YY_BREAK
-case 177:
+case 179:
 YY_RULE_SETUP
-#line 812 "scan.l"
+#line 819 "scan.l"
 sf_set_dot_all(1);
 	YY_BREAK
-case 178:
+case 180:
 YY_RULE_SETUP
-#line 813 "scan.l"
+#line 820 "scan.l"
 sf_set_skip_ws(1);
 	YY_BREAK
 
 
-case 179:
+case 181:
 YY_RULE_SETUP
-#line 816 "scan.l"
+#line 823 "scan.l"
 BEGIN(SECT2);
 	YY_BREAK
-case 180:
+case 182:
 YY_RULE_SETUP
-#line 817 "scan.l"
+#line 824 "scan.l"
 sf_set_case_ins(0);
 	YY_BREAK
-case 181:
+case 183:
 YY_RULE_SETUP
-#line 818 "scan.l"
+#line 825 "scan.l"
 sf_set_dot_all(0);
 	YY_BREAK
-case 182:
+case 184:
 YY_RULE_SETUP
-#line 819 "scan.l"
+#line 826 "scan.l"
 sf_set_skip_ws(0);
 	YY_BREAK
 
 
-case 183:
+case 185:
 *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
 (yy_c_buf_p) = yy_cp = yy_bp + 1;
 YY_DO_BEFORE_ACTION; /* set up yytext again */
 YY_RULE_SETUP
-#line 823 "scan.l"
+#line 830 "scan.l"
 BEGIN(CCL); return '^';
 	YY_BREAK
-case 184:
+case 186:
 *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
 (yy_c_buf_p) = yy_cp = yy_bp + 1;
 YY_DO_BEFORE_ACTION; /* set up yytext again */
 YY_RULE_SETUP
-#line 824 "scan.l"
+#line 831 "scan.l"
 return '^';
 	YY_BREAK
-case 185:
+case 187:
 YY_RULE_SETUP
-#line 825 "scan.l"
+#line 832 "scan.l"
 BEGIN(CCL); RETURNCHAR;
 	YY_BREAK
 
 
-case 186:
+case 188:
 *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
 (yy_c_buf_p) = yy_cp = yy_bp + 1;
 YY_DO_BEFORE_ACTION; /* set up yytext again */
 YY_RULE_SETUP
-#line 829 "scan.l"
+#line 836 "scan.l"
 return '-';
 	YY_BREAK
-case 187:
+case 189:
 YY_RULE_SETUP
-#line 830 "scan.l"
+#line 837 "scan.l"
 RETURNCHAR;
 	YY_BREAK
-case 188:
+case 190:
 YY_RULE_SETUP
-#line 831 "scan.l"
+#line 838 "scan.l"
 BEGIN(SECT2); return ']';
 	YY_BREAK
-case 189:
-/* rule 189 can match eol */
+case 191:
+/* rule 191 can match eol */
 YY_RULE_SETUP
-#line 832 "scan.l"
+#line 839 "scan.l"
 {
 			synerr( _( "bad character class" ) );
 			BEGIN(SECT2);
@@ -3692,129 +3711,129 @@ YY_RULE_SETUP
 	YY_BREAK
 
 
-case 190:
+case 192:
 YY_RULE_SETUP
-#line 840 "scan.l"
+#line 847 "scan.l"
 BEGIN(CCL); return CCE_ALNUM;
 	YY_BREAK
-case 191:
+case 193:
 YY_RULE_SETUP
-#line 841 "scan.l"
+#line 848 "scan.l"
 BEGIN(CCL); return CCE_ALPHA;
 	YY_BREAK
-case 192:
+case 194:
 YY_RULE_SETUP
-#line 842 "scan.l"
+#line 849 "scan.l"
 BEGIN(CCL); return CCE_BLANK;
 	YY_BREAK
-case 193:
+case 195:
 YY_RULE_SETUP
-#line 843 "scan.l"
+#line 850 "scan.l"
 BEGIN(CCL); return CCE_CNTRL;
 	YY_BREAK
-case 194:
+case 196:
 YY_RULE_SETUP
-#line 844 "scan.l"
+#line 851 "scan.l"
 BEGIN(CCL); return CCE_DIGIT;
 	YY_BREAK
-case 195:
+case 197:
 YY_RULE_SETUP
-#line 845 "scan.l"
+#line 852 "scan.l"
 BEGIN(CCL); return CCE_GRAPH;
 	YY_BREAK
-case 196:
+case 198:
 YY_RULE_SETUP
-#line 846 "scan.l"
+#line 853 "scan.l"
 BEGIN(CCL); return CCE_LOWER;
 	YY_BREAK
-case 197:
+case 199:
 YY_RULE_SETUP
-#line 847 "scan.l"
+#line 854 "scan.l"
 BEGIN(CCL); return CCE_PRINT;
 	YY_BREAK
-case 198:
+case 200:
 YY_RULE_SETUP
-#line 848 "scan.l"
+#line 855 "scan.l"
 BEGIN(CCL); return CCE_PUNCT;
 	YY_BREAK
-case 199:
+case 201:
 YY_RULE_SETUP
-#line 849 "scan.l"
+#line 856 "scan.l"
 BEGIN(CCL); return CCE_SPACE;
 	YY_BREAK
-case 200:
+case 202:
 YY_RULE_SETUP
-#line 850 "scan.l"
+#line 857 "scan.l"
 BEGIN(CCL); return CCE_UPPER;
 	YY_BREAK
-case 201:
+case 203:
 YY_RULE_SETUP
-#line 851 "scan.l"
+#line 858 "scan.l"
 BEGIN(CCL); return CCE_XDIGIT;
 	YY_BREAK
-case 202:
+case 204:
 YY_RULE_SETUP
-#line 853 "scan.l"
+#line 860 "scan.l"
 BEGIN(CCL); return CCE_NEG_ALNUM;
 	YY_BREAK
-case 203:
+case 205:
 YY_RULE_SETUP
-#line 854 "scan.l"
+#line 861 "scan.l"
 BEGIN(CCL); return CCE_NEG_ALPHA;
 	YY_BREAK
-case 204:
+case 206:
 YY_RULE_SETUP
-#line 855 "scan.l"
+#line 862 "scan.l"
 BEGIN(CCL); return CCE_NEG_BLANK;
 	YY_BREAK
-case 205:
+case 207:
 YY_RULE_SETUP
-#line 856 "scan.l"
+#line 863 "scan.l"
 BEGIN(CCL); return CCE_NEG_CNTRL;
 	YY_BREAK
-case 206:
+case 208:
 YY_RULE_SETUP
-#line 857 "scan.l"
+#line 864 "scan.l"
 BEGIN(CCL); return CCE_NEG_DIGIT;
 	YY_BREAK
-case 207:
+case 209:
 YY_RULE_SETUP
-#line 858 "scan.l"
+#line 865 "scan.l"
 BEGIN(CCL); return CCE_NEG_GRAPH;
 	YY_BREAK
-case 208:
+case 210:
 YY_RULE_SETUP
-#line 859 "scan.l"
+#line 866 "scan.l"
 BEGIN(CCL); return CCE_NEG_LOWER;
 	YY_BREAK
-case 209:
+case 211:
 YY_RULE_SETUP
-#line 860 "scan.l"
+#line 867 "scan.l"
 BEGIN(CCL); return CCE_NEG_PRINT;
 	YY_BREAK
-case 210:
+case 212:
 YY_RULE_SETUP
-#line 861 "scan.l"
+#line 868 "scan.l"
 BEGIN(CCL); return CCE_NEG_PUNCT;
 	YY_BREAK
-case 211:
+case 213:
 YY_RULE_SETUP
-#line 862 "scan.l"
+#line 869 "scan.l"
 BEGIN(CCL); return CCE_NEG_SPACE;
 	YY_BREAK
-case 212:
+case 214:
 YY_RULE_SETUP
-#line 863 "scan.l"
+#line 870 "scan.l"
 BEGIN(CCL); return CCE_NEG_UPPER;
 	YY_BREAK
-case 213:
+case 215:
 YY_RULE_SETUP
-#line 864 "scan.l"
+#line 871 "scan.l"
 BEGIN(CCL); return CCE_NEG_XDIGIT;
 	YY_BREAK
-case 214:
+case 216:
 YY_RULE_SETUP
-#line 865 "scan.l"
+#line 872 "scan.l"
 {
 			format_synerr(
 				_( "bad character class expression: %s" ),
@@ -3824,22 +3843,22 @@ YY_RULE_SETUP
 	YY_BREAK
 
 
-case 215:
+case 217:
 YY_RULE_SETUP
-#line 874 "scan.l"
+#line 881 "scan.l"
 {
 			yylval = myctoi( yytext );
 			return NUMBER;
 			}
 	YY_BREAK
-case 216:
+case 218:
 YY_RULE_SETUP
-#line 879 "scan.l"
+#line 886 "scan.l"
 return ',';
 	YY_BREAK
-case 217:
+case 219:
 YY_RULE_SETUP
-#line 880 "scan.l"
+#line 887 "scan.l"
 {
 			BEGIN(SECT2);
 			if ( lex_compat || posix_compat )
@@ -3848,19 +3867,19 @@ YY_RULE_SETUP
 				return END_REPEAT_FLEX;
 			}
 	YY_BREAK
-case 218:
+case 220:
 YY_RULE_SETUP
-#line 888 "scan.l"
+#line 895 "scan.l"
 {
 			synerr( _( "bad character inside {}'s" ) );
 			BEGIN(SECT2);
 			return '}';
 			}
 	YY_BREAK
-case 219:
-/* rule 219 can match eol */
+case 221:
+/* rule 221 can match eol */
 YY_RULE_SETUP
-#line 894 "scan.l"
+#line 901 "scan.l"
 {
 			synerr( _( "missing }" ) );
 			BEGIN(SECT2);
@@ -3870,43 +3889,43 @@ YY_RULE_SETUP
 	YY_BREAK
 
 
-case 220:
+case 222:
 YY_RULE_SETUP
-#line 904 "scan.l"
+#line 911 "scan.l"
 bracelevel = 0;
 	YY_BREAK
-case 221:
+case 223:
 YY_RULE_SETUP
-#line 906 "scan.l"
+#line 913 "scan.l"
 ACTION_ECHO; yy_push_state( CODE_COMMENT );
 	YY_BREAK
 
-case 222:
+case 224:
 YY_RULE_SETUP
-#line 909 "scan.l"
+#line 916 "scan.l"
 {
             ACTION_ECHO;
             CHECK_REJECT(yytext);
         }
 	YY_BREAK
-case 223:
+case 225:
 YY_RULE_SETUP
-#line 913 "scan.l"
+#line 920 "scan.l"
 {
             ACTION_ECHO;
             CHECK_YYMORE(yytext);
         }
 	YY_BREAK
 
-case 224:
+case 226:
 YY_RULE_SETUP
-#line 919 "scan.l"
+#line 926 "scan.l"
 ACTION_ECHO;
 	YY_BREAK
-case 225:
-/* rule 225 can match eol */
+case 227:
+/* rule 227 can match eol */
 YY_RULE_SETUP
-#line 920 "scan.l"
+#line 927 "scan.l"
 {
 		++linenum;
 		ACTION_ECHO;
@@ -3922,45 +3941,45 @@ YY_RULE_SETUP
 
 /* Reject and YYmore() are checked for above, in PERCENT_BRACE_ACTION */
 
-case 226:
+case 228:
 YY_RULE_SETUP
-#line 936 "scan.l"
+#line 943 "scan.l"
 ACTION_ECHO; ++bracelevel;
 	YY_BREAK
-case 227:
+case 229:
 YY_RULE_SETUP
-#line 937 "scan.l"
+#line 944 "scan.l"
 ACTION_ECHO; --bracelevel;
 	YY_BREAK
-case 228:
+case 230:
 YY_RULE_SETUP
-#line 938 "scan.l"
+#line 945 "scan.l"
 ACTION_ECHO;
 	YY_BREAK
-case 229:
+case 231:
 YY_RULE_SETUP
-#line 939 "scan.l"
+#line 946 "scan.l"
 ACTION_ECHO;
 	YY_BREAK
-case 230:
+case 232:
 YY_RULE_SETUP
-#line 940 "scan.l"
+#line 947 "scan.l"
 ACTION_ECHO; /* character constant */
 	YY_BREAK
-case 231:
+case 233:
 YY_RULE_SETUP
-#line 941 "scan.l"
+#line 948 "scan.l"
 ACTION_ECHO; BEGIN(CHARACTER_CONSTANT);
 	YY_BREAK
-case 232:
+case 234:
 YY_RULE_SETUP
-#line 942 "scan.l"
+#line 949 "scan.l"
 ACTION_ECHO; BEGIN(ACTION_STRING);
 	YY_BREAK
-case 233:
-/* rule 233 can match eol */
+case 235:
+/* rule 235 can match eol */
 YY_RULE_SETUP
-#line 943 "scan.l"
+#line 950 "scan.l"
 {
                 ++linenum;
                 ACTION_ECHO;
@@ -3973,58 +3992,58 @@ YY_RULE_SETUP
                 }
              }
 	YY_BREAK
-case 234:
+case 236:
 YY_RULE_SETUP
-#line 954 "scan.l"
+#line 961 "scan.l"
 ACTION_ECHO;
 	YY_BREAK
 
 
-case 235:
+case 237:
 YY_RULE_SETUP
-#line 958 "scan.l"
+#line 965 "scan.l"
 ACTION_ECHO;
 	YY_BREAK
-case 236:
+case 238:
 YY_RULE_SETUP
-#line 959 "scan.l"
+#line 966 "scan.l"
 ACTION_ECHO; BEGIN(ACTION);
 	YY_BREAK
 
 
-case 237:
+case 239:
 YY_RULE_SETUP
-#line 962 "scan.l"
+#line 969 "scan.l"
 ACTION_ECHO;
 	YY_BREAK
-case 238:
+case 240:
 YY_RULE_SETUP
-#line 963 "scan.l"
+#line 970 "scan.l"
 ACTION_ECHO; BEGIN(ACTION);
 	YY_BREAK
 
 
-case 239:
-/* rule 239 can match eol */
+case 241:
+/* rule 241 can match eol */
 YY_RULE_SETUP
-#line 966 "scan.l"
+#line 973 "scan.l"
 ACTION_ECHO;
 	YY_BREAK
-case 240:
-/* rule 240 can match eol */
+case 242:
+/* rule 242 can match eol */
 YY_RULE_SETUP
-#line 967 "scan.l"
+#line 974 "scan.l"
 ACTION_ECHO;
 	YY_BREAK
-case 241:
-/* rule 241 can match eol */
+case 243:
+/* rule 243 can match eol */
 YY_RULE_SETUP
-#line 968 "scan.l"
+#line 975 "scan.l"
 ++linenum; ACTION_ECHO; if (bracelevel <= 0) { BEGIN(SECT2); } else { BEGIN(ACTION); }
 	YY_BREAK
-case 242:
+case 244:
 YY_RULE_SETUP
-#line 969 "scan.l"
+#line 976 "scan.l"
 ACTION_ECHO;
 	YY_BREAK
 
@@ -4034,7 +4053,7 @@ case YY_STATE_EOF(COMMENT_DISCARD):
 case YY_STATE_EOF(ACTION):
 case YY_STATE_EOF(ACTION_STRING):
 case YY_STATE_EOF(CHARACTER_CONSTANT):
-#line 972 "scan.l"
+#line 979 "scan.l"
 {
 			synerr( _( "EOF encountered inside an action" ) );
 			yyterminate();
@@ -4043,15 +4062,15 @@ case YY_STATE_EOF(CHARACTER_CONSTANT):
 case YY_STATE_EOF(EXTENDED_COMMENT):
 case YY_STATE_EOF(GROUP_WITH_PARAMS):
 case YY_STATE_EOF(GROUP_MINUS_PARAMS):
-#line 977 "scan.l"
+#line 984 "scan.l"
 {
 			synerr( _( "EOF encountered inside pattern" ) );
 			yyterminate();
 			}
 	YY_BREAK
-case 243:
+case 245:
 YY_RULE_SETUP
-#line 982 "scan.l"
+#line 989 "scan.l"
 {
 			yylval = myesc( (unsigned char *) yytext );
 
@@ -4062,29 +4081,29 @@ YY_RULE_SETUP
 			}
 	YY_BREAK
 
-case 244:
+case 246:
 YY_RULE_SETUP
-#line 992 "scan.l"
+#line 999 "scan.l"
 fputs(escaped_qstart, yyout);
 	YY_BREAK
-case 245:
+case 247:
 YY_RULE_SETUP
-#line 993 "scan.l"
+#line 1000 "scan.l"
 fputs(escaped_qend, yyout);
 	YY_BREAK
-case 246:
-/* rule 246 can match eol */
+case 248:
+/* rule 248 can match eol */
 YY_RULE_SETUP
-#line 994 "scan.l"
+#line 1001 "scan.l"
 ECHO;
 	YY_BREAK
-case 247:
+case 249:
 YY_RULE_SETUP
-#line 995 "scan.l"
+#line 1002 "scan.l"
 ECHO;
 	YY_BREAK
 case YY_STATE_EOF(SECT3):
-#line 996 "scan.l"
+#line 1003 "scan.l"
 {
         sectnum = 0;
         yyterminate();
@@ -4092,47 +4111,47 @@ case YY_STATE_EOF(SECT3):
 	YY_BREAK
 
 
-case 248:
+case 250:
 YY_RULE_SETUP
-#line 1002 "scan.l"
+#line 1009 "scan.l"
 fprintf(yyout, "[""[%s]""]", escaped_qstart);
 	YY_BREAK
-case 249:
+case 251:
 YY_RULE_SETUP
-#line 1003 "scan.l"
+#line 1010 "scan.l"
 fprintf(yyout, "[""[%s]""]", escaped_qend);
 	YY_BREAK
-case 250:
-/* rule 250 can match eol */
+case 252:
+/* rule 252 can match eol */
 YY_RULE_SETUP
-#line 1004 "scan.l"
+#line 1011 "scan.l"
 ECHO;
 	YY_BREAK
-case 251:
+case 253:
 YY_RULE_SETUP
-#line 1005 "scan.l"
+#line 1012 "scan.l"
 ECHO;
 	YY_BREAK
 case YY_STATE_EOF(SECT3_NOESCAPE):
-#line 1006 "scan.l"
+#line 1013 "scan.l"
 {
        sectnum = 0;
        yyterminate();
     }
 	YY_BREAK
 
-case 252:
-/* rule 252 can match eol */
+case 254:
+/* rule 254 can match eol */
 YY_RULE_SETUP
-#line 1011 "scan.l"
+#line 1018 "scan.l"
 format_synerr( _( "bad character: %s" ), yytext );
 	YY_BREAK
-case 253:
+case 255:
 YY_RULE_SETUP
-#line 1013 "scan.l"
+#line 1020 "scan.l"
 YY_FATAL_ERROR( "flex scanner jammed" );
 	YY_BREAK
-#line 4135 "scan.c"
+#line 4155 "scan.c"
 case YY_STATE_EOF(INITIAL):
 case YY_STATE_EOF(SECT2):
 case YY_STATE_EOF(CODEBLOCK):
@@ -4443,7 +4462,7 @@ static int yy_get_next_buffer (void)
 		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
 			{
 			yy_current_state = (int) yy_def[yy_current_state];
-			if ( yy_current_state >= 1114 )
+			if ( yy_current_state >= 1126 )
 				yy_c = yy_meta[yy_c];
 			}
 		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
@@ -4471,11 +4490,11 @@ static int yy_get_next_buffer (void)
 	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
 		{
 		yy_current_state = (int) yy_def[yy_current_state];
-		if ( yy_current_state >= 1114 )
+		if ( yy_current_state >= 1126 )
 			yy_c = yy_meta[yy_c];
 		}
 	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
-	yy_is_jam = (yy_current_state == 1113);
+	yy_is_jam = (yy_current_state == 1125);
 
 		return yy_is_jam ? 0 : yy_current_state;
 }
@@ -5194,7 +5213,7 @@ void yyfree (void * ptr )
 
 #define YYTABLES_NAME "yytables"
 
-#line 1013 "scan.l"
+#line 1020 "scan.l"
 
 
 
